{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Individual<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Individual<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Individual<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Individual<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<genetic::Individual<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new_with_vec\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Individual<T>>::new_with_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"crossover\"), disambiguator: 0 }]","has_unsafe":true,"name":"<genetic::Individual<T>>::crossover"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"mutate\"), disambiguator: 0 }]","has_unsafe":true,"name":"<genetic::Individual<T>>::mutate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Population<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::PopulationConfiguration<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new_with_vec\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Population<T>>::new_with_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<genetic::Population<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_fittest\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Population<T>>::get_fittest"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_top\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Population<T>>::get_top"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"tournment\"), disambiguator: 0 }]","has_unsafe":true,"name":"<genetic::Population<T>>::tournment"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"evolve\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic::Population<T>>::evolve"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"simple_fitness\"), disambiguator: 0 }]","has_unsafe":false,"name":"genetic_test::simple_fitness"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default_population_configuration\"), disambiguator: 0 }]","has_unsafe":false,"name":"genetic_test::default_population_configuration"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic_planner::Plan<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic_planner::Action<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"rand\"), disambiguator: 0 }]","has_unsafe":true,"name":"<genetic_planner::Action<T> as rand::Rand>::rand"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic_planner::Action<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"apply_actions\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::apply_actions"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fitness_planner\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::fitness_planner"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_population_configuration\"), disambiguator: 0 }]","has_unsafe":false,"name":"genetic_planner::get_population_configuration"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_solution_and_population_from_population\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::find_solution_and_population_from_population"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_solution_and_population\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::find_solution_and_population"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_solution\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::find_solution"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_solution_from_population\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::find_solution_from_population"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_best_and_population_after_iterations_from_population\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::find_best_and_population_after_iterations_from_population"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_best_and_population_after_iterations\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::find_best_and_population_after_iterations"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_best_after_iterations\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::find_best_after_iterations"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_best_after_iterations_from_population\"), disambiguator: 0 }]","has_unsafe":true,"name":"genetic_planner::find_best_after_iterations_from_population"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic_planner_test::Coin as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic_planner_test::Coin as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic_planner_test::Coin as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_initial_state\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic_planner_test::Coin as genetic_planner::State>::get_initial_state"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_random_action\"), disambiguator: 0 }]","has_unsafe":true,"name":"<genetic_planner_test::Coin as genetic_planner::State>::get_random_action"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_goal\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic_planner_test::Coin as genetic_planner::State>::is_goal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_heuristic\"), disambiguator: 0 }]","has_unsafe":false,"name":"<genetic_planner_test::Coin as genetic_planner::State>::get_heuristic"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flip\"), disambiguator: 0 }]","has_unsafe":false,"name":"genetic_planner_test::flip"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"genetic_planner_test\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flop\"), disambiguator: 0 }]","has_unsafe":false,"name":"genetic_planner_test::flop"}
