{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Recursive<G, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Recursive<G, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Recursive<G, F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Recursive<G, F>>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Recursive<G, F> as petgraph::visit::Walker<&'a G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Chain<G, A, B> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Chain<G, A, B> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Chain<G, A, B>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Chain<G, A, B> as petgraph::visit::Walker<&'a G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Filter<G, W, P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Filter<G, W, P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Filter<G, W, P>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Filter<G, W, P> as petgraph::visit::Walker<G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Peekable<G, W> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Peekable<G, W> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Peekable<G, W>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"peek\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Peekable<G, W>>::peek"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Peekable<G, W> as petgraph::visit::Walker<G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::SkipWhile<G, W, P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::SkipWhile<G, W, P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::SkipWhile<G, W, P>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::SkipWhile<G, W, P> as petgraph::visit::Walker<G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::TakeWhile<G, W, P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::TakeWhile<G, W, P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::TakeWhile<G, W, P>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::TakeWhile<G, W, P> as petgraph::visit::Walker<G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Skip<G, W> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Skip<G, W> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Skip<G, W>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Skip<G, W> as petgraph::visit::Walker<G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Take<G, W> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Take<G, W> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Take<G, W>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Take<G, W> as petgraph::visit::Walker<G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Cycle<G, W> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Cycle<G, W> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Cycle<G, W>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Cycle<G, W> as petgraph::visit::Walker<G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Inspect<W, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Inspect<W, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Inspect<W, F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"walker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<walker::Inspect<W, F> as petgraph::visit::Walker<G>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<WouldCycle<E> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_edges\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::from_edges"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"extend_with_edges\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::extend_with_edges"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_elements\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::from_elements"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::map"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"filter_map\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::filter_map"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"node_count\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::node_count"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"edge_count\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::edge_count"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"graph\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::graph"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_graph\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::into_graph"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_node\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::add_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_edge\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::add_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_edges\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::add_edges"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"update_edge\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::update_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_edge\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::find_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"edge_endpoints\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::edge_endpoints"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clear_edges\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::clear_edges"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_parent\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::add_parent"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_child\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::add_child"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"node_weight\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::node_weight"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"node_weight_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::node_weight_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"raw_nodes\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::raw_nodes"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"node_weights_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::node_weights_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"edge_weight\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::edge_weight"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"edge_weight_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::edge_weight_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"raw_edges\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::raw_edges"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"edge_weights_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::edge_weights_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"index_twice_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix>>::index_twice_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remove_node\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::remove_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remove_edge\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::remove_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"parents\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::parents"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"recursive_walk\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix>>::recursive_walk"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"must_check_for_cycle\"), disambiguator: 0 }]","fn_type":"Safe","name":"daggy::must_check_for_cycle"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as std::convert::Into<petgraph::Graph<N, E, petgraph::Directed, Ix>>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"node_count\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::visit::NodeCount>::node_count"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"is_directed\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::visit::GraphProp>::is_directed"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"visit_map\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::visit::Visitable>::visit_map"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"reset_map\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::visit::Visitable>::reset_map"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"node_weight\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::data::DataMap>::node_weight"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"edge_weight\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::data::DataMap>::edge_weight"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"node_weight_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::data::DataMapMut>::node_weight_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"edge_weight_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::data::DataMapMut>::edge_weight_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"neighbors\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a Dag<N, E, Ix> as petgraph::visit::IntoNeighbors>::neighbors"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"neighbors_directed\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a Dag<N, E, Ix> as petgraph::visit::IntoNeighborsDirected>::neighbors_directed"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"edge_references\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a Dag<N, E, Ix> as petgraph::visit::IntoEdgeReferences>::edge_references"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"edges\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a Dag<N, E, Ix> as petgraph::visit::IntoEdges>::edges"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"edges_directed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a Dag<N, E, Ix> as petgraph::visit::IntoEdgesDirected>::edges_directed"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"node_identifiers\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a Dag<N, E, Ix> as petgraph::visit::IntoNodeIdentifiers>::node_identifiers"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"node_references\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a Dag<N, E, Ix> as petgraph::visit::IntoNodeReferences>::node_references"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"node_bound\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::visit::NodeIndexable>::node_bound"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"to_index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::visit::NodeIndexable>::to_index"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"from_index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::visit::NodeIndexable>::from_index"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as std::ops::Index<petgraph::prelude::NodeIndex<Ix>>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"index_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as std::ops::IndexMut<petgraph::prelude::NodeIndex<Ix>>>::index_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as std::ops::Index<petgraph::prelude::EdgeIndex<Ix>>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"index_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as std::ops::IndexMut<petgraph::prelude::EdgeIndex<Ix>>>::index_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"adjacency_matrix\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Dag<N, E, Ix> as petgraph::visit::GetAdjacencyMatrix>::adjacency_matrix"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"is_adjacent\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Dag<N, E, Ix> as petgraph::visit::GetAdjacencyMatrix>::is_adjacent"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Children<N, E, Ix> as petgraph::visit::Walker<&'a Dag<N, E, Ix>>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"walk_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Parents<N, E, Ix> as petgraph::visit::Walker<&'a Dag<N, E, Ix>>>::walk_next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<EdgeIndices<Ix> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<WouldCycle<E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<WouldCycle<E> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"description\"), disambiguator: 0 }]","fn_type":"Safe","name":"<WouldCycle<E> as std::error::Error>::description"}
