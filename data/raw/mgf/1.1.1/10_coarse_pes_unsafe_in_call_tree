{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bvh::BVHNode<B, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bvh::BVHNodeType<V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert_node\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V>>::insert_node"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bvh::BVH<B, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bvh::BVH<B, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_leaf\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V>>::get_leaf"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"query\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bvh::BVH<B, V>>::query"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"query_mut\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bvh::BVH<B, V>>::query_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"raytrace\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bvh::BVH<B, V>>::raytrace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"balance\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bvh::BVH<B, V>>::balance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V> as std::ops::Index<usize>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bvh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bvh::BVH<B, V> as bounds::BoundedBy<B>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":false,"name":"<B as bounds::BoundedBy<B>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<T> as bounds::BoundedBy<B>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":true,"name":"bounds::<impl std::ops::Mul<f32> for geom::AABB>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":true,"name":"bounds::<impl std::ops::Div<f32> for geom::AABB>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"bounds::<impl std::ops::Add<f32> for geom::AABB>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"bounds::<impl std::ops::Sub<f32> for geom::AABB>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"combine\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as bounds::Bound>::combine"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"surface_area\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::AABB as bounds::Bound>::surface_area"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Triangle as bounds::BoundedBy<geom::AABB>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Rectangle as bounds::BoundedBy<geom::AABB>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Sphere as bounds::BoundedBy<geom::AABB>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as bounds::BoundedBy<geom::AABB>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":false,"name":"bounds::<impl std::ops::Mul<f32> for geom::Sphere>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":false,"name":"bounds::<impl std::ops::Div<f32> for geom::Sphere>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":false,"name":"bounds::<impl std::ops::Add<f32> for geom::Sphere>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":false,"name":"bounds::<impl std::ops::Sub<f32> for geom::Sphere>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"combine\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as bounds::Bound>::combine"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"surface_area\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Sphere as bounds::Bound>::surface_area"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Triangle as bounds::BoundedBy<geom::Sphere>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Rectangle as bounds::BoundedBy<geom::Sphere>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as bounds::BoundedBy<geom::Sphere>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bounds\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as bounds::BoundedBy<geom::Sphere>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u8 as bitset::FixedSizeBitSet>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u8 as bitset::FixedSizeBitSet>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u8 as bitset::FixedSizeBitSet>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u16 as bitset::FixedSizeBitSet>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u16 as bitset::FixedSizeBitSet>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u16 as bitset::FixedSizeBitSet>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u32 as bitset::FixedSizeBitSet>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u32 as bitset::FixedSizeBitSet>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u32 as bitset::FixedSizeBitSet>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u64 as bitset::FixedSizeBitSet>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u64 as bitset::FixedSizeBitSet>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bitset\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u64 as bitset::FixedSizeBitSet>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<compound::Component as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<compound::Component as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"deconstruct\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::Component::deconstruct"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"rotate\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as geom::Volumetric>::rotate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<compound::Component as std::convert::From<geom::Sphere>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<compound::Component as std::convert::From<geom::Capsule>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as bounds::BoundedBy<geom::AABB>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as bounds::BoundedBy<geom::Sphere>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::<impl collision::Intersects<compound::Component> for P>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::<impl collision::Contacts<geom::Moving<compound::Component>> for geom::Plane>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::<impl collision::Contacts<geom::Moving<compound::Component>> for geom::Triangle>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::<impl collision::Contacts<geom::Moving<compound::Component>> for geom::Rectangle>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::<impl collision::Contacts<geom::Moving<compound::Component>> for geom::Sphere>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::<impl collision::Contacts<geom::Moving<compound::Component>> for geom::Capsule>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::<impl collision::Contacts<RHS> for geom::Moving<compound::Component>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"local_contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::<impl collision::LocalContacts<geom::Moving<compound::Component>> for geom::Moving<compound::Component>>::local_contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<compound::ComponentConstructor as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<compound::ComponentConstructor as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"construct\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::ComponentConstructor::construct"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Compound as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::Compound::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Compound as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Compound as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Compound as bounds::BoundedBy<geom::AABB>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"bounds\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Compound as bounds::BoundedBy<geom::Sphere>>::bounds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":false,"name":"<compound::Compound as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Compound as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","has_unsafe":true,"name":"compound::<impl collision::Intersects<compound::Compound> for P>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"compound\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Compound as collision::Contacts<RHS>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"overlaps\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::AABB as collision::Overlaps<geom::AABB>>::overlaps"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"overlaps\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as collision::Overlaps<geom::Sphere>>::overlaps"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"overlaps\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as collision::Overlaps<geom::AABB>>::overlaps"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"overlaps\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as collision::Overlaps<geom::Sphere>>::overlaps"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as collision::Contains<cgmath::Point3<f32>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Triangle as collision::Contains<cgmath::Point3<f32>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Rectangle as collision::Contains<cgmath::Point3<f32>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::AABB as collision::Contains<cgmath::Point3<f32>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as collision::Contains<cgmath::Point3<f32>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as collision::Contains<geom::AABB>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as collision::Contains<geom::Sphere>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<collision::Intersection as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<collision::Intersection as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","has_unsafe":true,"name":"<P as collision::Intersects<geom::Plane>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Part as collision::Intersects<Poly>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","has_unsafe":true,"name":"<P as collision::Intersects<geom::AABB>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","has_unsafe":true,"name":"<P as collision::Intersects<geom::Sphere>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","has_unsafe":true,"name":"<P as collision::Intersects<geom::Capsule>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","has_unsafe":true,"name":"<P as collision::Intersects<geom::Moving<geom::Sphere>>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<collision::Penetration as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<collision::Penetration as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<collision::Penetration as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<collision::Penetration as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","has_unsafe":true,"name":"<collision::Penetration as std::ops::Neg>::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"separation\"), disambiguator: 0 }]","has_unsafe":true,"name":"<ShapeA as collision::Penetrates<ShapeB>>::separation"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<collision::Contact as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 41 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<collision::Contact as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","has_unsafe":true,"name":"<collision::Contact as std::ops::Neg>::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Contacts\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"last_contact\"), disambiguator: 0 }]","has_unsafe":true,"name":"collision::Contacts::last_contact"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as collision::Contacts<geom::Moving<geom::Sphere>>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as collision::Contacts<geom::Moving<geom::Capsule>>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<geom::Sphere> as collision::Contacts<geom::Plane>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 45 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<geom::Capsule> as collision::Contacts<geom::Plane>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Poly as collision::Contacts<geom::Moving<geom::Sphere>>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 46 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<geom::Sphere> as collision::Contacts<geom::Triangle>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 47 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<geom::Sphere> as collision::Contacts<geom::Rectangle>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<geom::Capsule> as collision::Contacts<geom::Triangle>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 49 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<geom::Capsule> as collision::Contacts<geom::Rectangle>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"signed_2d_tri_area\"), disambiguator: 0 }]","has_unsafe":false,"name":"collision::signed_2d_tri_area"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"seg_2d_intersect\"), disambiguator: 0 }]","has_unsafe":true,"name":"collision::seg_2d_intersect"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Poly as collision::Contacts<geom::Moving<geom::Capsule>>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as collision::Contacts<geom::Moving<geom::Sphere>>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as collision::Contacts<geom::Moving<geom::Capsule>>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as collision::Contacts<geom::Moving<geom::Sphere>>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as collision::Contacts<geom::Moving<geom::Capsule>>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clamp\"), disambiguator: 0 }]","has_unsafe":false,"name":"collision::clamp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<Recv> as collision::Contacts<Arg>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<Recv> as collision::Contacts<geom::Moving<Arg>>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 52 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<collision::LocalContact as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 51 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<collision::LocalContact as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","has_unsafe":true,"name":"<collision::LocalContact as std::ops::Neg>::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"LocalContacts\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"last_local_contact\"), disambiguator: 0 }]","has_unsafe":true,"name":"collision::LocalContacts::last_local_contact"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"local_contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Recv as collision::LocalContacts<Arg>>::local_contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"local_contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Recv as collision::LocalContacts<geom::Moving<Arg>>>::local_contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"local_contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<Recv> as collision::LocalContacts<Arg>>::local_contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"collision\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"local_contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<Recv> as collision::LocalContacts<geom::Moving<Arg>>>::local_contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<solver::Solver<C>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_constraint\"), disambiguator: 0 }]","has_unsafe":true,"name":"<solver::Solver<C>>::add_constraint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"solve\"), disambiguator: 0 }]","has_unsafe":true,"name":"<solver::Solver<C>>::solve"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<solver::ContactConstraint<Index, Params>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"solve\"), disambiguator: 0 }]","has_unsafe":true,"name":"<solver::ContactConstraint<Index, Params> as solver::Constraint>::solve"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clamp\"), disambiguator: 0 }]","has_unsafe":false,"name":"solver::clamp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 53 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Plane as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 52 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Plane as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as std::convert::From<(cgmath::Point3<f32>, cgmath::Point3<f32>, cgmath::Point3<f32>)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 56 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Ray as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 55 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Ray as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 59 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Segment as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 58 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Segment as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Segment as std::convert::From<(cgmath::Point3<f32>, cgmath::Point3<f32>)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Ray as std::convert::From<geom::Segment>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 62 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Triangle as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 61 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Triangle as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"normal\"), disambiguator: 0 }]","has_unsafe":true,"name":"geom::Triangle::normal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Triangle as std::convert::From<(cgmath::Point3<f32>, cgmath::Point3<f32>, cgmath::Point3<f32>)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as std::convert::From<geom::Triangle>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Tetrahedron as std::convert::From<(cgmath::Point3<f32>, cgmath::Point3<f32>, cgmath::Point3<f32>, cgmath::Point3<f32>)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 64 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Rectangle as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Rectangle as std::convert::Into<geom::Plane>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 67 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::AABB as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 66 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::AABB as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 70 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::OBB as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 69 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::OBB as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 73 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Sphere as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 72 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Sphere as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 76 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Capsule as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 75 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Capsule as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Segment as std::convert::From<geom::Capsule>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Capsule as std::convert::From<geom::Moving<geom::Sphere>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 79 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Moving<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 78 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Moving<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"sweep\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Moving<T>>::sweep"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"vel\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Moving<T>>::vel"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Moving<T> as std::convert::AsRef<T>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"as_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Moving<T> as std::convert::AsMut<T>>::as_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"delta\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Moving<T> as geom::Delta>::delta"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clamp\"), disambiguator: 0 }]","has_unsafe":false,"name":"geom::clamp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"closest_pts_seg\"), disambiguator: 0 }]","has_unsafe":true,"name":"geom::closest_pts_seg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Shape\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"set_pos\"), disambiguator: 0 }]","has_unsafe":true,"name":"geom::Shape::set_pos"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Plane as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 81 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Ray as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 82 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Ray as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 83 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Ray as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 84 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Ray as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Ray as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Ray as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Segment as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Segment as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Segment as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Segment as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Segment as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Segment as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Triangle as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Triangle as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Triangle as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Triangle as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Triangle as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Triangle as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 85 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Rectangle as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 86 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Rectangle as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 87 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Rectangle as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 88 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Rectangle as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Rectangle as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Rectangle as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 89 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 90 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 91 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 92 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::AABB as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::AABB as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 93 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::OBB as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 94 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::OBB as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 95 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::OBB as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 96 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::OBB as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::OBB as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::OBB as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 97 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 98 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 99 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 100 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Sphere as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as std::ops::Add<cgmath::Vector3<f32>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as std::ops::Sub<cgmath::Vector3<f32>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"pos\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Ray as geom::Particle>::pos"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"dir\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Ray as geom::Particle>::dir"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 41 }, DisambiguatedDefPathData { data: ValueNs(\"pos\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Segment as geom::Particle>::pos"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 41 }, DisambiguatedDefPathData { data: ValueNs(\"dir\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Segment as geom::Particle>::dir"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"vertex\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Triangle as geom::Polygon>::vertex"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"edge\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Triangle as geom::Polygon>::edge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"vertex\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Rectangle as geom::Polygon>::vertex"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"edge\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Rectangle as geom::Polygon>::edge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Volumetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rotate_about\"), disambiguator: 0 }]","has_unsafe":true,"name":"geom::Volumetric::rotate_about"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"rotate\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as geom::Volumetric>::rotate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 45 }, DisambiguatedDefPathData { data: ValueNs(\"rotate\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::OBB as geom::Volumetric>::rotate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 46 }, DisambiguatedDefPathData { data: ValueNs(\"rotate\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Sphere as geom::Volumetric>::rotate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 47 }, DisambiguatedDefPathData { data: ValueNs(\"rotate\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as geom::Volumetric>::rotate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"support\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::AABB as geom::Convex>::support"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 49 }, DisambiguatedDefPathData { data: ValueNs(\"support\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::OBB as geom::Convex>::support"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"support\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Sphere as geom::Convex>::support"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 51 }, DisambiguatedDefPathData { data: ValueNs(\"support\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::MinkowskiDiff<'a, 'b, S1, S2> as geom::Convex>::support"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"geom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"compute_basis\"), disambiguator: 0 }]","has_unsafe":true,"name":"geom::compute_basis"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<manifold::ContactPruner<Params>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","has_unsafe":true,"name":"<manifold::ContactPruner<Params>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","has_unsafe":true,"name":"<manifold::ContactPruner<Params>>::push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","has_unsafe":true,"name":"<manifold::ContactPruner<Params>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<manifold::Manifold as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<manifold::Manifold as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<manifold::Manifold as std::convert::From<collision::LocalContact>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<manifold::Manifold as std::convert::From<manifold::ContactPruner<P>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"manifold::Manifold::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"manifold\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"manifold::Manifold::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::Mesh as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"mesh::Mesh::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","has_unsafe":true,"name":"mesh::Mesh::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push_vert\"), disambiguator: 0 }]","has_unsafe":false,"name":"mesh::Mesh::push_vert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push_face\"), disambiguator: 0 }]","has_unsafe":true,"name":"mesh::Mesh::push_face"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::Mesh as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::Mesh as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mesh::Mesh as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mesh::Mesh as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"rotate\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::Mesh as geom::Volumetric>::rotate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"contacts\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::Mesh as collision::Contacts<RHS>>::contacts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::ConvexMesh as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"mesh::ConvexMesh::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","has_unsafe":true,"name":"mesh::ConvexMesh::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","has_unsafe":true,"name":"mesh::ConvexMesh::push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::ConvexMesh as std::convert::From<std::vec::Vec<cgmath::Point3<f32>>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::ConvexMesh as std::ops::AddAssign<cgmath::Vector3<f32>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::ConvexMesh as std::ops::SubAssign<cgmath::Vector3<f32>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::ConvexMesh as geom::Shape>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mesh::ConvexMesh as geom::Shape>::closest_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"rotate\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::ConvexMesh as geom::Volumetric>::rotate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mesh\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"support\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mesh::ConvexMesh as geom::Convex>::support"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tensor\"), disambiguator: 0 }]","has_unsafe":false,"name":"<geom::Sphere as physics::Inertia>::tensor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"tensor\"), disambiguator: 0 }]","has_unsafe":true,"name":"<geom::Capsule as physics::Inertia>::tensor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"tensor\"), disambiguator: 0 }]","has_unsafe":true,"name":"<compound::Component as physics::Inertia>::tensor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<physics::Velocity as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<physics::RigidBodyVec as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<physics::RigidBodyRef as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<physics::RigidBodyRef as std::convert::From<usize>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","has_unsafe":false,"name":"<physics::RigidBodyRef as std::convert::Into<usize>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"physics::RigidBodyVec::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"add_body\"), disambiguator: 0 }]","has_unsafe":true,"name":"physics::RigidBodyVec::add_body"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"integrate\"), disambiguator: 0 }]","has_unsafe":true,"name":"physics::RigidBodyVec::integrate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"colliders\"), disambiguator: 0 }]","has_unsafe":false,"name":"physics::RigidBodyVec::colliders"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"complete_motion\"), disambiguator: 0 }]","has_unsafe":true,"name":"physics::RigidBodyVec::complete_motion"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<physics::RigidBodyVec as solver::ConstrainedSet<physics::RigidBodyRef, physics::Velocity, physics::RigidBodyInfo>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"physics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"set\"), disambiguator: 0 }]","has_unsafe":false,"name":"<physics::RigidBodyVec as solver::ConstrainedSet<physics::RigidBodyRef, physics::Velocity, physics::RigidBodyInfo>>::set"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next_free\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::next_free"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T> as std::ops::Index<usize>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"index_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T> as std::ops::IndexMut<usize>>::index_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<pool::PoolEntry<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pool::Pool<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"filter_pool\"), disambiguator: 0 }]","has_unsafe":false,"name":"pool::filter_pool"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'a pool::Pool<T> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"filter_pool_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"pool::filter_pool_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pool\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'a mut pool::Pool<T> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::Simplex as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<<simplex::Simplex as std::fmt::Debug>::fmt::StateName as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::Simplex as std::convert::From<[cgmath::Point3<f32>; _]>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::Simplex as std::convert::From<cgmath::Point3<f32>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::Simplex as std::convert::From<[cgmath::Point3<f32>; _]>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::Simplex as std::convert::From<(cgmath::Point3<f32>, cgmath::Point3<f32>)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::Simplex as std::convert::From<[cgmath::Point3<f32>; _]>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::Simplex as std::convert::From<(cgmath::Point3<f32>, cgmath::Point3<f32>, cgmath::Point3<f32>)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::Simplex as std::convert::From<[cgmath::Point3<f32>; _]>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::Simplex as std::convert::From<(cgmath::Point3<f32>, cgmath::Point3<f32>, cgmath::Point3<f32>, cgmath::Point3<f32>)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point_to_origin\"), disambiguator: 0 }]","has_unsafe":true,"name":"simplex::Simplex::closest_point_to_origin"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"min_norm\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::VertexSimplex as simplex::SimplexState>::min_norm"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"add_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::VertexSimplex as simplex::SimplexState>::add_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"min_norm\"), disambiguator: 0 }]","has_unsafe":true,"name":"<simplex::EdgeSimplex as simplex::SimplexState>::min_norm"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"add_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::EdgeSimplex as simplex::SimplexState>::add_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"min_norm\"), disambiguator: 0 }]","has_unsafe":true,"name":"<simplex::FaceSimplex as simplex::SimplexState>::min_norm"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"add_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::FaceSimplex as simplex::SimplexState>::add_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"origin_outside_plane\"), disambiguator: 0 }]","has_unsafe":true,"name":"simplex::origin_outside_plane"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"min_norm\"), disambiguator: 0 }]","has_unsafe":true,"name":"<simplex::VolumeSimplex as simplex::SimplexState>::min_norm"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"simplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"add_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"<simplex::VolumeSimplex as simplex::SimplexState>::add_point"}
