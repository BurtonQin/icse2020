{"def_path":"[DisambiguatedDefPathData { data: Module(\"mockstream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mockstream::MockStream as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mockstream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"mockstream::MockStream::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mockstream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mockstream::MockStream as std::convert::From<std::vec::Vec<u8>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mockstream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"read\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mockstream::MockStream as std::io::Read>::read"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mockstream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"write\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mockstream::MockStream as std::io::Write>::write"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mockstream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"flush\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mockstream::MockStream as std::io::Write>::flush"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mockstream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"shutdown\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mockstream::MockStream as tokio_io::AsyncWrite>::shutdown"}
