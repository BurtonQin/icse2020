{"def_path":"[DisambiguatedDefPathData { data: Module(\"strict\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<strict::Strict<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strict\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strict::Strict<T> as std::convert::From<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strict\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strict::Strict<T> as std::convert::AsRef<T>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strict\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"as_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strict::Strict<T> as std::convert::AsMut<T>>::as_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strict\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strict::Strict<T> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strict\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strict::Strict<T> as std::ops::DerefMut>::deref_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strict\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"defer\"), disambiguator: 0 }]","has_unsafe":true,"name":"<strict::Strict<T> as LazyRef>::defer"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strict\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"force\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strict::Strict<T> as LazyRef>::force"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strict\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"unwrap\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strict::Strict<T> as Lazy>::unwrap"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"borrow\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as std::borrow::Borrow<T>>::borrow"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"borrow_mut\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as std::borrow::BorrowMut<T>>::borrow_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as std::convert::AsRef<T>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"as_mut\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as std::convert::AsMut<T>>::as_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as std::ops::DerefMut>::deref_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sync::AtomicThunk<T> as std::convert::From<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"take_data\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T>>::take_data"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"defer\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as LazyRef>::defer"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"force\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as LazyRef>::force"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"unwrap\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::AtomicThunk<T> as Lazy>::unwrap"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"try_unwrap\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::ArcThunk<T>>::try_unwrap"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sync::ArcThunk<T>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"make_mut\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::ArcThunk<T>>::make_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sync::ArcThunk<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::ArcThunk<T> as std::convert::AsRef<T>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::ArcThunk<T> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::ArcThunk<T> as std::convert::From<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"defer\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::ArcThunk<T> as LazyRef>::defer"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"force\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sync::ArcThunk<T> as LazyRef>::force"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::Flag as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::Flag as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Flag as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::Flag as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"borrow\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as std::borrow::Borrow<T>>::borrow"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"borrow_mut\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as std::borrow::BorrowMut<T>>::borrow_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as std::convert::AsRef<T>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"as_mut\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as std::convert::AsMut<T>>::as_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as std::ops::DerefMut>::deref_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::Thunk<T> as std::convert::From<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"take_data\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T>>::take_data"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"defer\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as LazyRef>::defer"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"force\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as LazyRef>::force"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"unwrap\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::Thunk<T> as Lazy>::unwrap"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"try_unwrap\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::RcThunk<T>>::try_unwrap"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::RcThunk<T>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"make_mut\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::RcThunk<T>>::make_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::RcThunk<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::RcThunk<T> as std::convert::AsRef<T>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::RcThunk<T> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::RcThunk<T> as std::convert::From<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"defer\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::RcThunk<T> as LazyRef>::defer"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"force\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::RcThunk<T> as LazyRef>::force"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"LazyRef\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"computed\"), disambiguator: 0 }]","has_unsafe":true,"name":"LazyRef::computed"}
