{"def_path":"[DisambiguatedDefPathData { data: Module(\"action\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"run\"), disambiguator: 0 }]","has_unsafe":false,"name":"<F as action::Action>::run"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"condition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"should_retry\"), disambiguator: 0 }]","has_unsafe":false,"name":"<F as condition::Condition<E>>::should_retry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<future::Error<E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<future::Error<E> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<future::Error<E> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"description\"), disambiguator: 0 }]","has_unsafe":false,"name":"<future::Error<E> as std::error::Error>::description"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"cause\"), disambiguator: 0 }]","has_unsafe":false,"name":"<future::Error<E> as std::error::Error>::cause"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryState<A>>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"spawn\"), disambiguator: 0 }]","has_unsafe":false,"name":"<future::Retry<I, A>>::spawn"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::Retry<I, A> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"spawn\"), disambiguator: 0 }]","has_unsafe":false,"name":"<future::RetryIf<I, A, C>>::spawn"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"attempt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryIf<I, A, C>>::attempt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"retry\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryIf<I, A, C>>::retry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryIf<I, A, C> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"middleware\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"run\"), disambiguator: 0 }]","has_unsafe":false,"name":"<middleware::ServiceRequest<S> as action::Action>::run"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"middleware\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_strategy\"), disambiguator: 0 }]","has_unsafe":false,"name":"<F as middleware::StrategyFactory>::get_strategy"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"middleware\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<middleware::Middleware<T, S>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"middleware\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"call\"), disambiguator: 0 }]","has_unsafe":false,"name":"<middleware::Middleware<T, S> as tokio_service::Service>::call"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fixed_interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fixed_interval::FixedInterval as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fixed_interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fixed_interval::FixedInterval as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fixed_interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::fixed_interval::FixedInterval::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fixed_interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_millis\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::fixed_interval::FixedInterval::from_millis"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fixed_interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fixed_interval::FixedInterval as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::exponential_backoff::ExponentialBackoff as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::exponential_backoff::ExponentialBackoff as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_millis\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::exponential_backoff::ExponentialBackoff::from_millis"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"factor\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::exponential_backoff::ExponentialBackoff::factor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"max_delay\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::exponential_backoff::ExponentialBackoff::max_delay"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::exponential_backoff::ExponentialBackoff as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fibonacci_backoff::FibonacciBackoff as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fibonacci_backoff::FibonacciBackoff as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_millis\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::fibonacci_backoff::FibonacciBackoff::from_millis"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"factor\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::fibonacci_backoff::FibonacciBackoff::factor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"max_delay\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::fibonacci_backoff::FibonacciBackoff::max_delay"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fibonacci_backoff::FibonacciBackoff as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"jitter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"apply_jitter\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::jitter::apply_jitter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"jitter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"jitter\"), disambiguator: 0 }]","has_unsafe":true,"name":"strategy::jitter::jitter"}
