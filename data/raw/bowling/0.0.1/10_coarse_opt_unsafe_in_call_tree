{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::frame::Frame as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::frame::Frame as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::frame::Frame as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::frame::Frame as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::frame::Frame as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::frame::Frame as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::frame::Frame::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_throws\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::frame::Frame::with_throws"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"calculate_score\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::frame::Frame::calculate_score"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"frame\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_throw\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::frame::Frame::add_throw"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::gamestate::CatchupHandling as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::gamestate::CatchupHandling as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::gamestate::GameState as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::gamestate::GameState as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::gamestate::GameState::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"reset\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::gamestate::GameState::reset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"render_scores\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::gamestate::GameState::render_scores"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"to_json\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::gamestate::GameState::to_json"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add_player\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::gamestate::GameState::add_player"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add_throw\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::gamestate::GameState::add_throw"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"turn\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::gamestate::GameState::turn"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"set_catchup_handling\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::gamestate::GameState::set_catchup_handling"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"player_count\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::gamestate::GameState::player_count"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::player::FrameError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_Fail_FOR_FrameError\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cause\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::_DERIVE_failure_Fail_FOR_FrameError::<impl failure::Fail for gamestate::player::FrameError>::cause"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_Fail_FOR_FrameError\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"backtrace\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::_DERIVE_failure_Fail_FOR_FrameError::<impl failure::Fail for gamestate::player::FrameError>::backtrace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_core_fmt_Display_FOR_FrameError\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::_DERIVE_failure_core_fmt_Display_FOR_FrameError::<impl std::fmt::Display for gamestate::player::FrameError>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::player::ThrowError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_Fail_FOR_ThrowError\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cause\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::_DERIVE_failure_Fail_FOR_ThrowError::<impl failure::Fail for gamestate::player::ThrowError>::cause"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_Fail_FOR_ThrowError\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"backtrace\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::_DERIVE_failure_Fail_FOR_ThrowError::<impl failure::Fail for gamestate::player::ThrowError>::backtrace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_core_fmt_Display_FOR_ThrowError\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::_DERIVE_failure_core_fmt_Display_FOR_ThrowError::<impl std::fmt::Display for gamestate::player::ThrowError>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::player::Player as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::player::Player as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::player::Player as std::convert::From<&'a str>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::Player::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add_frame\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::Player::add_frame"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add_throw\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::Player::add_throw"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"player\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"name\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::player::Player::name"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::throw::ThrowParseError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_Fail_FOR_ThrowParseError\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cause\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::throw::_DERIVE_failure_Fail_FOR_ThrowParseError::<impl failure::Fail for gamestate::throw::ThrowParseError>::cause"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_Fail_FOR_ThrowParseError\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"backtrace\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::throw::_DERIVE_failure_Fail_FOR_ThrowParseError::<impl failure::Fail for gamestate::throw::ThrowParseError>::backtrace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_core_fmt_Display_FOR_ThrowParseError\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::throw::_DERIVE_failure_core_fmt_Display_FOR_ThrowParseError::<impl std::fmt::Display for gamestate::throw::ThrowParseError>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::throw::ThrowType as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::throw::ThrowType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::throw::ThrowType as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<gamestate::throw::ThrowType as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::throw::Throw as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::throw::Throw as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::throw::Throw as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<gamestate::throw::Throw as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<gamestate::throw::Throw as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_str\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::throw::Throw::try_from_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"set_throw_type\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::throw::Throw::set_throw_type"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"throw_type\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::throw::Throw::throw_type"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"gamestate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"throw\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pin_count\"), disambiguator: 0 }]","has_unsafe":false,"name":"gamestate::throw::Throw::pin_count"}
