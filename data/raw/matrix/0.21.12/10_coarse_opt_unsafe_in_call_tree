{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Error as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Error as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Error as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Error as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Error as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Error as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"description\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Error as std::error::Error>::description"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u8 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u8 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u16 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u16 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u32 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u32 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u64 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u64 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i8 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i8 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i16 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i16 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i32 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i32 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i64 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i64 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<f32 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<f32 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<f64 as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<f64 as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<isize as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<isize as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<usize as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<usize as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<num_complex::Complex<f32> as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<num_complex::Complex<f32> as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"is_zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<num_complex::Complex<f64> as element::Element>::is_zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"element\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<num_complex::Complex<f64> as element::Element>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"coordinates\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::position::Position::coordinates"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"row\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(usize, usize) as position::Position>::row"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"column\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(usize, usize) as position::Position>::column"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"row\"), disambiguator: 0 }]","fn_type":"Safe","name":"<usize as position::Position>::row"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"column\"), disambiguator: 0 }]","fn_type":"Safe","name":"<usize as position::Position>::column"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Size\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dimensions\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::size::Size::dimensions"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rows\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(usize, usize) as size::Size>::rows"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"columns\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(usize, usize) as size::Size>::columns"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"rows\"), disambiguator: 0 }]","fn_type":"Safe","name":"<usize as size::Size>::rows"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"columns\"), disambiguator: 0 }]","fn_type":"Safe","name":"<usize as size::Size>::columns"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::banded::convert::<impl std::convert::From<&'l format::banded::Banded<T>> for format::conventional::Conventional<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::banded::convert::<impl std::convert::From<format::banded::Banded<T>> for format::conventional::Conventional<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::banded::convert::<impl std::convert::From<&'l format::diagonal::Diagonal<T>> for format::banded::Banded<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::banded::convert::<impl std::convert::From<format::diagonal::Diagonal<T>> for format::banded::Banded<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"transpose\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::banded::operation::<impl operation::Transpose for format::banded::Banded<T>>::transpose"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"validate\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T> as format::Validate>::validate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"rows\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T> as size::Size>::rows"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"columns\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T> as size::Size>::columns"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"diagonals\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T>>::diagonals"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"nonzeros\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T> as Matrix>::nonzeros"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Banded<T> as Matrix>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Iterator<'l, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"banded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::banded::Iterator<'l, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<format::compressed::Compressed<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::convert::<impl std::convert::From<&'l format::conventional::Conventional<T>> for format::compressed::Compressed<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::convert::<impl std::convert::From<format::conventional::Conventional<T>> for format::compressed::Compressed<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::convert::<impl std::convert::From<&'l format::compressed::Compressed<T>> for format::conventional::Conventional<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::convert::<impl std::convert::From<format::compressed::Compressed<T>> for format::conventional::Conventional<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::convert::<impl std::convert::From<&'l format::diagonal::Diagonal<T>> for format::compressed::Compressed<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::convert::<impl std::convert::From<format::diagonal::Diagonal<T>> for format::compressed::Compressed<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"multiply\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"matrix::format::compressed::operation::<impl operation::Multiply<format::diagonal::Diagonal<T>, format::compressed::Compressed<T>> for format::compressed::Compressed<T>>::multiply"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"multiply_into\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::operation::<impl operation::MultiplyInto<[T], [T]> for format::compressed::Compressed<T>>::multiply_into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"multiply_into\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::operation::<impl operation::MultiplyInto<format::compressed::Compressed<T>, [T]> for format::conventional::Conventional<T>>::multiply_into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"multiply_self\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"matrix::format::compressed::operation::<impl operation::MultiplySelf<format::diagonal::Diagonal<T>> for format::compressed::Compressed<T>>::multiply_self"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"transpose\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"matrix::format::compressed::operation::<impl operation::Transpose for format::compressed::Compressed<T>>::transpose"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"multiply_matrix_left\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::operation::multiply_matrix_left"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"multiply_matrix_right\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::operation::multiply_matrix_right"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"validate\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T> as format::Validate>::validate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Variant as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Variant as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Variant as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<format::compressed::Variant as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"rows\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T> as size::Size>::rows"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"columns\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T> as size::Size>::columns"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"set\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T>>::set"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"resize\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T>>::resize"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"retain\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T>>::retain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"nonzeros\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T> as Matrix>::nonzeros"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::compressed::Compressed<T> as Matrix>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"flip\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::compressed::Variant::flip"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<format::compressed::Iterator<'l, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"compressed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<format::compressed::IteratorMut<'l, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::conventional::convert::<impl std::convert::Into<std::vec::Vec<T>> for format::conventional::Conventional<T>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"multiply_self\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::conventional::operation::<impl operation::MultiplySelf<format::diagonal::Diagonal<T>> for format::conventional::Conventional<T>>::multiply_self"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"transpose\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::conventional::operation::<impl operation::Transpose for format::conventional::Conventional<T>>::transpose"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"rows\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as size::Size>::rows"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"columns\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as size::Size>::columns"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_slice\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T>>::from_slice"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T>>::from_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"resize\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T>>::resize"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"nonzeros\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as Matrix>::nonzeros"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as Matrix>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as std::ops::Index<P>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"index_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as std::ops::IndexMut<P>>::index_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"conventional\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::conventional::Conventional<T> as std::ops::DerefMut>::deref_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::diagonal::convert::<impl std::convert::From<&'l format::diagonal::Diagonal<T>> for format::conventional::Conventional<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::diagonal::convert::<impl std::convert::From<format::diagonal::Diagonal<T>> for format::conventional::Conventional<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::diagonal::convert::<impl std::convert::Into<std::vec::Vec<T>> for format::diagonal::Diagonal<T>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"transpose\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::diagonal::operation::<impl operation::Transpose for format::diagonal::Diagonal<T>>::transpose"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"validate\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as format::Validate>::validate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"rows\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as size::Size>::rows"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"columns\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as size::Size>::columns"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_slice\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T>>::from_slice"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T>>::from_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"nonzeros\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as Matrix>::nonzeros"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as Matrix>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"diagonal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::diagonal::Diagonal<T> as std::ops::DerefMut>::deref_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Packed<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Packed<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<format::packed::Packed<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Packed<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::packed::convert::<impl std::convert::From<&'l format::packed::Packed<T>> for format::conventional::Conventional<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::packed::convert::<impl std::convert::From<format::packed::Packed<T>> for format::conventional::Conventional<T>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"transpose\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"matrix::format::packed::operation::<impl operation::Transpose for format::packed::Packed<T>>::transpose"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Variant as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Variant as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Variant as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<format::packed::Variant as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"validate\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Packed<T> as format::Validate>::validate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"rows\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Packed<T> as size::Size>::rows"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"columns\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Packed<T> as size::Size>::columns"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Packed<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"nonzeros\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Packed<T> as Matrix>::nonzeros"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"zero\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::packed::Packed<T> as Matrix>::zero"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"packed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"flip\"), disambiguator: 0 }]","fn_type":"Safe","name":"matrix::format::packed::Variant::flip"}
