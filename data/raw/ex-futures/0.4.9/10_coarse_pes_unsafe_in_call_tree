{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unbounded\"), disambiguator: 0 }]","has_unsafe":false,"name":"unsync::pubsub::unbounded::unbounded"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"start_send\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::pubsub::unbounded::UnboundedSender<T> as futures::Sink>::start_send"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"poll_complete\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::pubsub::unbounded::UnboundedSender<T> as futures::Sink>::poll_complete"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"close\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::pubsub::unbounded::UnboundedSender<T> as futures::Sink>::close"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"do_send\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::pubsub::unbounded::UnboundedSender<T>>::do_send"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"unbounded_send\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::pubsub::unbounded::UnboundedSender<T>>::unbounded_send"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::pubsub::unbounded::UnboundedReceiver<T> as futures::Stream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","has_unsafe":true,"name":"<unsync::pubsub::unbounded::UnboundedSender<T> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::pubsub::unbounded::UnboundedReceiver<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_id\"), disambiguator: 0 }]","has_unsafe":false,"name":"unsync::pubsub::unbounded::find_id"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next_id\"), disambiguator: 0 }]","has_unsafe":false,"name":"unsync::pubsub::unbounded::next_id"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::pubsub::unbounded::UnboundedReceiver<T> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::pubsub::unbounded::SendError<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::pubsub::unbounded::SendError<T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"description\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::pubsub::unbounded::SendError<T> as std::error::Error>::description"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unsync\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"pubsub\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unbounded\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"into_inner\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unsync::pubsub::unbounded::SendError<T>>::into_inner"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unsync_cloneable\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::unsync_cloneable::unsync_cloneable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::unsync_cloneable::UnsyncCloneable<S> as futures::Stream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::unsync_cloneable::UnsyncCloneable<S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::unsync_cloneable::UnsyncCloneable<S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fork\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::fork::fork"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Side as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Side as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Side as std::convert::From<bool>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Queues<T, E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Queues<T, E> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Queues<T, E>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_queue_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Queues<T, E>>::get_queue_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"push_none\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Queues<T, E>>::push_none"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"push_err\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::fork::Queues<T, E>>::push_err"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Shared<S, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::fork::Fork<S, F> as futures::Stream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::fork::Fork<S, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unsync_fork\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::unsync_fork::unsync_fork"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::unsync_fork::Queues<T, E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::unsync_fork::Queues<T, E>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_queue_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::unsync_fork::Queues<T, E>>::get_queue_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push_none\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::unsync_fork::Queues<T, E>>::push_none"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push_err\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::unsync_fork::Queues<T, E>>::push_err"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::unsync_fork::Shared<S, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::unsync_fork::UnsyncFork<S, F> as futures::Stream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_fork\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::unsync_fork::UnsyncFork<S, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cloneable\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::cloneable::cloneable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::cloneable::Cloneable<S> as futures::Stream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::cloneable::Cloneable<S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::cloneable::Cloneable<S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"find_first_map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_first_map\"), disambiguator: 0 }]","has_unsafe":true,"name":"stream::find_first_map::find_first_map"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"find_first_map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::find_first_map::FindFirstMap<S, F> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"find_first\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_first\"), disambiguator: 0 }]","has_unsafe":true,"name":"stream::find_first::find_first"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"find_first\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::find_first::FindFirst<S, F> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"StreamExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cloneable\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::StreamExt::cloneable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"StreamExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unsync_cloneable\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::StreamExt::unsync_cloneable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"StreamExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fork\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::StreamExt::fork"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"StreamExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unsync_fork\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::StreamExt::unsync_fork"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"StreamExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"as_err\"), disambiguator: 0 }]","has_unsafe":true,"name":"stream::StreamExt::as_err"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"StreamExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_first\"), disambiguator: 0 }]","has_unsafe":true,"name":"stream::StreamExt::find_first"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"StreamExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_first_map\"), disambiguator: 0 }]","has_unsafe":true,"name":"stream::StreamExt::find_first_map"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unsync_cloneable\"), disambiguator: 0 }]","has_unsafe":false,"name":"sink::unsync_cloneable::unsync_cloneable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"start_send\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sink::unsync_cloneable::UnsyncCloneable<S> as futures::Sink>::start_send"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"poll_complete\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sink::unsync_cloneable::UnsyncCloneable<S> as futures::Sink>::poll_complete"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"close\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sink::unsync_cloneable::UnsyncCloneable<S> as futures::Sink>::close"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sink::unsync_cloneable::UnsyncCloneable<S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sink::unsync_cloneable::UnsyncCloneable<S> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unsync_cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sink::unsync_cloneable::UnsyncCloneable<S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cloneable\"), disambiguator: 0 }]","has_unsafe":false,"name":"sink::cloneable::cloneable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"start_send\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sink::cloneable::Cloneable<S> as futures::Sink>::start_send"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"poll_complete\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sink::cloneable::Cloneable<S> as futures::Sink>::poll_complete"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"close\"), disambiguator: 0 }]","has_unsafe":true,"name":"<sink::cloneable::Cloneable<S> as futures::Sink>::close"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sink::cloneable::Cloneable<S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sink::cloneable::Cloneable<S> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cloneable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sink::cloneable::Cloneable<S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"SinkExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cloneable\"), disambiguator: 0 }]","has_unsafe":false,"name":"sink::SinkExt::cloneable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sink\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"SinkExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unsync_cloneable\"), disambiguator: 0 }]","has_unsafe":false,"name":"sink::SinkExt::unsync_cloneable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<util::Should<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","has_unsafe":false,"name":"<util::Should<T>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"as_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<util::Should<T>>::as_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"take\"), disambiguator: 0 }]","has_unsafe":false,"name":"<util::Should<T>>::take"}
