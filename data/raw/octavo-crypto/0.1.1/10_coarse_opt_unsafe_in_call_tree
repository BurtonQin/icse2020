{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next_u32\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::blowfish::next_u32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::blowfish::Blowfish::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"init\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::blowfish::Blowfish::init"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"expand_key\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::blowfish::Blowfish::expand_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"salted_expand_key\"), disambiguator: 0 }]","has_unsafe":true,"name":"block::blowfish::Blowfish::salted_expand_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"round\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::blowfish::Blowfish::round"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"round\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"f\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::blowfish::Blowfish::round::f"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"encrypt_round\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::blowfish::Blowfish::encrypt_round"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"decrypt_round\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::blowfish::Blowfish::decrypt_round"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"encrypt_block\"), disambiguator: 0 }]","has_unsafe":true,"name":"<block::blowfish::Blowfish as block::BlockEncrypt>::encrypt_block"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"blowfish\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"decrypt_block\"), disambiguator: 0 }]","has_unsafe":true,"name":"<block::blowfish::Blowfish as block::BlockDecrypt>::decrypt_block"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"BlockEncrypt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"block_size\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::BlockEncrypt::block_size"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"BlockDecrypt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"block_size\"), disambiguator: 0 }]","has_unsafe":false,"name":"block::BlockDecrypt::block_size"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"chacha20\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<stream::chacha20::State as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"chacha20\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"expand\"), disambiguator: 0 }]","has_unsafe":true,"name":"stream::chacha20::State::expand"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"chacha20\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"update\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::chacha20::State::update"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"chacha20\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"init\"), disambiguator: 0 }]","has_unsafe":true,"name":"stream::chacha20::ChaCha20::init"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"chacha20\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"stream::chacha20::ChaCha20::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"chacha20\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"update\"), disambiguator: 0 }]","has_unsafe":false,"name":"stream::chacha20::ChaCha20::update"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"chacha20\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"crypt\"), disambiguator: 0 }]","has_unsafe":true,"name":"stream::chacha20::ChaCha20::crypt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"chacha20\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"encrypt_stream\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::chacha20::ChaCha20 as stream::StreamEncrypt>::encrypt_stream"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"chacha20\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"decrypt_stream\"), disambiguator: 0 }]","has_unsafe":true,"name":"<stream::chacha20::ChaCha20 as stream::StreamDecrypt>::decrypt_stream"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"rsa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_primes\"), disambiguator: 0 }]","has_unsafe":true,"name":"asymmetric::rsa::SecretKeyExtra::from_primes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"rsa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"keypair_from_primes\"), disambiguator: 0 }]","has_unsafe":true,"name":"asymmetric::rsa::Rsa::keypair_from_primes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"rsa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"generate_keypair\"), disambiguator: 0 }]","has_unsafe":true,"name":"asymmetric::rsa::Rsa::generate_keypair"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"rsa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_public\"), disambiguator: 0 }]","has_unsafe":false,"name":"asymmetric::rsa::Rsa::is_public"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"rsa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_private\"), disambiguator: 0 }]","has_unsafe":false,"name":"asymmetric::rsa::Rsa::is_private"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"rsa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"crypt\"), disambiguator: 0 }]","has_unsafe":true,"name":"asymmetric::rsa::Rsa::crypt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"rsa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"crypt\"), disambiguator: 0 }]","has_unsafe":true,"name":"asymmetric::rsa::crypt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"rsa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"chinese_remainders_power\"), disambiguator: 0 }]","has_unsafe":true,"name":"asymmetric::rsa::chinese_remainders_power"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"modular\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"inverse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"inverse\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a num::BigUint as asymmetric::utils::modular::inverse::Inverse>::inverse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"modular\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"inverse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"inverse\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a num::BigInt as asymmetric::utils::modular::inverse::Inverse>::inverse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"modular\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"power\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pow_mod\"), disambiguator: 0 }]","has_unsafe":true,"name":"<num::BigUint as asymmetric::utils::modular::power::Power<num::BigUint>>::pow_mod"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"modular\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"power\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"pow_mod\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a num::BigUint as asymmetric::utils::modular::power::Power<&'a num::BigUint>>::pow_mod"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<asymmetric::utils::primes::tests::Type as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<asymmetric::utils::primes::tests::Type as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<asymmetric::utils::primes::tests::Type as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<asymmetric::utils::primes::tests::Type as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_composite\"), disambiguator: 0 }]","has_unsafe":false,"name":"asymmetric::utils::primes::tests::Type::is_composite"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PrimeTest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"test_loop\"), disambiguator: 0 }]","has_unsafe":false,"name":"asymmetric::utils::primes::tests::PrimeTest::test_loop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"test\"), disambiguator: 0 }]","has_unsafe":true,"name":"<asymmetric::utils::primes::tests::Fermat<'a, T> as asymmetric::utils::primes::tests::PrimeTest>::test"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"greatest_2_divisor\"), disambiguator: 0 }]","has_unsafe":false,"name":"<asymmetric::utils::primes::tests::MillerRabin<'a, T>>::greatest_2_divisor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"witness\"), disambiguator: 0 }]","has_unsafe":true,"name":"<asymmetric::utils::primes::tests::MillerRabin<'a, T>>::witness"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"test\"), disambiguator: 0 }]","has_unsafe":true,"name":"<asymmetric::utils::primes::tests::MillerRabin<'a, T> as asymmetric::utils::primes::tests::PrimeTest>::test"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"asymmetric\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"primes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"generate_prime\"), disambiguator: 0 }]","has_unsafe":false,"name":"asymmetric::utils::primes::generate_prime"}
