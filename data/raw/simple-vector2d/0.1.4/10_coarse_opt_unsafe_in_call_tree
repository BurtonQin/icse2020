{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unit_vector\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::unit_vector"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"normalise\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::normalise"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"length\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::length"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"length_squared\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::length_squared"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"direction\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::direction"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"direction_to\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::direction_to"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"distance_to\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::distance_to"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"distance_to_squared\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::distance_to_squared"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_any_nan\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::is_any_nan"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_any_infinite\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::is_any_infinite"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_all_finite\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::is_all_finite"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_all_normal\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::is_all_normal"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"simple_vector2d::<impl std::ops::Mul<Vector2<f32>> for f32>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","fn_type":"Safe","name":"simple_vector2d::<impl std::ops::Div<Vector2<f32>> for f32>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"simple_vector2d::<impl std::ops::Mul<Vector2<f64>> for f64>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","fn_type":"Safe","name":"simple_vector2d::<impl std::ops::Div<Vector2<f64>> for f64>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"normal\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::normal"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"dot\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::dot"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"det\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T>>::det"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::ops::Add>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::ops::Sub>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::ops::AddAssign>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::ops::SubAssign>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"mul_assign\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::ops::MulAssign<T>>::mul_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"div_assign\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::ops::DivAssign<T>>::div_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::ops::Mul<T>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::ops::Div<T>>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::ops::Neg>::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::convert::Into<[T; _]>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::convert::From<[T; _]>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::convert::Into<(T, T)>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Vector2<T> as std::convert::From<(T, T)>>::from"}
