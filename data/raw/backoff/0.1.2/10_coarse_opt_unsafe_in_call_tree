{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<error::Error<E> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<error::Error<E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"description\"), disambiguator: 0 }]","fn_type":"Safe","name":"<error::Error<E> as std::error::Error>::description"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"cause\"), disambiguator: 0 }]","fn_type":"Safe","name":"<error::Error<E> as std::error::Error>::cause"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<error::Error<E> as std::convert::From<E>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"retry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"retry\"), disambiguator: 0 }]","fn_type":"Safe","name":"backoff::retry::Operation::retry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"retry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Operation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"retry_notify\"), disambiguator: 0 }]","fn_type":"Safe","name":"backoff::retry::Operation::retry_notify"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"retry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"call_op\"), disambiguator: 0 }]","fn_type":"Safe","name":"<F as retry::Operation<T, E>>::call_op"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"retry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"notify\"), disambiguator: 0 }]","fn_type":"Safe","name":"<F as retry::Notify<E>>::notify"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reset\"), disambiguator: 0 }]","fn_type":"Safe","name":"backoff::backoff::Backoff::reset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next_backoff\"), disambiguator: 0 }]","fn_type":"Safe","name":"<backoff::Zero as backoff::Backoff>::next_backoff"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next_backoff\"), disambiguator: 0 }]","fn_type":"Safe","name":"<backoff::Stop as backoff::Backoff>::next_backoff"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"backoff::backoff::Constant::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next_backoff\"), disambiguator: 0 }]","fn_type":"Safe","name":"<backoff::Constant as backoff::Backoff>::next_backoff"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"exponential\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<exponential::ExponentialBackoff<C> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"exponential\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_elapsed_time\"), disambiguator: 0 }]","fn_type":"Safe","name":"<exponential::ExponentialBackoff<C>>::get_elapsed_time"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"exponential\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_random_value_from_interval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<exponential::ExponentialBackoff<C>>::get_random_value_from_interval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"exponential\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"increment_current_interval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<exponential::ExponentialBackoff<C>>::increment_current_interval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"exponential\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"duration_to_nanos\"), disambiguator: 0 }]","fn_type":"Safe","name":"backoff::exponential::duration_to_nanos"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"exponential\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"nanos_to_duration\"), disambiguator: 0 }]","fn_type":"Safe","name":"backoff::exponential::nanos_to_duration"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"exponential\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"reset\"), disambiguator: 0 }]","fn_type":"Safe","name":"<exponential::ExponentialBackoff<C> as backoff::Backoff>::reset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"exponential\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next_backoff\"), disambiguator: 0 }]","fn_type":"Safe","name":"<exponential::ExponentialBackoff<C> as backoff::Backoff>::next_backoff"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"now\"), disambiguator: 0 }]","fn_type":"Safe","name":"<clock::SystemClock as clock::Clock>::now"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<clock::SystemClock as std::default::Default>::default"}
