{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::nibble::Nibble as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::nibble::Nibble as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::convert::From<usize>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::convert::Into<usize>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::convert::From<u8>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::convert::Into<u8>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::NibbleType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::NibbleType as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::nibble::NibbleType as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::NibbleType as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_key\"), disambiguator: 0 }]","has_unsafe":false,"name":"merkle::nibble::from_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_key\"), disambiguator: 0 }]","has_unsafe":false,"name":"merkle::nibble::into_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"decode\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::nibble::decode"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"encode\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::nibble::encode"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"common\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::nibble::common"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"common_with_sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::nibble::common_with_sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"common_all\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::nibble::common_all"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::node::MerkleNode<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleNode<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleNode<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::node::MerkleNode<'a> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"decode\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::node::MerkleNode::decode"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"inlinable\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::node::MerkleNode::inlinable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleNode<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"rlp_append\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleNode<'a> as rlp::Encodable>::rlp_append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::node::MerkleValue<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::node::MerkleValue<'a> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleValue<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleValue<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleValue<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"decode\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::node::MerkleValue::decode"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"rlp_append\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleValue<'a> as rlp::Encodable>::rlp_append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"insert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"value_and_leaf_branch\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::insert::value_and_leaf_branch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"insert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"two_leaf_branch\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::insert::two_leaf_branch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"insert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"insert_by_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::insert::insert_by_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"insert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"insert_by_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::insert::insert_by_node"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"insert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"insert_by_empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"ops::insert::insert_by_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"delete\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_and_remove_child\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::delete::find_and_remove_child"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"delete\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"collapse_extension\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::delete::collapse_extension"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"delete\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"nonempty_node_count\"), disambiguator: 0 }]","has_unsafe":false,"name":"ops::delete::nonempty_node_count"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"delete\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"collapse_branch\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::delete::collapse_branch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"delete\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"delete_by_child\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::delete::delete_by_child"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"delete\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"delete_by_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::delete::delete_by_node"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"build\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"make_submap\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::build::make_submap"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"build\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"build_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::build::build_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"build\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"build_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::build::build_node"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"get\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_by_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::get::get_by_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ops\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"get\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_by_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"ops::get::get_by_node"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"memory::<impl DatabaseHandle for &'a std::collections::HashMap<bigint::H256, std::vec::Vec<u8>>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<memory::MemoryTrieMut as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<memory::MemoryTrieMut as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":true,"name":"<memory::MemoryTrieMut as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","has_unsafe":false,"name":"<memory::MemoryTrieMut as std::convert::Into<std::collections::HashMap<bigint::H256, std::vec::Vec<u8>>>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":false,"name":"<memory::MemoryTrieMut as mutable::TrieMut>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<memory::MemoryTrieMut as mutable::TrieMut>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"delete\"), disambiguator: 0 }]","has_unsafe":true,"name":"<memory::MemoryTrieMut as mutable::TrieMut>::delete"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<memory::MemoryTrieMut as mutable::TrieMut>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"apply_change\"), disambiguator: 0 }]","has_unsafe":false,"name":"memory::MemoryTrieMut::apply_change"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"build\"), disambiguator: 0 }]","has_unsafe":true,"name":"memory::MemoryTrieMut::build"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnyTrieMut<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::AnyTrieMut<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnyTrieMut<T> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"to_trie\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::AnyTrieMut<T>>::to_trie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::AnyTrieMut<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnyTrieMut<T>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnyTrieMut<T>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"delete\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnyTrieMut<T>>::delete"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnyTrieMut<T>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedTrieMut<T, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::FixedTrieMut<T, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedTrieMut<T, K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"to_trie\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::FixedTrieMut<T, K, V>>::to_trie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::FixedTrieMut<T, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedTrieMut<T, K, V>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedTrieMut<T, K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"delete\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedTrieMut<T, K, V>>::delete"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedTrieMut<T, K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::SecureTrieMut<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::SecureTrieMut<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::SecureTrieMut<T> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"to_trie\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::SecureTrieMut<T>>::to_trie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::SecureTrieMut<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"secure_key\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::SecureTrieMut<T>>::secure_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::SecureTrieMut<T>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::SecureTrieMut<T>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"delete\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::SecureTrieMut<T>>::delete"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::SecureTrieMut<T>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnySecureTrieMut<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::AnySecureTrieMut<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnySecureTrieMut<T> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"to_trie\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::AnySecureTrieMut<T>>::to_trie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::AnySecureTrieMut<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnySecureTrieMut<T>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnySecureTrieMut<T>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"delete\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnySecureTrieMut<T>>::delete"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::AnySecureTrieMut<T>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedSecureTrieMut<T, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::FixedSecureTrieMut<T, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedSecureTrieMut<T, K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"to_trie\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::FixedSecureTrieMut<T, K, V>>::to_trie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mutable::FixedSecureTrieMut<T, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedSecureTrieMut<T, K, V>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedSecureTrieMut<T, K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"delete\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedSecureTrieMut<T, K, V>>::delete"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mutable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<mutable::FixedSecureTrieMut<T, K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Change as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add_raw\"), disambiguator: 0 }]","has_unsafe":false,"name":"Change::add_raw"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"Change::add_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"Change::add_value"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"remove_raw\"), disambiguator: 0 }]","has_unsafe":false,"name":"Change::remove_raw"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"remove_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"Change::remove_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"merge\"), disambiguator: 0 }]","has_unsafe":false,"name":"Change::merge"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"empty_trie_hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"empty_trie_hash"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"insert"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"insert_empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"insert_empty"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"delete\"), disambiguator: 0 }]","has_unsafe":true,"name":"delete"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"build\"), disambiguator: 0 }]","has_unsafe":true,"name":"build"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"get"}
