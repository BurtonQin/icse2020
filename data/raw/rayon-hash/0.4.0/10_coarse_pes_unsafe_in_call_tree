{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"layout_err\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::alloc::layout_err"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::Layout as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::Layout as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::Layout as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::Layout as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::Layout as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_size_align\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::alloc::Layout::from_size_align"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::alloc::Layout::size"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"align\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::alloc::Layout::align"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::alloc::Layout::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"padding_needed_for\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::alloc::Layout::padding_needed_for"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"repeat\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::alloc::Layout::repeat"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::alloc::Layout::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"array\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::alloc::Layout::array"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::Layout as std::convert::From<std::alloc::Layout>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::alloc::<impl std::convert::From<alloc::Layout> for std::alloc::Layout>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::CollectionAllocErr as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<alloc::CollectionAllocErr as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::CollectionAllocErr as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::CollectionAllocErr as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"alloc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<alloc::CollectionAllocErr as std::convert::From<std::alloc::LayoutErr>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ptr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ptr::Unique<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ptr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"as_ptr\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ptr::Unique<T>>::as_ptr"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ptr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ptr::Unique<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_keys\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::map::<impl std_hash::map::HashMap<K, V, S>>::par_keys"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"par_values\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::map::<impl std_hash::map::HashMap<K, V, S>>::par_values"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"par_values_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::map::<impl std_hash::map::HashMap<K, V, S>>::par_values_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"par_eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::map::<impl std_hash::map::HashMap<K, V, S>>::par_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"into_par_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::map::<impl rayon::iter::IntoParallelIterator for std_hash::map::HashMap<K, V, S>>::into_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"into_par_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::map::<impl rayon::iter::IntoParallelIterator for &'a std_hash::map::HashMap<K, V, S>>::into_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"into_par_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::map::<impl rayon::iter::IntoParallelIterator for &'a mut std_hash::map::HashMap<K, V, S>>::into_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"from_par_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::map::<impl rayon::iter::FromParallelIterator<(K, V)> for std_hash::map::HashMap<K, V, S>>::from_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"par_extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::map::<impl rayon::iter::ParallelExtend<(K, V)> for std_hash::map::HashMap<K, V, S>>::par_extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"par_extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::map::<impl rayon::iter::ParallelExtend<(&'a K, &'a V)> for std_hash::map::HashMap<K, V, S>>::par_extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::map::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_difference\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::set::<impl std_hash::set::HashSet<T, S>>::par_difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_symmetric_difference\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::set::<impl std_hash::set::HashSet<T, S>>::par_symmetric_difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_intersection\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::set::<impl std_hash::set::HashSet<T, S>>::par_intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_union\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::set::<impl std_hash::set::HashSet<T, S>>::par_union"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_is_disjoint\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::set::<impl std_hash::set::HashSet<T, S>>::par_is_disjoint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_is_subset\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::set::<impl std_hash::set::HashSet<T, S>>::par_is_subset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_is_superset\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::set::<impl std_hash::set::HashSet<T, S>>::par_is_superset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::set::<impl std_hash::set::HashSet<T, S>>::par_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"into_par_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::set::<impl rayon::iter::IntoParallelIterator for std_hash::set::HashSet<T, S>>::into_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"into_par_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::set::<impl rayon::iter::IntoParallelIterator for &'a std_hash::set::HashSet<T, S>>::into_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from_par_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::set::<impl rayon::iter::FromParallelIterator<T> for std_hash::set::HashSet<T, S>>::from_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"par_extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::set::<impl rayon::iter::ParallelExtend<T> for std_hash::set::HashSet<T, S>>::par_extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"par_extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::set::<impl rayon::iter::ParallelExtend<&'a T> for std_hash::set::HashSet<T, S>>::par_extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::set::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::set::ParIntoIter<T> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::set::ParIter<'a, T> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::set::ParDifference<'a, T, S> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::set::ParSymmetricDifference<'a, T, S> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::set::ParIntersection<'a, T, S> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::set::ParUnion<'a, T, S> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::SplitBuckets<'a, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::SplitBuckets<'a, K, V>>::split"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::SplitBuckets<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"into_par_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::table::<impl rayon::iter::IntoParallelIterator for &'a std_hash::table::RawTable<K, V>>::into_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIter<'a, K, V> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<par::table::ParIterProducer<'a, K, V> as std::convert::From<par::table::SplitBuckets<'a, K, V>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIterProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::split"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fold_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIterProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::fold_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"par_keys\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::table::<impl std_hash::table::RawTable<K, V>>::par_keys"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParKeys<'a, K, V> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<par::table::ParKeysProducer<'a, K, V> as std::convert::From<par::table::SplitBuckets<'a, K, V>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParKeysProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::split"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fold_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParKeysProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::fold_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"par_values\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::table::<impl std_hash::table::RawTable<K, V>>::par_values"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParValues<'a, K, V> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<par::table::ParValuesProducer<'a, K, V> as std::convert::From<par::table::SplitBuckets<'a, K, V>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParValuesProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::split"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"fold_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParValuesProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::fold_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"into_par_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::table::<impl rayon::iter::IntoParallelIterator for &'a mut std_hash::table::RawTable<K, V>>::into_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIterMut<'a, K, V> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<par::table::ParIterMutProducer<'a, K, V> as std::convert::From<par::table::SplitBuckets<'a, K, V>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIterMutProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::split"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"fold_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIterMutProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::fold_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"par_values_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::table::<impl std_hash::table::RawTable<K, V>>::par_values_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParValuesMut<'a, K, V> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<par::table::ParValuesMutProducer<'a, K, V> as std::convert::From<par::table::SplitBuckets<'a, K, V>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParValuesMutProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::split"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"fold_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParValuesMutProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::fold_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"into_par_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::par::table::<impl rayon::iter::IntoParallelIterator for std_hash::table::RawTable<K, V>>::into_par_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"drive_unindexed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIntoIter<K, V> as rayon::iter::ParallelIterator>::drive_unindexed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<par::table::ParIntoIterProducer<'a, K, V> as std::convert::From<par::table::SplitBuckets<'a, K, V>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIntoIterProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::split"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"fold_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIntoIterProducer<'a, K, V> as rayon::iter::plumbing::UnindexedProducer>::fold_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<par::table::ParIntoIterProducer<'a, K, V> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"par\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"collect\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::par::collect"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"set_tag\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::std_hash::table::TaggedHashUintPtr::set_tag"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tag\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::table::TaggedHashUintPtr::tag"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ptr\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::table::TaggedHashUintPtr::ptr"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::RawBucket<K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Bucket<K, V, M> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 53 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::SafeHash as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 53 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::SafeHash as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 51 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::SafeHash as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"inspect\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::table::SafeHash::inspect"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::table::SafeHash::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"make_hash\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::std_hash::table::make_hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::RawBucket<K, V>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"index_add\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::RawBucket<K, V>>::index_add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"table\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::FullBucket<K, V, M>>::table"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"table_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::FullBucket<K, V, M>>::table_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"into_table\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::FullBucket<K, V, M>>::into_table"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::FullBucket<K, V, M>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"raw\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::FullBucket<K, V, M>>::raw"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"table\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::EmptyBucket<K, V, M>>::table"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"table_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::EmptyBucket<K, V, M>>::table_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Bucket<K, V, M>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"into_table\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Bucket<K, V, M>>::into_table"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, M> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::Bucket<K, V, M>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"new_from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Bucket<K, V, M>>::new_from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"at_index\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::Bucket<K, V, M>>::at_index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"first\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::Bucket<K, V, M>>::first"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"head_bucket\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::Bucket<K, V, M>>::head_bucket"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"peek\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::Bucket<K, V, M>>::peek"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::Bucket<K, V, M>>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"prev\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::Bucket<K, V, M>>::prev"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::EmptyBucket<K, V, M>>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"into_bucket\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::EmptyBucket<K, V, M>>::into_bucket"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"gap_peek\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::EmptyBucket<K, V, M>>::gap_peek"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"put\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::EmptyBucket<K, V, M>>::put"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, M>>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"into_bucket\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::FullBucket<K, V, M>>::into_bucket"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"stash\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::FullBucket<K, V, M>>::stash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"displacement\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, M>>::displacement"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, M>>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"read\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, M>>::read"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"take\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, &'t mut std_hash::table::RawTable<K, V>>>::take"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"replace\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, M>>::replace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"read_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, M>>::read_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"into_refs\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, M>>::into_refs"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"into_mut_refs\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::FullBucket<K, V, M>>::into_mut_refs"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"full\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::GapThenFull<K, V, M>>::full"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"into_table\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::GapThenFull<K, V, M>>::into_table"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"shift\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::GapThenFull<K, V, M>>::shift"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"calculate_layout\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::std_hash::table::calculate_layout"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"raw_bucket_at\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::raw_bucket_at"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"new_internal\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::new_internal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"try_new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::try_new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::RawTable<K, V>>::capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"size\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::RawTable<K, V>>::size"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"raw_buckets\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::raw_buckets"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"drain\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::drain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"set_tag\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V>>::set_tag"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"tag\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::RawTable<K, V>>::tag"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::RawBuckets<'a, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawBuckets<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::RawBuckets<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::RawBuckets<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Iter<'a, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::IterMut<'a, K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::IntoIter<K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Drain<'a, K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::Iter<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Iter<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 41 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Iter<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::IterMut<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::IterMut<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::IterMut<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::IntoIter<K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::IntoIter<K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 45 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::IntoIter<K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 46 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::Drain<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 46 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Drain<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 47 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Drain<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::table::Drain<'a, K, V> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 49 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"table\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::table::RawTable<K, V> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 56 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::DefaultResizePolicy as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::DefaultResizePolicy::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"try_raw_capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::DefaultResizePolicy::try_raw_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"raw_capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::DefaultResizePolicy::raw_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::DefaultResizePolicy::capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 57 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"search_hashed\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::std_hash::map::search_hashed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"search_hashed_nonempty\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::std_hash::map::search_hashed_nonempty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pop_internal\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::std_hash::map::pop_internal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"robin_hood\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rayon_hash::std_hash::map::robin_hood"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"make_hash\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::make_hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"search\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::search"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"search_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::search_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert_hashed_ordered\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::insert_hashed_ordered"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"with_hasher\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::with_hasher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity_and_hasher\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::with_capacity_and_hasher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"hasher\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::HashMap<K, V, S>>::hasher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::HashMap<K, V, S>>::capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"raw_capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::HashMap<K, V, S>>::raw_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"reserve\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::reserve"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"reserve_internal\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::reserve_internal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"try_resize\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::try_resize"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"shrink_to_fit\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::shrink_to_fit"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert_hashed_nocheck\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::insert_hashed_nocheck"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"keys\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::keys"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"values\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::values"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"values_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::values_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"entry\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::entry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::HashMap<K, V, S>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::HashMap<K, V, S>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"drain\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::drain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"contains_key\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::contains_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove_entry\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::remove_entry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"retain\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S>>::retain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S> as std::ops::Index<&'a Q>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Iter<'a, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Iter<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Keys<'a, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Keys<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Values<'a, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Values<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"into_occupied_bucket\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::InternalEntry<K, V, M>>::into_occupied_bucket"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"into_entry\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::InternalEntry<K, V, &'a mut std_hash::table::RawTable<K, V>>>::into_entry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Entry<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::OccupiedEntry<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::VacantEntry<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a std_hash::map::HashMap<K, V, S> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a mut std_hash::map::HashMap<K, V, S> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::Iter<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Iter<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Iter<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::IterMut<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::IterMut<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::IterMut<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::IterMut<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::IntoIter<K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::IntoIter<K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::IntoIter<K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::IntoIter<K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::Keys<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Keys<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Keys<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::Values<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Values<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Values<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::ValuesMut<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::ValuesMut<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 41 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::ValuesMut<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::ValuesMut<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::Drain<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Drain<'a, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 45 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Drain<'a, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 47 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::Drain<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"or_insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::Entry<'a, K, V>>::or_insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"or_insert_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::Entry<'a, K, V>>::or_insert_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"key\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::Entry<'a, K, V>>::key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"and_modify\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::Entry<'a, K, V>>::and_modify"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 49 }, DisambiguatedDefPathData { data: ValueNs(\"or_default\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::Entry<'a, K, V>>::or_default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"key\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::OccupiedEntry<'a, K, V>>::key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"remove_entry\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::OccupiedEntry<'a, K, V>>::remove_entry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::OccupiedEntry<'a, K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::OccupiedEntry<'a, K, V>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"into_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::OccupiedEntry<'a, K, V>>::into_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::OccupiedEntry<'a, K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::OccupiedEntry<'a, K, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"take_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::OccupiedEntry<'a, K, V>>::take_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 51 }, DisambiguatedDefPathData { data: ValueNs(\"key\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::VacantEntry<'a, K, V>>::key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 51 }, DisambiguatedDefPathData { data: ValueNs(\"into_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::map::VacantEntry<'a, K, V>>::into_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 51 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::VacantEntry<'a, K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 52 }, DisambiguatedDefPathData { data: ValueNs(\"from_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S> as std::iter::FromIterator<(K, V)>>::from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 53 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S> as std::iter::Extend<(K, V)>>::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 54 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, V, S> as std::iter::Extend<(&'a K, &'a V)>>::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 55 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, (), S> as std_hash::Recover<Q>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 55 }, DisambiguatedDefPathData { data: ValueNs(\"take\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, (), S> as std_hash::Recover<Q>>::take"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 55 }, DisambiguatedDefPathData { data: ValueNs(\"replace\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::map::HashMap<K, (), S> as std_hash::Recover<Q>>::replace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::map_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map_val\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::map_val"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::iter_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter_val\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::iter_val"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::into_iter_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter_val\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::into_iter_val"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"keys_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::keys_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"keys_val\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::keys_val"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"values_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::values_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"values_val\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::values_val"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"drain\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::map::assert_covariance::drain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_hasher\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::with_hasher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity_and_hasher\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::with_capacity_and_hasher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"hasher\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::HashSet<T, S>>::hasher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::HashSet<T, S>>::capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"reserve\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::reserve"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"shrink_to_fit\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::shrink_to_fit"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"difference\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"symmetric_difference\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::symmetric_difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"union\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::union"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::HashSet<T, S>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::HashSet<T, S>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"drain\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::drain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_disjoint\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::is_disjoint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_subset\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::is_subset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_superset\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::is_superset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"replace\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::replace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"take\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::take"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"retain\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S>>::retain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"from_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S> as std::iter::FromIterator<T>>::from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S> as std::iter::Extend<T>>::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S> as std::iter::Extend<&'a T>>::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a std_hash::set::HashSet<T, S> as std::ops::BitOr<&'b std_hash::set::HashSet<T, S>>>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a std_hash::set::HashSet<T, S> as std::ops::BitAnd<&'b std_hash::set::HashSet<T, S>>>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a std_hash::set::HashSet<T, S> as std::ops::BitXor<&'b std_hash::set::HashSet<T, S>>>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a std_hash::set::HashSet<T, S> as std::ops::Sub<&'b std_hash::set::HashSet<T, S>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a std_hash::set::HashSet<T, S> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::HashSet<T, S> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Iter<'a, K> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::Iter<'a, K> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Iter<'a, K> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Iter<'a, K> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Iter<'a, K> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::IntoIter<K> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::IntoIter<K> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::IntoIter<K> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::IntoIter<K> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::Drain<'a, K> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Drain<'a, K> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Drain<'a, K> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Drain<'a, K> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Intersection<'a, T, S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::Intersection<'a, T, S> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Intersection<'a, T, S> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Intersection<'a, T, S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Difference<'a, T, S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std_hash::set::Difference<'a, T, S> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Difference<'a, T, S> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Difference<'a, T, S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::SymmetricDifference<'a, T, S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::SymmetricDifference<'a, T, S> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::SymmetricDifference<'a, T, S> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::SymmetricDifference<'a, T, S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Union<'a, T, S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Union<'a, T, S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Union<'a, T, S> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std_hash::set::Union<'a, T, S> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::set::assert_covariance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"set\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::set::assert_covariance::set"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::set::assert_covariance::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::set::assert_covariance::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"difference\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::set::assert_covariance::difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"symmetric_difference\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::set::assert_covariance::symmetric_difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::set::assert_covariance::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"union\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::set::assert_covariance::union"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"std_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"drain\"), disambiguator: 0 }]","fn_type":"Safe","name":"rayon_hash::std_hash::set::assert_covariance::drain"}
