{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<server::CreateMockError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"server::RequestHandler::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"handle_create_mock\"), disambiguator: 0 }]","has_unsafe":true,"name":"server::RequestHandler::handle_create_mock"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"handle_delete_mocks\"), disambiguator: 0 }]","has_unsafe":false,"name":"server::RequestHandler::handle_delete_mocks"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"handle_default\"), disambiguator: 0 }]","has_unsafe":true,"name":"server::RequestHandler::handle_default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"mock_from\"), disambiguator: 0 }]","has_unsafe":true,"name":"server::RequestHandler::mock_from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"handle\"), disambiguator: 0 }]","has_unsafe":true,"name":"<server::RequestHandler as hyper::server::Handler>::handle"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"try_start\"), disambiguator: 0 }]","has_unsafe":false,"name":"server::try_start"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"start\"), disambiguator: 0 }]","has_unsafe":false,"name":"server::start"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_listening\"), disambiguator: 0 }]","has_unsafe":false,"name":"server::is_listening"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"mock\"), disambiguator: 0 }]","has_unsafe":false,"name":"mock"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"reset\"), disambiguator: 0 }]","has_unsafe":true,"name":"reset"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Mock as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Mock as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Mock as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"Mock::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"match_header\"), disambiguator: 0 }]","has_unsafe":false,"name":"Mock::match_header"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_status\"), disambiguator: 0 }]","has_unsafe":false,"name":"Mock::with_status"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_header\"), disambiguator: 0 }]","has_unsafe":false,"name":"Mock::with_header"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_body\"), disambiguator: 0 }]","has_unsafe":false,"name":"Mock::with_body"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_body_from_file\"), disambiguator: 0 }]","has_unsafe":false,"name":"Mock::with_body_from_file"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create\"), disambiguator: 0 }]","has_unsafe":true,"name":"Mock::create"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create_for\"), disambiguator: 0 }]","has_unsafe":true,"name":"Mock::create_for"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"Mock::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"matches\"), disambiguator: 0 }]","has_unsafe":true,"name":"Mock::matches"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"method_matches\"), disambiguator: 0 }]","has_unsafe":false,"name":"Mock::method_matches"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"path_matches\"), disambiguator: 0 }]","has_unsafe":false,"name":"Mock::path_matches"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"headers_match\"), disambiguator: 0 }]","has_unsafe":true,"name":"Mock::headers_match"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"decode\"), disambiguator: 0 }]","has_unsafe":false,"name":"<MockResponse as rustc_serialize::Decodable>::decode"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"encode\"), disambiguator: 0 }]","has_unsafe":false,"name":"<MockResponse as rustc_serialize::Encodable>::encode"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<MockResponse as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<MockResponse as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<MockResponse as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"MockResponse::new"}
