{"def_path":"[DisambiguatedDefPathData { data: Module(\"boxed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boxed::BoxPredicate<Item>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boxed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boxed::BoxPredicate<Item> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boxed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boxed::BoxPredicate<Item> as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boxed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boxed::BoxPredicate<Item> as predicates_core::reflection::PredicateReflection>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boxed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boxed::BoxPredicate<Item> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boxed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boxed::BoxPredicate<Item> as predicates_core::Predicate<Item>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boxed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boxed::BoxPredicate<Item> as predicates_core::Predicate<Item>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boxed\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PredicateBoxExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"boxed\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::boxed::PredicateBoxExt::boxed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constant::BooleanPredicate<Item> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constant::BooleanPredicate<Item> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constant::BooleanPredicate<Item> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constant::BooleanPredicate<Item> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constant::BooleanPredicate<Item> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constant::BooleanPredicate<Item> as predicates_core::Predicate<Item>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<constant::BooleanPredicate<Item> as predicates_core::Predicate<Item>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constant::BooleanPredicate<Item> as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constant::BooleanPredicate<Item> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"always\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::constant::always"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constant\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"never\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::constant::never"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<function::FnPredicate<F, T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<function::FnPredicate<F, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<function::FnPredicate<F, T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<function::FnPredicate<F, T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<function::FnPredicate<F, T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fn_name\"), disambiguator: 0 }]","fn_type":"Safe","name":"<function::FnPredicate<F, T>>::fn_name"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<function::FnPredicate<F, T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<function::FnPredicate<F, T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<function::FnPredicate<F, T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"function\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"function\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::function::function"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::InPredicate<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::InPredicate<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::InPredicate<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::InPredicate<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::InPredicate<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sort\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::InPredicate<T>>::sort"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::InPredicate<T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::InPredicate<T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::InPredicate<&'a T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::InPredicate<&'a T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::InPredicate<T> as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::InPredicate<T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"in_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::iter::in_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::OrdInPredicate<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::OrdInPredicate<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::OrdInPredicate<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::OrdInPredicate<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::OrdInPredicate<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::OrdInPredicate<T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::OrdInPredicate<T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::OrdInPredicate<&'a T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::OrdInPredicate<&'a T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::OrdInPredicate<T> as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::OrdInPredicate<T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::HashableInPredicate<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::HashableInPredicate<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::HashableInPredicate<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::HashableInPredicate<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::HashableInPredicate<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::HashableInPredicate<T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::HashableInPredicate<T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::HashableInPredicate<&'a T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<iter::HashableInPredicate<&'a T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::HashableInPredicate<T> as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::HashableInPredicate<T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"in_hash\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::iter::in_hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<name::NamePredicate<M, Item> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<name::NamePredicate<M, Item> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<name::NamePredicate<M, Item> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<name::NamePredicate<M, Item> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<name::NamePredicate<M, Item> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<name::NamePredicate<M, Item> as predicates_core::Predicate<Item>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<name::NamePredicate<M, Item> as predicates_core::Predicate<Item>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"Safe","name":"<name::NamePredicate<M, Item> as predicates_core::reflection::PredicateReflection>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<name::NamePredicate<M, Item> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"name\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PredicateNameExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"name\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::name::PredicateNameExt::name"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::EqOps as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::EqOps as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::EqOps as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::EqOps as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::EqOps as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::EqPredicate<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::EqPredicate<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::EqPredicate<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::EqPredicate<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::EqPredicate<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::EqPredicate<T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::EqPredicate<T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::EqPredicate<&'a T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::EqPredicate<&'a T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::EqPredicate<T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::ord::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::ord::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::OrdOps as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::OrdOps as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::OrdOps as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::OrdOps as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::OrdOps as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::OrdPredicate<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::OrdPredicate<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::OrdPredicate<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::OrdPredicate<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::OrdPredicate<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::OrdPredicate<T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::OrdPredicate<T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::OrdPredicate<&'a T> as predicates_core::Predicate<T>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ord::OrdPredicate<&'a T> as predicates_core::Predicate<T>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ord::OrdPredicate<T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::ord::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::ord::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::ord::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ord\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::ord::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::AndPredicate<M1, M2, Item> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::AndPredicate<M1, M2, Item> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::AndPredicate<M1, M2, Item> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::AndPredicate<M1, M2, Item> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::AndPredicate<M1, M2, Item> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::AndPredicate<M1, M2, Item>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::AndPredicate<M1, M2, Item> as predicates_core::Predicate<Item>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::AndPredicate<M1, M2, Item> as predicates_core::Predicate<Item>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::AndPredicate<M1, M2, Item> as predicates_core::reflection::PredicateReflection>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::AndPredicate<M1, M2, Item> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::OrPredicate<M1, M2, Item> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::OrPredicate<M1, M2, Item> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::OrPredicate<M1, M2, Item> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::OrPredicate<M1, M2, Item> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::OrPredicate<M1, M2, Item> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::OrPredicate<M1, M2, Item>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::OrPredicate<M1, M2, Item> as predicates_core::Predicate<Item>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::OrPredicate<M1, M2, Item> as predicates_core::Predicate<Item>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::OrPredicate<M1, M2, Item> as predicates_core::reflection::PredicateReflection>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::OrPredicate<M1, M2, Item> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::NotPredicate<M, Item> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::NotPredicate<M, Item> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::NotPredicate<M, Item> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::NotPredicate<M, Item> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::NotPredicate<M, Item> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::NotPredicate<M, Item>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::NotPredicate<M, Item> as predicates_core::Predicate<Item>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<boolean::NotPredicate<M, Item> as predicates_core::Predicate<Item>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::NotPredicate<M, Item> as predicates_core::reflection::PredicateReflection>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<boolean::NotPredicate<M, Item> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PredicateBooleanExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"and\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::boolean::PredicateBooleanExt::and"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PredicateBooleanExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"or\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::boolean::PredicateBooleanExt::or"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"boolean\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PredicateBooleanExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"not\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::boolean::PredicateBooleanExt::not"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<float::close::IsClosePredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<float::close::IsClosePredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<float::close::IsClosePredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<float::close::IsClosePredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"distance\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::float::close::IsClosePredicate::distance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"epsilon\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::float::close::IsClosePredicate::epsilon"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ulps\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::float::close::IsClosePredicate::ulps"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<float::close::IsClosePredicate as predicates_core::Predicate<f64>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<float::close::IsClosePredicate as predicates_core::Predicate<f64>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<float::close::IsClosePredicate as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<float::close::IsClosePredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"close\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_close\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::float::close::is_close"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::existence::ExistencePredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::existence::ExistencePredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::existence::ExistencePredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::existence::ExistencePredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::existence::ExistencePredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::existence::ExistencePredicate as predicates_core::Predicate<std::path::Path>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::existence::ExistencePredicate as predicates_core::Predicate<std::path::Path>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::existence::ExistencePredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"exists\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::existence::exists"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"existence\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"missing\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::existence::missing"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileType as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::ft::FileType as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileType as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_path\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::ft::FileType::from_path"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::ft::FileType::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileType as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileTypePredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileTypePredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::ft::FileTypePredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileTypePredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileTypePredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"follow_links\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::ft::FileTypePredicate::follow_links"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from_path\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::ft::FileTypePredicate::from_path"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileTypePredicate as predicates_core::Predicate<std::path::Path>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::ft::FileTypePredicate as predicates_core::Predicate<std::path::Path>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileTypePredicate as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::ft::FileTypePredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_file\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::ft::is_file"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_dir\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::ft::is_dir"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ft\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_symlink\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::ft::is_symlink"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"read_file\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::fc::read_file"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fc::FileContentPredicate<P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fc::FileContentPredicate<P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fc::FileContentPredicate<P> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fc::FileContentPredicate<P> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fc::FileContentPredicate<P> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fc::FileContentPredicate<P>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fc::FileContentPredicate<P> as predicates_core::reflection::PredicateReflection>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fc::FileContentPredicate<P> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fc::FileContentPredicate<P> as predicates_core::Predicate<std::path::Path>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fc::FileContentPredicate<P> as predicates_core::Predicate<std::path::Path>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PredicateFileContentExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_file_path\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::fc::PredicateFileContentExt::from_file_path"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"read_file\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::fs::read_file"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::BinaryFilePredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fs::BinaryFilePredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fs::BinaryFilePredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fs::BinaryFilePredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::BinaryFilePredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::fs::BinaryFilePredicate::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"utf8\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::fs::BinaryFilePredicate::utf8"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::BinaryFilePredicate as predicates_core::Predicate<std::path::Path>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fs::BinaryFilePredicate as predicates_core::Predicate<std::path::Path>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::BinaryFilePredicate as predicates_core::Predicate<[u8]>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fs::BinaryFilePredicate as predicates_core::Predicate<[u8]>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::BinaryFilePredicate as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::BinaryFilePredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eq_file\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::fs::eq_file"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::StrFilePredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::StrFilePredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::StrFilePredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::StrFilePredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::StrFilePredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::path::fs::StrFilePredicate::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::StrFilePredicate as predicates_core::Predicate<std::path::Path>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fs::StrFilePredicate as predicates_core::Predicate<std::path::Path>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::StrFilePredicate as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<path::fs::StrFilePredicate as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::StrFilePredicate as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"path\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<path::fs::StrFilePredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::IsEmptyPredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::IsEmptyPredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::IsEmptyPredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::IsEmptyPredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::IsEmptyPredicate as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::basics::IsEmptyPredicate as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::IsEmptyPredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::str::basics::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::StartsWithPredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::StartsWithPredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::StartsWithPredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::StartsWithPredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::StartsWithPredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::StartsWithPredicate as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::basics::StartsWithPredicate as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::StartsWithPredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"starts_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"predicates::str::basics::starts_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::EndsWithPredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::EndsWithPredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::EndsWithPredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::EndsWithPredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::EndsWithPredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::EndsWithPredicate as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::basics::EndsWithPredicate as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::EndsWithPredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ends_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"predicates::str::basics::ends_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::ContainsPredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::ContainsPredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::ContainsPredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::ContainsPredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::ContainsPredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"count\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::str::basics::ContainsPredicate::count"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::ContainsPredicate as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::basics::ContainsPredicate as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::ContainsPredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::MatchesPredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::MatchesPredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::MatchesPredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::MatchesPredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::MatchesPredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::MatchesPredicate as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::basics::MatchesPredicate as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::MatchesPredicate as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::basics::MatchesPredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"basics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"predicates::str::basics::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::TrimPredicate<P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::TrimPredicate<P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::TrimPredicate<P> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::TrimPredicate<P> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::TrimPredicate<P> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::TrimPredicate<P> as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::TrimPredicate<P> as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::TrimPredicate<P> as predicates_core::reflection::PredicateReflection>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::TrimPredicate<P> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::Utf8Predicate<P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::Utf8Predicate<P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::Utf8Predicate<P> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::Utf8Predicate<P> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::Utf8Predicate<P> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::Utf8Predicate<P> as predicates_core::Predicate<std::ffi::OsStr>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::Utf8Predicate<P> as predicates_core::Predicate<std::ffi::OsStr>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::Utf8Predicate<P> as predicates_core::Predicate<[u8]>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::adapters::Utf8Predicate<P> as predicates_core::Predicate<[u8]>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::Utf8Predicate<P> as predicates_core::reflection::PredicateReflection>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::adapters::Utf8Predicate<P> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PredicateStrExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"trim\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::str::adapters::PredicateStrExt::trim"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PredicateStrExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_utf8\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::str::adapters::PredicateStrExt::from_utf8"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"adapters\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"PredicateStrExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"normalize\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::str::adapters::PredicateStrExt::normalize"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DistanceOp as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DistanceOp as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::difference::DistanceOp as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DistanceOp as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::str::difference::DistanceOp::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DifferencePredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DifferencePredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::difference::DifferencePredicate as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DifferencePredicate as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DifferencePredicate as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"predicates::str::difference::DifferencePredicate::split"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"distance\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::str::difference::DifferencePredicate::distance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DifferencePredicate as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::difference::DifferencePredicate as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DifferencePredicate as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::difference::DifferencePredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"diff\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"predicates::str::difference::diff"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"similar\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"predicates::str::difference::similar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"normalize\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::normalize::NormalizedPredicate<P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"normalize\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::normalize::NormalizedPredicate<P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"normalize\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::normalize::NormalizedPredicate<P> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"normalize\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::normalize::NormalizedPredicate<P> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"normalize\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::normalize::NormalizedPredicate<P> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"normalize\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"children\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::normalize::NormalizedPredicate<P> as predicates_core::reflection::PredicateReflection>::children"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"normalize\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::normalize::NormalizedPredicate<P> as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"normalize\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::normalize::NormalizedPredicate<P> as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"normalize\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::normalize::NormalizedPredicate<P> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::regex::RegexPredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::regex::RegexPredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"count\"), disambiguator: 0 }]","fn_type":"Safe","name":"predicates::str::regex::RegexPredicate::count"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::regex::RegexPredicate as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::regex::RegexPredicate as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::regex::RegexPredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::regex::RegexMatchesPredicate as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::regex::RegexMatchesPredicate as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::regex::RegexMatchesPredicate as predicates_core::Predicate<str>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<str::regex::RegexMatchesPredicate as predicates_core::Predicate<str>>::find_case"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"parameters\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::regex::RegexMatchesPredicate as predicates_core::reflection::PredicateReflection>::parameters"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<str::regex::RegexMatchesPredicate as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"str\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_match\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"predicates::str::regex::is_match"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::DebugAdapter<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::DebugAdapter<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::DebugAdapter<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<utils::DebugAdapter<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<utils::DebugAdapter<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<utils::DebugAdapter<T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::DebugAdapter<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default_find_case\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"predicates::utils::default_find_case"}
