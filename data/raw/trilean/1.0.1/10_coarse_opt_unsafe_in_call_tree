{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<skleene::SKleene as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<skleene::SKleene as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<skleene::SKleene as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<skleene::SKleene as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"and\"), disambiguator: 0 }]","fn_type":"Safe","name":"trilean::skleene::SKleene::and"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"or\"), disambiguator: 0 }]","fn_type":"Safe","name":"trilean::skleene::SKleene::or"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_bool\"), disambiguator: 0 }]","fn_type":"Safe","name":"trilean::skleene::SKleene::from_bool"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"not\"), disambiguator: 0 }]","fn_type":"Safe","name":"<skleene::SKleene as std::ops::Not>::not"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"Safe","name":"<skleene::SKleene as std::ops::BitAnd>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"Safe","name":"<skleene::SKleene as std::ops::BitOr>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"skleene\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<skleene::SKleene as std::fmt::Display>::fmt"}
