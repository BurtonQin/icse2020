{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"local_cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::stats::local_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"local_sort\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::stats::local_sort"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stats::Summary as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stats::Summary as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stats::Summary as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::stats::Summary::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"sum\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::sum"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"min\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::min"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"max\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"mean\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::mean"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"median\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::median"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"var\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::var"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"std_dev\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::std_dev"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"std_dev_pct\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::std_dev_pct"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"median_abs_dev\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::median_abs_dev"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"median_abs_dev_pct\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::median_abs_dev_pct"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"percentile\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::percentile"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"quartiles\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::quartiles"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iqr\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[f64] as stats::Stats>::iqr"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"percentile_of_sorted\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::stats::percentile_of_sorted"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stats\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"winsorize\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::stats::winsorize"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<NamePadding as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<NamePadding as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<NamePadding as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"padded_name\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::TestDesc::padded_name"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"padding\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::TestFn::padding"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestFn as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Bencher as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestDesc as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestDesc as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestDesc as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestDesc as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestDesc as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestDesc as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestPaths as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestDescAndFn as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestOpts as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<BenchSamples as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<BenchSamples as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<BenchSamples as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestResult as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<TestResult as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<TestResult as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<()>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_ignored\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_ignored"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_bench\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_bench"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_short_result\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_short_result"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_pretty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_pretty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_plain\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_plain"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_run_start\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_run_start"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_test_start\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_test_start"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_result\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_result"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_log\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_log"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_failures\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_failures"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"write_run_finish\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ConsoleTestState<T>>::write_run_finish"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"fmt_thousands_sep\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::fmt_thousands_sep"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"fmt_bench_samples\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::fmt_bench_samples"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"run_tests_console\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::run_tests_console"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"run_tests_console\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"callback\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::run_tests_console::callback"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"run_tests_console\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"len_if_padded\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::run_tests_console::len_if_padded"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<TestEvent as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"run_tests\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::run_tests"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"filter_tests\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::filter_tests"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"filter_tests\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"filter\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::filter_tests::filter"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"run_test\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::run_test"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"black_box\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"bencher::black_box"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"bencher::Bencher::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ns_elapsed\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::Bencher::ns_elapsed"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ns_per_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::Bencher::ns_per_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"bench_n\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::Bencher::bench_n"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"auto_bench\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::Bencher::auto_bench"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bench\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"benchmark\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::bench::benchmark"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bench\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"run_once\"), disambiguator: 0 }]","fn_type":"Safe","name":"bencher::bench::run_once"}
