{"def_path":"[DisambiguatedDefPathData { data: Module(\"space\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"whitespace\"), disambiguator: 0 }]","fn_type":"Safe","name":"synom::space::whitespace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"space\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"block_comment\"), disambiguator: 0 }]","fn_type":"Safe","name":"synom::space::block_comment"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"space\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"word_break\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"synom::space::word_break"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"space\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"skip_whitespace\"), disambiguator: 0 }]","fn_type":"Safe","name":"synom::space::skip_whitespace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"space\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_whitespace\"), disambiguator: 0 }]","fn_type":"Safe","name":"synom::space::is_whitespace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"helper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"punct\"), disambiguator: 0 }]","fn_type":"Safe","name":"synom::helper::punct"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"helper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"keyword\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"synom::helper::keyword"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"helper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"separated_list\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"synom::helper::separated_list"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<IResult<I, O> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<IResult<I, O> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<IResult<I, O> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<IResult<I, O> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<IResult<I, O> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"expect\"), disambiguator: 0 }]","fn_type":"Safe","name":"<IResult<&'a str, O>>::expect"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"many0\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"synom::many0"}
