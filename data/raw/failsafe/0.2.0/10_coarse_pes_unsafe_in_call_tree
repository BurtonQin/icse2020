{"def_path":"[DisambiguatedDefPathData { data: Module(\"circuit_breaker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"CircuitBreaker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"call\"), disambiguator: 0 }]","has_unsafe":true,"name":"circuit_breaker::CircuitBreaker::call"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"circuit_breaker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_call_permitted\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT> as circuit_breaker::CircuitBreaker>::is_call_permitted"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"circuit_breaker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"call_with\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT> as circuit_breaker::CircuitBreaker>::call_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"config\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<config::Config<POLICY, INSTRUMENT> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"config\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<config::Config<(), ()>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"config\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"failure_policy\"), disambiguator: 0 }]","has_unsafe":false,"name":"<config::Config<POLICY, INSTRUMENT>>::failure_policy"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"config\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"instrument\"), disambiguator: 0 }]","has_unsafe":false,"name":"<config::Config<POLICY, INSTRUMENT>>::instrument"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"config\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"build\"), disambiguator: 0 }]","has_unsafe":true,"name":"<config::Config<POLICY, INSTRUMENT>>::build"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ema\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ema::Ema as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ema\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"ema::Ema::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ema\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"ema::Ema::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ema\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"update\"), disambiguator: 0 }]","has_unsafe":false,"name":"ema::Ema::update"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ema\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"last\"), disambiguator: 0 }]","has_unsafe":false,"name":"ema::Ema::last"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ema\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reset\"), disambiguator: 0 }]","has_unsafe":false,"name":"ema::Ema::reset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::Error<E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::Error<E> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"description\"), disambiguator: 0 }]","has_unsafe":true,"name":"<error::Error<E> as std::error::Error>::description"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"cause\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::Error<E> as std::error::Error>::cause"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_predicate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_err\"), disambiguator: 0 }]","has_unsafe":true,"name":"<F as failure_predicate::FailurePredicate<ERROR>>::is_err"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_predicate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<failure_predicate::Any as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_predicate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<failure_predicate::Any as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_predicate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_err\"), disambiguator: 0 }]","has_unsafe":false,"name":"<failure_predicate::Any as failure_predicate::FailurePredicate<ERROR>>::is_err"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"instrument\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<instrument::NoopInstrument as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"instrument\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"on_call_rejected\"), disambiguator: 0 }]","has_unsafe":false,"name":"<instrument::NoopInstrument as instrument::Instrument>::on_call_rejected"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"instrument\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"on_open\"), disambiguator: 0 }]","has_unsafe":false,"name":"<instrument::NoopInstrument as instrument::Instrument>::on_open"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"instrument\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"on_half_open\"), disambiguator: 0 }]","has_unsafe":false,"name":"<instrument::NoopInstrument as instrument::Instrument>::on_half_open"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"instrument\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"on_closed\"), disambiguator: 0 }]","has_unsafe":false,"name":"<instrument::NoopInstrument as instrument::Instrument>::on_closed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<state_machine::State as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"as_str\"), disambiguator: 0 }]","has_unsafe":false,"name":"state_machine::State::as_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"transit_to_closed\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::Shared<POLICY>>::transit_to_closed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"transit_to_half_open\"), disambiguator: 0 }]","has_unsafe":false,"name":"<state_machine::Shared<POLICY>>::transit_to_half_open"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"transit_to_open\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::Shared<POLICY>>::transit_to_open"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"is_call_permitted\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT>>::is_call_permitted"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"on_success\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT>>::on_success"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"state_machine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"on_error\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT>>::on_error"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"windowed_adder\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<windowed_adder::WindowedAdder as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"windowed_adder\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"windowed_adder::WindowedAdder::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"windowed_adder\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"expire\"), disambiguator: 0 }]","has_unsafe":true,"name":"windowed_adder::WindowedAdder::expire"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"windowed_adder\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reset\"), disambiguator: 0 }]","has_unsafe":true,"name":"windowed_adder::WindowedAdder::reset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"windowed_adder\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"windowed_adder::WindowedAdder::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"windowed_adder\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sum\"), disambiguator: 0 }]","has_unsafe":true,"name":"windowed_adder::WindowedAdder::sum"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"windowed_adder\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zero_slices\"), disambiguator: 0 }]","has_unsafe":false,"name":"windowed_adder::WindowedAdder::zero_slices"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"windowed_adder\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_millis\"), disambiguator: 0 }]","has_unsafe":false,"name":"windowed_adder::to_millis"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"constant\"), disambiguator: 0 }]","has_unsafe":false,"name":"backoff::constant"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"exponential\"), disambiguator: 0 }]","has_unsafe":false,"name":"backoff::exponential"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"equal_jittered\"), disambiguator: 0 }]","has_unsafe":false,"name":"backoff::equal_jittered"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"full_jittered\"), disambiguator: 0 }]","has_unsafe":false,"name":"backoff::full_jittered"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<backoff::ThreadLocalGenRange as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<backoff::ThreadLocalGenRange as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"gen_range\"), disambiguator: 0 }]","has_unsafe":true,"name":"<backoff::ThreadLocalGenRange as backoff::GenRange>::gen_range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<backoff::Exponential as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<backoff::Exponential as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<backoff::Exponential as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<backoff::FullJittered<R> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<backoff::FullJittered<R> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<backoff::FullJittered<R> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<backoff::EqualJittered<R> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<backoff::EqualJittered<R> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<backoff::EqualJittered<R> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"exponential_backoff_seconds\"), disambiguator: 0 }]","has_unsafe":false,"name":"backoff::exponential_backoff_seconds"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"FailurePolicy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"or_else\"), disambiguator: 0 }]","has_unsafe":false,"name":"failure_policy::FailurePolicy::or_else"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"success_rate_over_time_window\"), disambiguator: 0 }]","has_unsafe":true,"name":"failure_policy::success_rate_over_time_window"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"consecutive_failures\"), disambiguator: 0 }]","has_unsafe":true,"name":"failure_policy::consecutive_failures"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::SuccessRateOverTimeWindow<backoff::EqualJittered> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::ConsecutiveFailures<backoff::EqualJittered> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<failure_policy::SuccessRateOverTimeWindow<BACKOFF> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"elapsed_millis\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::SuccessRateOverTimeWindow<BACKOFF>>::elapsed_millis"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"can_remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::SuccessRateOverTimeWindow<BACKOFF>>::can_remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"record_success\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::SuccessRateOverTimeWindow<BACKOFF> as failure_policy::FailurePolicy>::record_success"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"mark_dead_on_failure\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::SuccessRateOverTimeWindow<BACKOFF> as failure_policy::FailurePolicy>::mark_dead_on_failure"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"revived\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::SuccessRateOverTimeWindow<BACKOFF> as failure_policy::FailurePolicy>::revived"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<failure_policy::ConsecutiveFailures<BACKOFF> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"record_success\"), disambiguator: 0 }]","has_unsafe":false,"name":"<failure_policy::ConsecutiveFailures<BACKOFF> as failure_policy::FailurePolicy>::record_success"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"mark_dead_on_failure\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::ConsecutiveFailures<BACKOFF> as failure_policy::FailurePolicy>::mark_dead_on_failure"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"revived\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::ConsecutiveFailures<BACKOFF> as failure_policy::FailurePolicy>::revived"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<failure_policy::OrElse<LEFT, RIGHT> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"record_success\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::OrElse<LEFT, RIGHT> as failure_policy::FailurePolicy>::record_success"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"mark_dead_on_failure\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::OrElse<LEFT, RIGHT> as failure_policy::FailurePolicy>::mark_dead_on_failure"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"failure_policy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"revived\"), disambiguator: 0 }]","has_unsafe":true,"name":"<failure_policy::OrElse<LEFT, RIGHT> as failure_policy::FailurePolicy>::revived"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"futures\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"CircuitBreaker\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"call\"), disambiguator: 0 }]","has_unsafe":true,"name":"futures::CircuitBreaker::call"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"futures\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_call_permitted\"), disambiguator: 0 }]","has_unsafe":true,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT> as futures::CircuitBreaker>::is_call_permitted"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"futures\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"call_with\"), disambiguator: 0 }]","has_unsafe":false,"name":"<state_machine::StateMachine<POLICY, INSTRUMENT> as futures::CircuitBreaker>::call_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"futures\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<futures::ResponseFuture<FUTURE, POLICY, INSTRUMENT, PREDICATE> as lib_futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"CLOCK\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"__init\"), disambiguator: 0 }]","has_unsafe":false,"name":"clock::CLOCK::__init"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<clock::MockClock as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"clock::MockClock::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"now\"), disambiguator: 0 }]","has_unsafe":false,"name":"clock::MockClock::now"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"advance\"), disambiguator: 0 }]","has_unsafe":false,"name":"clock::MockClock::advance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"freeze\"), disambiguator: 0 }]","has_unsafe":false,"name":"clock::freeze"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"freeze\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ClosureExpr, disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","has_unsafe":false,"name":"<clock::freeze::{{closure}}::Reset<'a> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"clock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"now\"), disambiguator: 0 }]","has_unsafe":true,"name":"clock::now"}
