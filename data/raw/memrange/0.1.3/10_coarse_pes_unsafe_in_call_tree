{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"encode\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Range as rustc_serialize::Encodable>::encode"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"decode\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Range as rustc_serialize::Decodable>::decode"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"range\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::range"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersect\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::intersect"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"adjacent\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::adjacent"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_intersection\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::get_intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_union\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::get_union"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_difference\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::get_difference"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::len"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_extended\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::get_extended"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"each_slice\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::each_slice"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersection_cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"memrange::Range::intersection_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Range as std::cmp::Ord>::cmp"}
