{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Tribool as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Tribool as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Tribool as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_str\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Tribool as std::str::FromStr>::from_str"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"is_true\"), disambiguator: 0 }]","fn_type":"Safe","name":"tribool::Tribool::is_true"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"is_false\"), disambiguator: 0 }]","fn_type":"Safe","name":"tribool::Tribool::is_false"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"is_indeterminate\"), disambiguator: 0 }]","fn_type":"Safe","name":"tribool::Tribool::is_indeterminate"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"equals\"), disambiguator: 0 }]","fn_type":"Safe","name":"tribool::Tribool::equals"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"not_equals\"), disambiguator: 0 }]","fn_type":"Safe","name":"tribool::Tribool::not_equals"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"kleene_implication\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::Tribool::kleene_implication"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"lukasiewicz_implication\"), disambiguator: 0 }]","fn_type":"Safe","name":"tribool::Tribool::lukasiewicz_implication"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Tribool as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::cmp::PartialEq<B>>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::cmp::PartialEq<B>>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::cmp::PartialEq<Tribool> for bool>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::cmp::PartialEq<Tribool> for bool>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::cmp::PartialOrd<B>>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::cmp::PartialOrd<B>>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::cmp::PartialOrd<B>>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::cmp::PartialOrd<B>>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::cmp::PartialOrd<B>>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"not\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Tribool as std::ops::Not>::not"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitAnd<B>>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitOr<B>>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitXor<B>>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitAnd<Tribool> for bool>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"bitand_assign\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitAndAssign<B>>::bitand_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"bitand_assign\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitAndAssign<Tribool> for bool>::bitand_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitOr<Tribool> for bool>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"bitor_assign\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitOrAssign<B>>::bitor_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"bitor_assign\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitOrAssign<Tribool> for bool>::bitor_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitXor<Tribool> for bool>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor_assign\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitXorAssign<B>>::bitxor_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor_assign\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitXorAssign<Tribool> for bool>::bitxor_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Tribool as std::convert::From<bool>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"tribool::<impl std::convert::From<Tribool> for bool>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"not\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a Tribool as std::ops::Not>::not"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a Tribool as std::ops::BitAnd<Tribool>>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitAnd<&'a Tribool>>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'b Tribool as std::ops::BitAnd<&'a Tribool>>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a Tribool as std::ops::BitOr<Tribool>>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitOr<&'a Tribool>>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'b Tribool as std::ops::BitOr<&'a Tribool>>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a Tribool as std::ops::BitXor<Tribool>>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitXor<&'a Tribool>>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'b Tribool as std::ops::BitXor<&'a Tribool>>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a Tribool as std::ops::BitAnd<bool>>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitAnd<&'a bool>>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'b Tribool as std::ops::BitAnd<&'a bool>>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a Tribool as std::ops::BitOr<bool>>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitOr<&'a bool>>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 41 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'b Tribool as std::ops::BitOr<&'a bool>>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a Tribool as std::ops::BitXor<bool>>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Tribool as std::ops::BitXor<&'a bool>>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'b Tribool as std::ops::BitXor<&'a bool>>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 45 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitAnd<Tribool> for &'a bool>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 46 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitAnd<&'a Tribool> for bool>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 47 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitAnd<&'a Tribool> for &'b bool>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitOr<Tribool> for &'a bool>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 49 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitOr<&'a Tribool> for bool>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"bitor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitOr<&'a Tribool> for &'b bool>::bitor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 51 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitXor<Tribool> for &'a bool>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 52 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitXor<&'a Tribool> for bool>::bitxor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 53 }, DisambiguatedDefPathData { data: ValueNs(\"bitxor\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"tribool::<impl std::ops::BitXor<&'a Tribool> for &'b bool>::bitxor"}
