{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pat::RegexEq as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pat::RegexEq as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pat::Pat as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pat::Pat as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<pat::Pat as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<pat::Pat as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_id\"), disambiguator: 0 }]","has_unsafe":false,"name":"pat::Pat::get_id"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_str\"), disambiguator: 0 }]","has_unsafe":false,"name":"pat::Pat::get_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_atom\"), disambiguator: 0 }]","has_unsafe":false,"name":"pat::Pat::get_atom"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_wild\"), disambiguator: 0 }]","has_unsafe":false,"name":"pat::Pat::is_wild"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pat::RegexEq as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"pat::<impl subsume::Subsumes for std::vec::Vec<pat::Pat>>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pat\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"<pat::Pat as subsume::Subsumes>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::Range as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::Range as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::Range as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::Range as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::Range as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::Range as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::RangeHalf as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::RangeHalf as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::RangeHalf as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::RangeHalf as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::RangeHalf as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::RangeHalf as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"contains_str\"), disambiguator: 0 }]","has_unsafe":false,"name":"range::Range::contains_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_string\"), disambiguator: 0 }]","has_unsafe":false,"name":"range::Range::to_string"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_str_range\"), disambiguator: 0 }]","has_unsafe":false,"name":"range::Range::to_str_range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"i64_to_maxwidth_string\"), disambiguator: 0 }]","has_unsafe":false,"name":"range::i64_to_maxwidth_string"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::Range as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"range::<impl std::convert::From<range::Range> for std::borrow::Cow<'a, range::Range>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"range::<impl std::convert::From<&'a range::Range> for std::borrow::Cow<'a, range::Range>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::Range as subsume::Subsumes<str>>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":false,"name":"range::<impl subsume::Subsumes<range::Range> for str>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":false,"name":"range::<impl subsume::Subsumes<range::Range> for std::vec::Vec<std::string::String>>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::Range as subsume::Subsumes<std::vec::Vec<std::string::String>>>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reorder\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::reorder"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lexical_int_range\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::lexical_int_range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pairs_int_str_subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::pairs_int_str_subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pairs_subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::pairs_subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pair_from_subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::pair_from_subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pair_till_subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::pair_till_subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::from_subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"till_subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::till_subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"int_to_ascii\"), disambiguator: 0 }]","has_unsafe":false,"name":"range::int_to_ascii"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::Range as subsume::Subsumes>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<subsume::Subsumption as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<subsume::Subsumption as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<subsume::Subsumption as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<subsume::Subsumption as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<subsume::Subsumption as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reverse\"), disambiguator: 0 }]","has_unsafe":false,"name":"subsume::Subsumption::reverse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"same_or_contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"subsume::Subsumption::same_or_contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"same_or_contained_by\"), disambiguator: 0 }]","has_unsafe":true,"name":"subsume::Subsumption::same_or_contained_by"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"bitand_assign\"), disambiguator: 0 }]","has_unsafe":false,"name":"<subsume::Subsumption as std::ops::BitAndAssign>::bitand_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"bitand\"), disambiguator: 0 }]","has_unsafe":false,"name":"<subsume::Subsumption as std::ops::BitAnd>::bitand"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":false,"name":"<str as subsume::Subsumes>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::vec::Vec<std::string::String> as subsume::Subsumes<str>>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":false,"name":"<str as subsume::Subsumes<std::vec::Vec<std::string::String>>>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersect\"), disambiguator: 0 }]","has_unsafe":true,"name":"subsume::intersect"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"<std::vec::Vec<std::string::String> as subsume::Subsumes>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"<str as subsume::Subsumes<regex::Regex>>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":true,"name":"<regex::Regex as subsume::Subsumes<str>>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::vec::Vec<std::string::String> as subsume::Subsumes<regex::Regex>>::subsumes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subsume\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"subsumes\"), disambiguator: 0 }]","has_unsafe":false,"name":"<regex::Regex as subsume::Subsumes<std::vec::Vec<std::string::String>>>::subsumes"}
