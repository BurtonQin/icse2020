{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::Expr<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::Expr<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::Expr<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::Expr<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::Numeric<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::Numeric<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::Numeric<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::Numeric<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::Literal<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::Literal<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::Literal<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::Literal<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"parse\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::parse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"parse_outer\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Expr::parse_outer"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"parse\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Expr::parse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"filter\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Expr::filter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_args\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Expr::get_args"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_token\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Expr::from_token"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"parse\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Numeric::parse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"parenthetical\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Numeric::parenthetical"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"unary_operator\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Numeric::unary_operator"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"binary_operator\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Numeric::binary_operator"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_token\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Numeric::from_token"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"parse\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::ast::Literal::parse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<bytecode::Instr<NumEnum, StrEnum, FilterEnum> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<bytecode::Bytecode<NumEnum, StrEnum, FilterEnum> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_ast\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<bytecode::Bytecode<NumEnum, StrEnum, FilterEnum>>::from_ast"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_render\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<bytecode::Bytecode<NumEnum, StrEnum, FilterEnum>>::par_render"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"par_render\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"STORE\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"__init\"), disambiguator: 0 }]","fn_type":"Safe","name":"<bytecode::Bytecode<NumEnum, StrEnum, FilterEnum>>::par_render::STORE::__init"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"render\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<bytecode::Bytecode<NumEnum, StrEnum, FilterEnum>>::render"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"render_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<bytecode::Bytecode<NumEnum, StrEnum, FilterEnum>>::render_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"extend_with_tree\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<bytecode::Bytecode<NumEnum, StrEnum, FilterEnum>>::extend_with_tree"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"extend_with_numeric\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<bytecode::Bytecode<NumEnum, StrEnum, FilterEnum>>::extend_with_numeric"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bytecode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"extend_with_filter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<bytecode::Bytecode<NumEnum, StrEnum, FilterEnum>>::extend_with_filter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"optimizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"optimize\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::optimizer::optimize"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"optimizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"optimize_tree\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"zapper::optimizer::optimize_tree"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"optimizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"optimize_numeric\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"zapper::optimizer::optimize_numeric"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokenizer::Token<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokenizer::Token<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<tokenizer::Token<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<tokenizer::Token<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokenizer::Operator as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokenizer::Operator as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<tokenizer::Operator as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"value\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::tokenizer::Operator::value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokenizer::Tokenizer<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokenizer::Tokenizer<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokenizer::Tokenizer<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokenizer::Tokenizer<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"zapper::tokenizer::Tokenizer::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokenizer::Tokenizer<'a> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"compile\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"zapper::compile"}
