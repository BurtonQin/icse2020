{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new_unchecked\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<set::Set<T>>::new_unchecked"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_set_buf\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T>>::to_set_buf"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"as_slice\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T>>::as_slice"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::convert::AsRef<[T]>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Set<T> as std::convert::AsRef<set::Set<T>>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new_unchecked\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T>>::new_unchecked"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"as_set\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<set::SetBuf<T>>::as_set"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"into_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T>>::into_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<set::SetBuf<T> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<set::SetBuf<T> as std::convert::AsRef<set::Set<T>>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::SetBuf<T> as std::convert::AsRef<[T]>>::as_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Error as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Error as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<set::Error as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Error as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<set::Error as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<set::Error as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<set::Error as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<set::Error as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"vec_slices_into_sets\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"sdset::set::vec_slices_into_sets"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"vec_slices_into_sets_unchecked\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"sdset::set::vec_slices_into_sets_unchecked"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"vec_sets_into_slices\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"sdset::set::vec_sets_into_slices"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"slice_sets_into_slices\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"sdset::set::slice_sets_into_slices"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sort_dedup_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"sdset::set::sort_dedup_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_sort_dedup\"), disambiguator: 0 }]","fn_type":"Safe","name":"sdset::set::is_sort_dedup"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::union::Union<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<multi::union::Union<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::union::Union<'a, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::union::Union<'a, T> as SetOperation<&'a T, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::union::Union<'a, T> as SetOperation<&'a T, &'a T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::intersection::Intersection<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<multi::intersection::Intersection<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"test_equality\"), disambiguator: 0 }]","fn_type":"Safe","name":"sdset::multi::intersection::test_equality"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::intersection::Intersection<'a, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::intersection::Intersection<'a, T> as SetOperation<&'a T, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::intersection::Intersection<'a, T> as SetOperation<&'a T, &'a T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::difference::Difference<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<multi::difference::Difference<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::difference::Difference<'a, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::difference::Difference<'a, T> as SetOperation<&'a T, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::difference::Difference<'a, T> as SetOperation<&'a T, &'a T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::symmetric_difference::SymmetricDifference<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<multi::symmetric_difference::SymmetricDifference<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::symmetric_difference::SymmetricDifference<'a, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::symmetric_difference::SymmetricDifference<'a, T> as SetOperation<&'a T, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::symmetric_difference::SymmetricDifference<'a, T> as SetOperation<&'a T, &'a T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::OpBuilder<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::OpBuilder<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::OpBuilder<'a, T>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::OpBuilder<'a, T>>::from_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reserve\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::OpBuilder<'a, T>>::reserve"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::OpBuilder<'a, T>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","fn_type":"Safe","name":"<multi::OpBuilder<'a, T>>::push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"union\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<multi::OpBuilder<'a, T>>::union"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<multi::OpBuilder<'a, T>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"difference\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<multi::OpBuilder<'a, T>>::difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"multi\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"symmetric_difference\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<multi::OpBuilder<'a, T>>::symmetric_difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::union::Union<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::union::Union<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::union::Union<'a, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::union::Union<'a, T> as SetOperation<&'a T, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"union\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::union::Union<'a, T> as SetOperation<&'a T, &'a T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::difference::Difference<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::difference::Difference<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::difference::Difference<'a, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::difference::Difference<'a, T> as SetOperation<&'a T, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::difference::Difference<'a, T> as SetOperation<&'a T, &'a T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::intersection::Intersection<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::intersection::Intersection<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::intersection::Intersection<'a, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::intersection::Intersection<'a, T> as SetOperation<&'a T, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"intersection\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::intersection::Intersection<'a, T> as SetOperation<&'a T, &'a T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::symmetric_difference::SymmetricDifference<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::symmetric_difference::SymmetricDifference<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::symmetric_difference::SymmetricDifference<'a, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::symmetric_difference::SymmetricDifference<'a, T> as SetOperation<&'a T, T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"symmetric_difference\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::symmetric_difference::SymmetricDifference<'a, T> as SetOperation<&'a T, &'a T>>::extend_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::OpBuilder<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::OpBuilder<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"union\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::OpBuilder<'a, T>>::union"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::OpBuilder<'a, T>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"difference\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::OpBuilder<'a, T>>::difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duo\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"symmetric_difference\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duo::OpBuilder<'a, T>>::symmetric_difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"two_minimums\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"two_minimums\"), disambiguator: 0 }]","fn_type":"Safe","name":"sdset::two_minimums::two_minimums"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"offset_ge\"), disambiguator: 0 }]","fn_type":"Safe","name":"sdset::offset_ge"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"exponential_search\"), disambiguator: 0 }]","fn_type":"Safe","name":"sdset::exponential_search"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"exponential_search_offset_ge\"), disambiguator: 0 }]","fn_type":"Safe","name":"sdset::exponential_search_offset_ge"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"SetOperation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_set_buf\"), disambiguator: 0 }]","fn_type":"Safe","name":"sdset::SetOperation::into_set_buf"}
