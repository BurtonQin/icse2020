{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<T> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<T> as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<T> as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<T> as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<T> as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<T> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Regex<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Regex<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Regex<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pull\"), disambiguator: 0 }]","fn_type":"Safe","name":"<It as regex::Pull<A>>::pull"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Puller<A, B, Fun, Iter> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"normalize\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Regex<T> as dfa::Normalize>::normalize"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::ParseError as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::ParseError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::ParseError as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"char\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::char"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"char_first\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::char_first"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"char_group\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::char_group"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"chars\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::chars"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"atom\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::atom"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"atom_first\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::atom_first"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"kleene\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::kleene"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"kleene_first\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::kleene_first"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"cat\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::cat"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"not\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::not"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"and\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::and"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"alt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Parser<I>>::alt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"parse\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Parser<I>>::parse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"from_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<char> as std::str::FromStr>::from_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"nullable\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex::Regex<T>>::nullable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<derivatives::Derivatives<T, R> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<derivatives::Derivatives<T, R> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<derivatives::Derivatives<T, R>>::map"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"union\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"redfa::derivatives::union"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<derivatives::Union<T, It1, It2> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<derivatives::Union<T, It1, It2> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"inter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"redfa::derivatives::inter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<derivatives::Inter<T, It1, It2> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"subtract\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"redfa::derivatives::subtract"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<derivatives::Subtract<T, It1, It2> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"inter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<derivatives::Set<T>>::inter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"subtract\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<derivatives::Set<T>>::subtract"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"combine\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"redfa::derivatives::combine"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"combine\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"go\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"redfa::derivatives::combine::go"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"derivative\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex::Regex<T> as derivatives::Differentiable<T>>::derivative"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"derivative\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<std::vec::Vec<R> as derivatives::Differentiable<T>>::derivative"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<dfa::State<T, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<dfa::State<T, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<dfa::Dfa<T, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<dfa::Dfa<T, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"normalize\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::vec::Vec<R> as dfa::Normalize>::normalize"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_derivatives\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<dfa::Dfa<T, V>>::from_derivatives"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_derivatives\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<dfa::Dfa<T, V>>::from_derivatives::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"map\"), disambiguator: 0 }]","fn_type":"Safe","name":"<dfa::Dfa<T, V>>::map"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"reverse\"), disambiguator: 0 }]","fn_type":"Safe","name":"<dfa::Dfa<T, V>>::reverse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"minimize\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<dfa::Dfa<T, V>>::minimize"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<dfa::Dfa<T, V> as std::cmp::PartialEq<dfa::Dfa<T, U>>>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dfa\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"equiv\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<dfa::Dfa<T, V>>::equiv"}
