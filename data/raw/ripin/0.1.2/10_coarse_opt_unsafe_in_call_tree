{"def_path":"[DisambiguatedDefPathData { data: Module(\"stack\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stack::Stack<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stack\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stack::Stack<T>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stack\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stack::Stack<T>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stack\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stack::Stack<T>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stack\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stack::Stack<T>>::push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stack\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pop\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stack::Stack<T>>::pop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"try_into_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<T as convert_ref::TryIntoRef<U>>::try_into_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<f32 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<f64 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<isize as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i8 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i16 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i32 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i64 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<usize as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u8 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u16 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u32 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"convert_ref\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<u64 as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::Arithm<T, V, E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::Arithm<T, V, E> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::Expression<T, V, E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::EvalErr<V, E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<expression::EvalErr<V, E> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<expression::EvalErr<V, E> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::EvalErr<V, E> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"evaluate\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::Expression<T, V, E>>::evaluate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"evaluate_with_variables\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::Expression<T, V, E>>::evaluate_with_variables"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::Expression<T, V, E>>::from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::ExprResult<A, B, C> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<expression::ExprResult<A, B, C> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<expression::ExprResult<A, B, C> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::OperandErr as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<expression::OperandErr as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"check_validity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::Expression<T, V, E>>::check_validity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"compute_stack_max\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::Expression<T, V, E>>::compute_stack_max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"expression\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<expression::Expression<T, V, E> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"get_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_variable\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::collections::HashMap<I, T> as variable::get_variable::GetVariable<I>>::get_variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"get_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_variable\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::collections::BTreeMap<I, T> as variable::get_variable::GetVariable<I>>::get_variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"get_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get_variable\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::vec::Vec<T> as variable::get_variable::GetVariable<usize>>::get_variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"get_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_variable\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::collections::VecDeque<T> as variable::get_variable::GetVariable<usize>>::get_variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"get_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"get_variable\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::collections::LinkedList<T> as variable::get_variable::GetVariable<usize>>::get_variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dummy_variables\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::dummy_variables::DummyVariables<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dummy_variables\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::dummy_variables::DummyVariables<T> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dummy_variables\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_variable\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::dummy_variables::DummyVariables<T> as variable::get_variable::GetVariable<()>>::get_variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dummy_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::dummy_variable::DummyVariable as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dummy_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::dummy_variable::DummyVariable as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dummy_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::dummy_variable::DummyVariable as convert_ref::TryFromRef<T>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dummy_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::dummy_variable::DummyVariable as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dummy_variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"ripin::variable::dummy_variable::<impl std::convert::From<variable::dummy_variable::DummyVariable> for ()>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"index_var\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::index_var::IndexVar as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"index_var\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::index_var::IndexVar as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"index_var\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::index_var::IndexVar as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"index_var\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::index_var::IndexVar as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"index_var\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::index_var::IndexVar as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"index_var\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::index_var::VarIdxErr<'a, E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"index_var\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<variable::index_var::IndexVar as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"variable\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"index_var\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"ripin::variable::index_var::<impl std::convert::From<variable::index_var::IndexVar> for usize>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::float::FloatEvaluator<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::float::FloatEvaluator<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<evaluate::float::FloatEvaluateErr as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<evaluate::float::FloatEvaluateErr as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"operands_needed\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::float::FloatEvaluator<T> as evaluate::Evaluate<T>>::operands_needed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"operands_generated\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::float::FloatEvaluator<T> as evaluate::Evaluate<T>>::operands_generated"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"evaluate\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::float::FloatEvaluator<T> as evaluate::Evaluate<T>>::evaluate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::float::FloatErr<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::float::FloatEvaluator<T> as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"float\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::float::FloatEvaluator<T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::integer::IntEvaluator<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::integer::IntEvaluator<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::integer::IntEvaluateErr<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<evaluate::integer::IntEvaluateErr<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<evaluate::integer::IntEvaluateErr<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"operands_needed\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::integer::IntEvaluator<T> as evaluate::Evaluate<T>>::operands_needed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"operands_generated\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::integer::IntEvaluator<T> as evaluate::Evaluate<T>>::operands_generated"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"evaluate\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::integer::IntEvaluator<T> as evaluate::Evaluate<T>>::evaluate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::integer::IntErr<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"try_from_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::integer::IntEvaluator<T> as convert_ref::TryFromRef<&'a str>>::try_from_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"evaluate\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"integer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<evaluate::integer::IntEvaluator<T> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"pop_two_operands\"), disambiguator: 0 }]","fn_type":"Safe","name":"ripin::pop_two_operands"}
