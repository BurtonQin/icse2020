{"def_path":"[DisambiguatedDefPathData { data: Module(\"semigroup_laws\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"associativity\"), disambiguator: 0 }]","has_unsafe":true,"name":"semigroup_laws::associativity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monoid_laws\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"left_identity\"), disambiguator: 0 }]","has_unsafe":true,"name":"monoid_laws::left_identity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monoid_laws\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"right_identity\"), disambiguator: 0 }]","has_unsafe":true,"name":"monoid_laws::right_identity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<wrapper::Wrapper<A> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<wrapper::Wrapper<A> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"arbitrary\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<frunk::semigroup::Max<A>> as quickcheck::Arbitrary>::arbitrary"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"arbitrary\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<frunk::semigroup::Min<A>> as quickcheck::Arbitrary>::arbitrary"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"arbitrary\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<frunk::semigroup::All<A>> as quickcheck::Arbitrary>::arbitrary"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"arbitrary\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<frunk::semigroup::Any<A>> as quickcheck::Arbitrary>::arbitrary"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"arbitrary\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<frunk::semigroup::Product<A>> as quickcheck::Arbitrary>::arbitrary"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"combine\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as frunk::Semigroup>::combine"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<wrapper::Wrapper<A> as frunk::Monoid>::empty"}
