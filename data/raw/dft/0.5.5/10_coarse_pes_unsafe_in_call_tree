{"def_path":"[DisambiguatedDefPathData { data: Module(\"complex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"transform\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"dft::complex::<impl Transform<T> for [num_complex::Complex<T>]>::transform"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"complex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"transform\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"dft::complex::<impl Transform<T> for std::vec::Vec<num_complex::Complex<T>>>::transform"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"complex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"calculate\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"dft::complex::calculate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"complex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rearrange\"), disambiguator: 0 }]","fn_type":"Safe","name":"dft::complex::rearrange"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"complex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"scale\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"dft::complex::scale"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"real\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"transform\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"dft::real::<impl Transform<T> for [T]>::transform"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"real\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"transform\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"dft::real::<impl Transform<T> for std::vec::Vec<T>>::transform"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"real\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unpack\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"dft::real::unpack"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"real\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"compose\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"dft::real::compose"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Operation as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Operation as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Operation as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Operation as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Plan<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Plan<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Plan<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"transform\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"dft::transform"}
