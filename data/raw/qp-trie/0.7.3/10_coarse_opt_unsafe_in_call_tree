{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"make_entry\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"qp_trie::entry::make_entry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<entry::Entry<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"nonempty\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::Entry<'a, K, V>>::nonempty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"occupied\"), disambiguator: 0 }]","fn_type":"Safe","name":"<entry::Entry<'a, K, V>>::occupied"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"vacant_nonempty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<entry::Entry<'a, K, V>>::vacant_nonempty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<entry::Entry<'a, K, V>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"or_insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::Entry<'a, K, V>>::or_insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"or_insert_with\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::Entry<'a, K, V>>::or_insert_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"key\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::Entry<'a, K, V>>::key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<entry::VacantEntry<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<entry::VacantEntryInner<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"key\"), disambiguator: 0 }]","fn_type":"Safe","name":"<entry::VacantEntry<'a, K, V>>::key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"into_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"<entry::VacantEntry<'a, K, V>>::into_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::VacantEntry<'a, K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<entry::OccupiedEntry<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"key\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::OccupiedEntry<'a, K, V>>::key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"remove_entry\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::OccupiedEntry<'a, K, V>>::remove_entry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::OccupiedEntry<'a, K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::OccupiedEntry<'a, K, V>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"into_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::OccupiedEntry<'a, K, V>>::into_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::OccupiedEntry<'a, K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"entry\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<entry::OccupiedEntry<'a, K, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::IntoIter<K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::IntoIter<K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::IntoIter<K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::IntoIter<K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::IntoIter<K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Iter<'a, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Iter<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Iter<'a, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Iter<'a, K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Iter<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::IterMut<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::IterMut<'a, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::IterMut<'a, K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::IterMut<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Keys<'a, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Keys<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Keys<'a, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Keys<'a, K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Keys<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Values<'a, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Values<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Values<'a, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Values<'a, K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::Values<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::ValuesMut<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::ValuesMut<'a, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::ValuesMut<'a, K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::ValuesMut<'a, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Leaf<K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Leaf<K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Leaf<K, V> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Leaf<K, V> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Leaf<K, V> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Leaf<K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"key_slice\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Leaf<K, V>>::key_slice"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"is_singleton\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::is_singleton"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"has_entry\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::has_entry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"entry_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Branch<K, V>>::entry_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"child\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::child"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"child_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::child_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"exemplar\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::exemplar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"exemplar_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::exemplar_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_exemplar\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::get_exemplar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_exemplar_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::get_exemplar_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert_leaf\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Branch<K, V>>::insert_leaf"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert_branch\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Branch<K, V>>::insert_branch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clear_last\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Branch<K, V>>::clear_last"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"count\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::count"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Branch<K, V> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"get_exemplar\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V>>::get_exemplar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"get_exemplar_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V>>::get_exemplar_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"get_prefix_validated\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::get_prefix_validated"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"get_prefix\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::get_prefix"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"get_prefix_validated_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::get_prefix_validated_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"get_prefix_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::get_prefix_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"insert_with_graft_point\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::insert_with_graft_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"remove_validated\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::remove_validated"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"remove_prefix_validated\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::remove_prefix_validated"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"remove_prefix\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<node::Node<K, V>>::remove_prefix"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"count\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V>>::count"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<node::Node<K, V> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"actual\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::actual"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_or_any\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::get_or_any"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_or_any_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::get_or_any_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clear_last\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<sparse::Sparse<T>>::clear_last"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sparse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sparse::Sparse<T> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subtrie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<subtrie::SubTrie<'a, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subtrie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<subtrie::SubTrie<'a, K, V> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subtrie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<subtrie::SubTrie<'a, K, V>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subtrie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<subtrie::SubTrie<'a, K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subtrie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"iter_prefix\"), disambiguator: 0 }]","fn_type":"Safe","name":"<subtrie::SubTrie<'a, K, V>>::iter_prefix"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subtrie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"subtrie\"), disambiguator: 0 }]","fn_type":"Safe","name":"<subtrie::SubTrie<'a, K, V>>::subtrie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subtrie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"Safe","name":"<subtrie::SubTrie<'a, K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"subtrie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<subtrie::SubTrie<'a, K, V> as std::ops::Index<L>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<K, V> as std::iter::FromIterator<(K, V)>>::from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<K, V> as std::iter::Extend<(K, V)>>::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"keys\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::keys"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"values\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::values"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"values_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::values_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"iter_prefix\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::iter_prefix"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"iter_prefix_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::iter_prefix_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"subtrie\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::subtrie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"longest_common_prefix\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::longest_common_prefix"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"count\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::count"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"contains_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::contains_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<K, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"remove_prefix\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<K, V>>::remove_prefix"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"entry\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<K, V>>::entry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V> as std::ops::Index<&'a Q>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"index_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<trie::Trie<K, V> as std::ops::IndexMut<&'a Q>>::index_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[u8] as trie::Break>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"find_break\"), disambiguator: 0 }]","fn_type":"Safe","name":"<[u8] as trie::Break>::find_break"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'b [u8] as trie::Break>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"find_break\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'b [u8] as trie::Break>::find_break"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"iter_prefix_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<wrapper::BString, V>>::iter_prefix_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"iter_prefix_mut_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<wrapper::BString, V>>::iter_prefix_mut_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"subtrie_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<wrapper::BString, V>>::subtrie_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"contains_key_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<wrapper::BString, V>>::contains_key_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"get_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<wrapper::BString, V>>::get_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<wrapper::BString, V>>::get_mut_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"insert_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<wrapper::BString, V>>::insert_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"remove_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<wrapper::BString, V>>::remove_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"trie\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"remove_prefix_str\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<trie::Trie<wrapper::BString, V>>::remove_prefix_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"nybble_index\"), disambiguator: 0 }]","fn_type":"Safe","name":"qp_trie::util::nybble_index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"nybble_mismatch\"), disambiguator: 0 }]","fn_type":"Safe","name":"qp_trie::util::nybble_mismatch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"nybble_get_mismatch\"), disambiguator: 0 }]","fn_type":"Safe","name":"qp_trie::util::nybble_get_mismatch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"qp_trie::wrapper::<impl std::convert::From<wrapper::BString> for std::string::String>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::convert::From<std::string::String>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::convert::From<&'a str>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<wrapper::BString as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"borrow\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<wrapper::BString as std::borrow::Borrow<wrapper::BStr>>::borrow"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"borrow\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::borrow::Borrow<[u8]>>::borrow"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BString as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<wrapper::BString as trie::Break>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"find_break\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<wrapper::BString as trie::Break>::find_break"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a wrapper::BStr as std::convert::From<&'a str>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"to_owned\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::borrow::ToOwned>::to_owned"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"borrow\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::borrow::Borrow<[u8]>>::borrow"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"Safe","name":"<wrapper::BStr as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<wrapper::BStr as trie::Break>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"find_break\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<wrapper::BStr as trie::Break>::find_break"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"as_str\"), disambiguator: 0 }]","fn_type":"Safe","name":"qp_trie::wrapper::BStr::as_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"wrapper\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"as_ref\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"qp_trie::wrapper::<impl std::convert::AsRef<wrapper::BStr> for str>::as_ref"}
