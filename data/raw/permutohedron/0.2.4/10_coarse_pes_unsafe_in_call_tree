{"def_path":"[DisambiguatedDefPathData { data: Module(\"lexical\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next_permutation\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<[T] as lexical::LexicalPermutation>::next_permutation"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lexical\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"prev_permutation\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<[T] as lexical::LexicalPermutation>::prev_permutation"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<control::Control<B> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<control::Control<B> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"breaking\"), disambiguator: 0 }]","fn_type":"Safe","name":"<control::Control<B>>::breaking"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"break_value\"), disambiguator: 0 }]","fn_type":"Safe","name":"<control::Control<B>>::break_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"ControlFlow\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"should_break\"), disambiguator: 0 }]","fn_type":"Safe","name":"permutohedron::control::ControlFlow::should_break"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"continuing\"), disambiguator: 0 }]","fn_type":"Safe","name":"<() as control::ControlFlow>::continuing"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"continuing\"), disambiguator: 0 }]","fn_type":"Safe","name":"<control::Control<B> as control::ControlFlow>::continuing"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"should_break\"), disambiguator: 0 }]","fn_type":"Safe","name":"<control::Control<B> as control::ControlFlow>::should_break"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"continuing\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::result::Result<(), E> as control::ControlFlow>::continuing"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"control\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"should_break\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::result::Result<(), E> as control::ControlFlow>::should_break"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"heap_recursive\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"permutohedron::heap_recursive"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"heap_unrolled_\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"permutohedron::heap_unrolled_"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Heap<'a, Data, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Heap<'a, Data, T>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Heap<'a, Data, T>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reset\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Heap<'a, Data, T>>::reset"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next_permutation\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Heap<'a, Data, T>>::next_permutation"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Heap<'a, Data, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"factorial\"), disambiguator: 0 }]","fn_type":"Safe","name":"permutohedron::factorial"}
