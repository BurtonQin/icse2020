{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"multipeek\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::multipeek::MultiPeek<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"multipeek\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::multipeek::MultiPeek<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"multipeek\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"multipeek\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::multipeek::multipeek"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"multipeek\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reset_peek\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::multipeek::MultiPeek<I>>::reset_peek"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"multipeek\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"peek\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::multipeek::MultiPeek<I>>::peek"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"multipeek\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::multipeek::MultiPeek<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"multipeek\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::multipeek::MultiPeek<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 45 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Interleave<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Interleave<I, J> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"interleave\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::interleave"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Interleave<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Interleave<I, J> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 47 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::InterleaveShortest<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 46 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::InterleaveShortest<I, J> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"interleave_shortest\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::interleave_shortest"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::InterleaveShortest<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::InterleaveShortest<I, J> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 49 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"put_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::put_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"with_value\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I>>::with_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"into_parts\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I>>::into_parts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"put_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I>>::put_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"all\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as std::iter::Iterator>::all"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fold\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as std::iter::Iterator>::fold"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 51 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"put_back_n\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::put_back_n"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"put_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I>>::put_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 53 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Product<I, J> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 52 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Product<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cartesian_product\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::cartesian_product"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Product<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Product<I, J> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 54 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Batching<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Batching<I, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"batching\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::batching"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Batching<I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Batching<I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 56 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Step<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 55 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Step<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Step<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Step<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeCore<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next_with\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeCore<I, J>>::next_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeCore<I, J>>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Merge<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Merge<I, J> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::merge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Merge<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Merge<I, J> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeBy<I, J, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge_by_new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::merge_by_new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeBy<I, J, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeBy<I, J, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeBy<I, J, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 58 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::CoalesceCore<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 57 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::CoalesceCore<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"next_with\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::CoalesceCore<I>>::next_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::CoalesceCore<I>>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Coalesce<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Coalesce<I, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"coalesce\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::coalesce"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Coalesce<I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Coalesce<I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Dedup<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dedup\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::dedup"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Dedup<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Dedup<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Dedup<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"fold\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Dedup<I> as std::iter::Iterator>::fold"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::TakeWhileRef<'a, I, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"take_while_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::take_while_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::TakeWhileRef<'a, I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::TakeWhileRef<'a, I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 60 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::WhileSome<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 59 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::WhileSome<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"while_some\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::while_some"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::WhileSome<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::WhileSome<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 61 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::TupleCombinations<I, T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tuple_combinations\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::tuple_combinations"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::TupleCombinations<I, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 62 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple1Combination<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple1Combination<I> as std::convert::From<I>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple1Combination<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 67 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple2Combination<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 63 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple2Combination<I> as std::convert::From<I>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 64 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple2Combination<std::iter::Fuse<I>> as std::convert::From<I>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 65 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple2Combination<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 72 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple3Combination<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 68 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple3Combination<I> as std::convert::From<I>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 69 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple3Combination<std::iter::Fuse<I>> as std::convert::From<I>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 70 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple3Combination<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 77 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple4Combination<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 73 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple4Combination<I> as std::convert::From<I>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 74 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple4Combination<std::iter::Fuse<I>> as std::convert::From<I>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 75 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Tuple4Combination<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 78 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"is_done\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I>>::is_done"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"get_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I>>::get_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I> as std::ops::Index<usize>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Combinations<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"combinations\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::combinations"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Combinations<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 79 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::UniqueBy<I, V, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::UniqueBy<I, V, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unique_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::unique_by"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::UniqueBy<I, V, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::UniqueBy<I, V, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Unique<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Unique<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 80 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Unique<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Unique<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unique\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::unique"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 82 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 81 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I, J> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flatten\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::flatten"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 41 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 41 }, DisambiguatedDefPathData { data: ValueNs(\"fold\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I, J> as std::iter::Iterator>::fold"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I, J> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map_results\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::map_results"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MapResults<I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MapResults<I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"enumerate\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::enumerate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rev\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::rev"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zip\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::zip"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"chain\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::chain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cloned\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::cloned"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::fold"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"all\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::all"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"any\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::any"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"max\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"min\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::min"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"join\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::join"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sorted\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::sorted"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((G, H), X)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((G, H), X)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((G, H), X)> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((F, G, H), X)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((F, G, H), X)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((F, G, H), X)> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((E, F, G, H), X)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((E, F, G, H), X)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((E, F, G, H), X)> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((D, E, F, G, H), X)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((D, E, F, G, H), X)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((D, E, F, G, H), X)> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((C, D, E, F, G, H), X)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((C, D, E, F, G, H), X)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((C, D, E, F, G, H), X)> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((B, C, D, E, F, G, H), X)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((B, C, D, E, F, G, H), X)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<Iter, ((B, C, D, E, F, G, H), X)> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<cons_tuples_impl::ConsTuples<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cons_tuples_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cons_tuples\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::cons_tuples_impl::cons_tuples"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"diff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"diff_with\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::diff::diff_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new_format\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::format::new_format"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new_format_default\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::format::new_format_default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatWith<'a, I, F> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"format\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I>>::format"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::fmt::UpperExp>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::fmt::LowerExp>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::fmt::UpperHex>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::fmt::LowerHex>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::fmt::Octal>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::fmt::Binary>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I> as std::fmt::Pointer>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"call_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<F as groupbylazy::KeyFunction<A>>::call_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::groupbylazy::ChunkIndex::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"call_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::ChunkIndex as groupbylazy::KeyFunction<A>>::call_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"lookup_buffer\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::lookup_buffer"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next_element\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::next_element"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"step_buffering\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::step_buffering"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"push_next_group\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::push_next_group"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"step_current\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::step_current"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"group_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::group_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"drop_group\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::drop_group"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::groupbylazy::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupBy<K, I, F>>::step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"drop_group\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupBy<K, I, F>>::drop_group"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a groupbylazy::GroupBy<K, I, F> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Groups<'a, K, I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Group<'a, K, I, F> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Group<'a, K, I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new_chunks\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::groupbylazy::new_chunks"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::IntoChunks<I>>::step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"drop_group\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::IntoChunks<I>>::drop_group"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a groupbylazy::IntoChunks<I> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Chunks<'a, I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Chunk<'a, I> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Chunk<'a, I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersperse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<intersperse::Intersperse<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersperse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersperse\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::intersperse::intersperse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersperse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<intersperse::Intersperse<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersperse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<intersperse::Intersperse<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge_impl::HeadTail<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge_impl::HeadTail<I>>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge_impl::HeadTail<I>>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge_impl::HeadTail<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"heapify\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::kmerge_impl::heapify"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sift_down\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::kmerge_impl::sift_down"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"kmerge\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::kmerge_impl::kmerge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge_impl::KMerge<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge_impl::KMerge<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge_impl::KMerge<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"kmerge_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::kmerge_impl::kmerge_by"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge_impl::KMergeBy<I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge_impl::KMergeBy<I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<minmax::MinMaxResult<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<minmax::MinMaxResult<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<minmax::MinMaxResult<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<minmax::MinMaxResult<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_option\"), disambiguator: 0 }]","fn_type":"Safe","name":"<minmax::MinMaxResult<T>>::into_option"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"minmax_impl\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::minmax::minmax_impl"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<pad_tail::PadUsing<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pad_using\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::pad_tail::pad_using"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<pad_tail::PadUsing<I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<pad_tail::PadUsing<I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<pad_tail::PadUsing<I, F> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::iter::Peekable<I> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_take_while\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::peeking_take_while::peeking_take_while"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<peeking_take_while::PeekingTakeWhile<'a, I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<peeking_take_while::PeekingTakeWhile<'a, I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::slice::Iter<'a, T> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::str::Chars<'a> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::str::CharIndices<'a> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::str::Bytes<'a> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::option::Iter<'a, T> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::result::Iter<'a, T> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::iter::Empty<T> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::collections::linked_list::Iter<'a, T> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::collections::vec_deque::Iter<'a, T> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"peeking_take_while\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::iter::Rev<I> as peeking_take_while::PeekingNext>::peeking_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rciter\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::rciter_impl::rciter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<rciter_impl::RcIter<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<rciter_impl::RcIter<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<rciter_impl::RcIter<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<rciter_impl::RcIter<I> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a rciter_impl::RcIter<I> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"repeatn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"repeat_n\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::repeatn::repeat_n"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"repeatn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<repeatn::RepeatN<A>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"repeatn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<repeatn::RepeatN<A> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"repeatn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<repeatn::RepeatN<A> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"repeatn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<repeatn::RepeatN<A> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_scalar\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::add_scalar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sub_scalar\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::sub_scalar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"max\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"min\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::min"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::RepeatCall<F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"repeat_call\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::sources::repeat_call"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::RepeatCall<F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::RepeatCall<F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unfold\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::sources::unfold"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Unfold<St, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Unfold<St, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Unfold<St, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Unfold<St, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Iterate<St, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Iterate<St, F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Iterate<St, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Iterate<St, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iterate\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::sources::iterate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tee\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::tee::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tee\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tee::Tee<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tee\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tee::Tee<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tuple_impl::TupleBuffer<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tuple_impl::TupleBuffer<T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tuple_impl::TupleBuffer<T> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tuples\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::tuple_impl::tuples"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tuple_impl::Tuples<I, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"into_buffer\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tuple_impl::Tuples<I, T>>::into_buffer"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tuple_windows\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::tuple_impl::tuple_windows"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tuple_impl::TupleWindows<I, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"collect_from_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A,) as tuple_impl::TupleCollect>::collect_from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"collect_from_iter_no_buf\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A,) as tuple_impl::TupleCollect>::collect_from_iter_no_buf"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"num_items\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A,) as tuple_impl::TupleCollect>::num_items"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"left_shift_push\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A,) as tuple_impl::TupleCollect>::left_shift_push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"collect_from_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A) as tuple_impl::TupleCollect>::collect_from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"collect_from_iter_no_buf\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A) as tuple_impl::TupleCollect>::collect_from_iter_no_buf"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"num_items\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A) as tuple_impl::TupleCollect>::num_items"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"left_shift_push\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A) as tuple_impl::TupleCollect>::left_shift_push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"collect_from_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A, A) as tuple_impl::TupleCollect>::collect_from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"collect_from_iter_no_buf\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A, A) as tuple_impl::TupleCollect>::collect_from_iter_no_buf"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"num_items\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A, A) as tuple_impl::TupleCollect>::num_items"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"left_shift_push\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A, A) as tuple_impl::TupleCollect>::left_shift_push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"collect_from_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A, A, A) as tuple_impl::TupleCollect>::collect_from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"collect_from_iter_no_buf\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A, A, A) as tuple_impl::TupleCollect>::collect_from_iter_no_buf"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"num_items\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A, A, A) as tuple_impl::TupleCollect>::num_items"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tuple_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"left_shift_push\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, A, A, A) as tuple_impl::TupleCollect>::left_shift_push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"with_position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_position\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::with_position::with_position"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"with_position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<with_position::Position<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"with_position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<with_position::Position<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"with_position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<with_position::Position<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"with_position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<with_position::Position<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"with_position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_inner\"), disambiguator: 0 }]","fn_type":"Safe","name":"<with_position::Position<T>>::into_inner"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"with_position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<with_position::WithPosition<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"with_position\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<with_position::WithPosition<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_eq_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_eq_impl::ZipEq<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_eq_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zip_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::zip_eq_impl::zip_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_eq_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_eq_impl::ZipEq<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_eq_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_eq_impl::ZipEq<I, J> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::ZipLongest<T, U> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zip_longest\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::zip_longest::zip_longest"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::ZipLongest<T, U> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::ZipLongest<T, U> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::ZipLongest<T, U> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::EitherOrBoth<A, B> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<zip_longest::EitherOrBoth<A, B> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<zip_longest::EitherOrBoth<A, B> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::EitherOrBoth<A, B> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::EitherOrBoth<A, B> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"multizip\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::multizip"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(<A as std::iter::IntoIterator>::IntoIter,)> as std::convert::From<(A,)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A,)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A,)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(<A as std::iter::IntoIterator>::IntoIter, <B as std::iter::IntoIterator>::IntoIter)> as std::convert::From<(A, B)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(<A as std::iter::IntoIterator>::IntoIter, <B as std::iter::IntoIterator>::IntoIter, <C as std::iter::IntoIterator>::IntoIter)> as std::convert::From<(A, B, C)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(<A as std::iter::IntoIterator>::IntoIter, <B as std::iter::IntoIterator>::IntoIter, <C as std::iter::IntoIterator>::IntoIter, <D as std::iter::IntoIterator>::IntoIter)> as std::convert::From<(A, B, C, D)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(<A as std::iter::IntoIterator>::IntoIter, <B as std::iter::IntoIterator>::IntoIter, <C as std::iter::IntoIterator>::IntoIter, <D as std::iter::IntoIterator>::IntoIter, <E as std::iter::IntoIterator>::IntoIter)> as std::convert::From<(A, B, C, D, E)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(<A as std::iter::IntoIterator>::IntoIter, <B as std::iter::IntoIterator>::IntoIter, <C as std::iter::IntoIterator>::IntoIter, <D as std::iter::IntoIterator>::IntoIter, <E as std::iter::IntoIterator>::IntoIter, <F as std::iter::IntoIterator>::IntoIter)> as std::convert::From<(A, B, C, D, E, F)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(<A as std::iter::IntoIterator>::IntoIter, <B as std::iter::IntoIterator>::IntoIter, <C as std::iter::IntoIterator>::IntoIter, <D as std::iter::IntoIterator>::IntoIter, <E as std::iter::IntoIterator>::IntoIter, <F as std::iter::IntoIterator>::IntoIter, <G as std::iter::IntoIterator>::IntoIter)> as std::convert::From<(A, B, C, D, E, F, G)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(<A as std::iter::IntoIterator>::IntoIter, <B as std::iter::IntoIterator>::IntoIter, <C as std::iter::IntoIterator>::IntoIter, <D as std::iter::IntoIterator>::IntoIter, <E as std::iter::IntoIterator>::IntoIter, <F as std::iter::IntoIterator>::IntoIter, <G as std::iter::IntoIterator>::IntoIter, <H as std::iter::IntoIterator>::IntoIter)> as std::convert::From<(A, B, C, D, E, F, G, H)>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G, H)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G, H)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"interleave\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::interleave"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"interleave_shortest\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::interleave_shortest"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersperse\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::intersperse"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zip_longest\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::zip_longest"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zip_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::zip_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"batching\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::batching"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"group_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::group_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"group_by_lazy\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::group_by_lazy"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"chunks\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::chunks"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"chunks_lazy\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::chunks_lazy"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tuple_windows\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::tuple_windows"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tuples\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::tuples"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tee\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::tee"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::step"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map_results\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::map_results"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::merge"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::merge_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"kmerge\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::kmerge"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"kmerge_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::kmerge_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cartesian_product\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::cartesian_product"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"coalesce\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::coalesce"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dedup\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::dedup"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unique\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::unique"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unique_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::unique_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"peeking_take_while\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::peeking_take_while"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"take_while_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::take_while_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"while_some\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::while_some"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tuple_combinations\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::tuple_combinations"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"combinations\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::combinations"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pad_using\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::pad_using"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flatten\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::flatten"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_position\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::with_position"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::next_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_position\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::find_position"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dropping\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::dropping"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dropping_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::dropping_back"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"collect_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::collect_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"set_from\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::set_from"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"join\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::join"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"format\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::format"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"format_default\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::format_default"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"format_with\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::format_with"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold_results\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::fold_results"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold_options\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::fold_options"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold1\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::fold1"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold_while\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::fold_while"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sorted\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::sorted"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sorted_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::sorted_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"partition_map\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::partition_map"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"minmax\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::minmax"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"minmax_by_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::minmax_by_key"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"minmax_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::minmax_by"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"equal\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::equal"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"assert_equal\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::assert_equal"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"partition\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::partition"}
