{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 54 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Interleave<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Interleave<I, J>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Interleave<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 55 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::InterleaveShortest<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::InterleaveShortest<I, J>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::InterleaveShortest<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::InterleaveShortest<I, J> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 56 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"with_value\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I>>::with_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"into_parts\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I>>::into_parts"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"put_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I>>::put_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBack<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"put_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I>>::put_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::PutBackN<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 57 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Product<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Product<I, J>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Product<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Product<I, J> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 58 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Batching<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Batching<I, F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Batching<I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Batching<I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 59 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::GroupBy<K, I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::GroupBy<K, I, F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::GroupBy<K, I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::GroupBy<K, I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 60 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Step<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Step<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Step<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Step<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeCore<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"next_with\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeCore<I, J>>::next_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeCore<I, J>>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Merge<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge_new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::merge_new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Merge<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Merge<I, J> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge_by_new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::merge_by_new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeBy<I, J, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeBy<I, J, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MergeBy<I, J, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 61 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MultiPeek<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MultiPeek<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"peek\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MultiPeek<I>>::peek"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MultiPeek<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MultiPeek<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 62 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::CoalesceCore<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"next_with\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::CoalesceCore<I>>::next_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::CoalesceCore<I>>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Coalesce<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Coalesce<I, F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Coalesce<I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Coalesce<I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Dedup<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Dedup<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Dedup<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Dedup<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MendSlices<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MendSlices<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MendSlices<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::MendSlices<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::TakeWhileRef<'a, I, F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::TakeWhileRef<'a, I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::TakeWhileRef<'a, I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 63 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::WhileSome<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::WhileSome<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::WhileSome<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 40 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::WhileSome<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 64 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Combinations<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 41 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Combinations<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Combinations<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 42 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Combinations<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"is_done\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I>>::is_done"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 43 }, DisambiguatedDefPathData { data: ValueNs(\"get_next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I>>::get_next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 44 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::LazyBuffer<I> as std::ops::Index<usize>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 45 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::CombinationsN<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 46 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::CombinationsN<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 65 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::UniqueBy<I, V, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 47 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::UniqueBy<I, V, F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::UniqueBy<I, V, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 48 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::UniqueBy<I, V, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 49 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Unique<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 49 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Unique<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 66 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Unique<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unique\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::adaptors::unique"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 50 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"identity\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I>>::new::identity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 51 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 52 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"adaptors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 53 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<adaptors::Flatten<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"enumerate\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::enumerate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rev\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::rev"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zip\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::zip"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zip_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::zip_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"chain\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::chain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cloned\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::cloned"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::fold"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"all\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::all"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"any\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::any"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"max\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"min\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::min"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"interleave\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::interleave"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::merge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"kmerge\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::kmerge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"join\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::join"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sorted\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::sorted"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"free\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rciter\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::free::rciter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new_format\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::format::new_format"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new_format_default\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::format::new_format_default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::Format<'a, I, F> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"format\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I>>::format"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::fmt::UpperExp>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::fmt::LowerExp>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::fmt::UpperHex>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::fmt::LowerHex>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::fmt::Octal>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::fmt::Binary>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"format\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<format::FormatDefault<'a, I> as std::fmt::Pointer>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"call_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<F as groupbylazy::KeyFunction<A>>::call_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::groupbylazy::ChunkIndex::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"call_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::ChunkIndex as groupbylazy::KeyFunction<A>>::call_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"lookup_buffer\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::lookup_buffer"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next_element\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::next_element"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"step_buffering\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::step_buffering"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"push_next_group\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::push_next_group"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"step_current\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::step_current"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"group_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::group_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"drop_group\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupInner<K, I, F>>::drop_group"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::groupbylazy::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupByLazy<K, I, F>>::step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"drop_group\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::GroupByLazy<K, I, F>>::drop_group"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a groupbylazy::GroupByLazy<K, I, F> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Groups<'a, K, I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Group<'a, K, I, F> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Group<'a, K, I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new_chunks\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::groupbylazy::new_chunks"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::ChunksLazy<I>>::step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"drop_group\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::ChunksLazy<I>>::drop_group"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a groupbylazy::ChunksLazy<I> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Chunks<'a, I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Chunk<'a, I> as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"groupbylazy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<groupbylazy::Chunk<'a, I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersperse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<intersperse::Intersperse<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersperse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<intersperse::Intersperse<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersperse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<intersperse::Intersperse<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersperse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<intersperse::Intersperse<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"islice\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<islice::ISlice<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"islice\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<islice::ISlice<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"islice\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<islice::ISlice<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"islice\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<islice::ISlice<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"diff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"diff_with\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::diff::diff_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I>>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I>>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I> as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I> as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I> as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I> as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::HeadTail<I> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"heapify\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::kmerge::heapify"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sift_down\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::kmerge::sift_down"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"kmerge_new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::kmerge::kmerge_new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::KMerge<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::KMerge<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"kmerge\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<kmerge::KMerge<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linspace\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<linspace::Linspace<F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linspace\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<linspace::Linspace<F> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linspace\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<linspace::Linspace<F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linspace\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<linspace::Linspace<F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linspace\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<linspace::Linspace<F> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linspace\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"linspace\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::linspace::linspace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<minmax::MinMaxResult<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<minmax::MinMaxResult<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<minmax::MinMaxResult<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_option\"), disambiguator: 0 }]","fn_type":"Safe","name":"<minmax::MinMaxResult<T>>::into_option"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"minmax\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"minmax_impl\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::minmax::minmax_impl"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<() as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(L,) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(I, J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(H, I, J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(G, H, I, J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(F, G, H, I, J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(E, F, G, H, I, J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(D, E, F, G, H, I, J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(C, D, E, F, G, H, I, J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(B, C, D, E, F, G, H, I, J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"<(A, B, C, D, E, F, G, H, I, J, K, L) as misc::AppendTuple<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<misc::FlatTuples<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<misc::FlatTuples<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<misc::FlatTuples<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<misc::FlatTuples<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<misc::FlatTuples<I> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"GenericRange\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"start\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::misc::GenericRange::start"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"GenericRange\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"end\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::misc::GenericRange::end"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"start\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::ops::RangeFrom<usize> as misc::GenericRange>::start"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"end\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::ops::RangeTo<usize> as misc::GenericRange>::end"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"start\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::ops::Range<usize> as misc::GenericRange>::start"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"end\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::ops::Range<usize> as misc::GenericRange>::end"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"to_float\"), disambiguator: 0 }]","fn_type":"Safe","name":"<usize as misc::ToFloat<f32>>::to_float"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"to_float\"), disambiguator: 0 }]","fn_type":"Safe","name":"<usize as misc::ToFloat<f64>>::to_float"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"mend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a [T] as misc::MendSlice>::mend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"mend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a mut [T] as misc::MendSlice>::mend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"mend\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<&'a str as misc::MendSlice>::mend"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a [T] as misc::Slice>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"misc\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a mut [T] as misc::Slice>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<pad_tail::PadUsing<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<pad_tail::PadUsing<I, F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<pad_tail::PadUsing<I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<pad_tail::PadUsing<I, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pad_tail\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<pad_tail::PadUsing<I, F> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<rciter::RcIter<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<rciter::RcIter<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<rciter::RcIter<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<rciter::RcIter<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<rciter::RcIter<I> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rciter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"<&'a rciter::RcIter<I> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"repeatn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<repeatn::RepeatN<A>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"repeatn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<repeatn::RepeatN<A> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"repeatn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<repeatn::RepeatN<A> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"repeatn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<repeatn::RepeatN<A> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::RepeatCall<F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::RepeatCall<F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::RepeatCall<F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::RepeatCall<F> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Unfold<St, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Unfold<St, F>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Unfold<St, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sources\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<sources::Unfold<St, F> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_scalar\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::add_scalar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sub_scalar\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::sub_scalar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"mul_scalar\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::mul_scalar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"max\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"size_hint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"min\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::size_hint::min"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"div_rem\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::stride::div_rem"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"from_slice\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::Stride<'a, A>>::from_slice"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"from_stride\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::Stride<'a, A>>::from_stride"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"swap_ends\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::Stride<'a, A>>::swap_ends"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stride::Stride<'a, A>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::Stride<'a, A>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::Stride<'a, A> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stride::Stride<'a, A> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::Stride<'a, A> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::Stride<'a, A> as std::ops::Index<usize>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::Stride<'a, A> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stride::Stride<'a, A> as misc::Slice>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"from_slice\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A>>::from_slice"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"from_stride\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A>>::from_stride"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"swap_ends\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A>>::swap_ends"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stride::StrideMut<'a, A>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stride::StrideMut<'a, A> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A> as std::ops::Index<usize>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stride::StrideMut<'a, A> as misc::Slice>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<stride::Stride<'a, A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"stride\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"index_mut\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<stride::StrideMut<'a, A> as std::ops::IndexMut<usize>>::index_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tee\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::tee::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tee\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tee::Tee<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tee\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tee::Tee<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_eq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_eq::ZipEq<I, J> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_eq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::zip_eq::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_eq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_eq::ZipEq<I, J> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_eq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_eq::ZipEq<I, J> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::ZipLongest<T, U> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::ZipLongest<T, U>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::ZipLongest<T, U> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::ZipLongest<T, U> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::ZipLongest<T, U> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::EitherOrBoth<A, B> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<zip_longest::EitherOrBoth<A, B> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<zip_longest::EitherOrBoth<A, B> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::EitherOrBoth<A, B> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zip_longest\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zip_longest::EitherOrBoth<A, B> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"into_iterator_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::<impl misc::IntoIteratorTuple for (A,)>::into_iterator_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A,)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A,)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"into_iterator_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::<impl misc::IntoIteratorTuple for (A, B)>::into_iterator_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"into_iterator_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::<impl misc::IntoIteratorTuple for (A, B, C)>::into_iterator_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"into_iterator_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::<impl misc::IntoIteratorTuple for (A, B, C, D)>::into_iterator_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"into_iterator_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::<impl misc::IntoIteratorTuple for (A, B, C, D, E)>::into_iterator_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"into_iterator_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::<impl misc::IntoIteratorTuple for (A, B, C, D, E, F)>::into_iterator_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"into_iterator_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::<impl misc::IntoIteratorTuple for (A, B, C, D, E, F, G)>::into_iterator_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"into_iterator_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::<impl misc::IntoIteratorTuple for (A, B, C, D, E, F, G, H)>::into_iterator_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G, H)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G, H)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"into_iterator_tuple\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::ziptuple::<impl misc::IntoIteratorTuple for (A, B, C, D, E, F, G, H, I)>::into_iterator_tuple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G, H, I)> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ziptuple\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ziptuple::Zip<(A, B, C, D, E, F, G, H, I)> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zipslices\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zipslices::ZipSlices<T, U> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zipslices\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zipslices::ZipSlices<&'a [A], &'b [B]>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zipslices\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_slices\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zipslices::ZipSlices<T, U>>::from_slices"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zipslices\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<zipslices::ZipSlices<T, U> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zipslices\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zipslices::ZipSlices<T, U> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zipslices\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<zipslices::ZipSlices<T, U> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"zipslices\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<zipslices::ZipSlices<T, U> as misc::Slice>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"interleave\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::interleave"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"interleave_shortest\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::interleave_shortest"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersperse\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::intersperse"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zip_longest\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::zip_longest"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"zip_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::zip_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"batching\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::batching"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"group_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::group_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"group_by_lazy\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::group_by_lazy"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"chunks_lazy\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::chunks_lazy"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"tee\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::tee"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"slice\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::slice"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_rc\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::into_rc"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::step"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::merge"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::merge_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"kmerge\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::kmerge"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cartesian_product\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::cartesian_product"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"multipeek\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::multipeek"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"coalesce\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::coalesce"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dedup\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::dedup"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unique\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::unique"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"unique_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::unique_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"mend_slices\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::mend_slices"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"take_while_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::take_while_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"while_some\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::while_some"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"combinations\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::combinations"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"combinations_n\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::combinations_n"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pad_using\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::pad_using"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flatten\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::flatten"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map_fn\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::map_fn"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_position\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::find_position"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dropn\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::dropn"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dropping\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::dropping"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dropping_back\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::dropping_back"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"collect_vec\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::collect_vec"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"set_from\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::set_from"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"join\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::join"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"format_default\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::format_default"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"format\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::format"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold_results\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::fold_results"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold_options\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::fold_options"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold1\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::fold1"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold_while\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::fold_while"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::is_empty_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sorted\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::sorted"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sorted_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::sorted_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sort_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::sort_by"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"partition_map\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::partition_map"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"minmax\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::minmax"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"minmax_by_key\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::minmax_by_key"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Itertools\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"minmax_by\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::Itertools::minmax_by"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"equal\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::equal"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"assert_equal\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::assert_equal"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"partition\"), disambiguator: 0 }]","fn_type":"Safe","name":"itertools::partition"}
