{"def_path":"[DisambiguatedDefPathData { data: Module(\"base\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"base::DoubleBase::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"base\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_initial_base\"), disambiguator: 0 }]","has_unsafe":false,"name":"<base::DoubleBase as base::BitBase>::get_initial_base"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"base\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_base\"), disambiguator: 0 }]","has_unsafe":false,"name":"<base::DoubleBase as base::BitBase>::get_base"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"base\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_max\"), disambiguator: 0 }]","has_unsafe":true,"name":"<base::DoubleBase as base::BitBase>::get_max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"base\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_bits\"), disambiguator: 0 }]","has_unsafe":false,"name":"<base::DoubleBase as base::BitBase>::get_bits"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"base\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"interval\"), disambiguator: 0 }]","has_unsafe":true,"name":"<base::DoubleBase as base::BitBase>::interval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::LSEQStrategy as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<strategy::LSEQStrategy as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"random\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::LSEQStrategy::random"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<lseq::Ident<R> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<lseq::Ident<R> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<lseq::Ident<R> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<lseq::Ident<R> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<lseq::Ident<R> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<lseq::Ident<R>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"debug_base\"), disambiguator: 0 }]","has_unsafe":true,"name":"<lseq::Ident<R>>::debug_base"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<lseq::Ident<R> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<lseq::Ident<R> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<lseq::LSEQGenerator<B>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"get_strategy\"), disambiguator: 0 }]","has_unsafe":false,"name":"<lseq::LSEQGenerator<B>>::get_strategy"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ensure_strategy\"), disambiguator: 0 }]","has_unsafe":false,"name":"<lseq::LSEQGenerator<B>>::ensure_strategy"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"lseq\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"generate\"), disambiguator: 0 }]","has_unsafe":true,"name":"<lseq::LSEQGenerator<B> as lseq::IdentGenerator<R>>::generate"}
