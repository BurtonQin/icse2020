{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rand_iter\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<T as Rando>::rand_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<RandIter<'coll, Collection, Mem, Rng> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<RandIter<'coll, Collection, Mem, Rng> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_rng\"), disambiguator: 0 }]","fn_type":"Safe","name":"<RandIter<'coll, Collection, Mem, Rng>>::with_rng"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_memory\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<RandIter<'coll, Collection, Mem, Rng>>::with_memory"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<RandIter<'coll, Collection, Mem, Rng> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"choose_key\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rando::choose_key"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<smallvec::SmallVec<A> as Memory<K>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<smallvec::SmallVec<A> as Memory<K>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<smallvec::SmallVec<A> as Memory<K>>::push"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::vec::Vec<K> as Memory<K>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::vec::Vec<K> as Memory<K>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::vec::Vec<K> as Memory<K>>::push"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::collections::BTreeSet<K> as Memory<K>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::collections::BTreeSet<K> as Memory<K>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::collections::BTreeSet<K> as Memory<K>>::push"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"assert_eq_up_to_order\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rando::assert_eq_up_to_order"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"assert_eq_up_to_order\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"count\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"rando::assert_eq_up_to_order::count"}
