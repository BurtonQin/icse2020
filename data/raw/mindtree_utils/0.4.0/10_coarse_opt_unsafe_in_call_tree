{"def_path":"[DisambiguatedDefPathData { data: Module(\"epsilon\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"epsilon\"), disambiguator: 0 }]","fn_type":"Safe","name":"<f32 as epsilon::Epsilon>::epsilon"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"epsilon\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"epsilon\"), disambiguator: 0 }]","fn_type":"Safe","name":"<f64 as epsilon::Epsilon>::epsilon"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"epsilon\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"epsilon\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::epsilon::epsilon"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"factorisation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_factor\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::factorisation::is_factor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"factorisation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"are_any_factors\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::factorisation::are_any_factors"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"factorisation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"are_all_factors\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::factorisation::are_all_factors"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"factorisation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_prime\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::factorisation::is_prime"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"factorisation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lowest_non_one\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::factorisation::lowest_non_one"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"factorisation\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_all_factors\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::factorisation::get_all_factors"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"fps\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<fps::Fps as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"fps\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"utils::fps::Fps::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"fps\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"high_priority\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::fps::Fps::high_priority"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"fps\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"frame_ns\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::fps::Fps::frame_ns"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"fps\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_dt_ns\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::fps::Fps::get_dt_ns"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"fps\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ns_to_secs\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::fps::ns_to_secs"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"fps\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<fps::Fps as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"sample_on\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"SampleOn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sample_on\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::iter::sample_on::SampleOn::sample_on"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"sample_on\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"infinite\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::sample_on::Items<A, B>>::infinite"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"sample_on\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<iter::sample_on::Items<A, B> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"math\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clamp\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::math::clamp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"math\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmod\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::math::fmod"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"math\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"in_range\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::math::in_range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"math\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lerp\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::math::lerp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"math\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map_range\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::math::map_range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"math\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remainder\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::math::remainder"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"math\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"modulo\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::math::modulo"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"math\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"wrap\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::math::wrap"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"math\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sigmoid\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::math::sigmoid"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"noise_walk\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"noise_walk\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::noise_walk::noise_walk"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"noise_walk\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"grad1\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::noise_walk::grad1"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"noise_walk\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_perm_val\"), disambiguator: 0 }]","fn_type":"Safe","name":"utils::noise_walk::get_perm_val"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"take_only\"), disambiguator: 0 }]","fn_type":"Safe","name":"<std::vec::Vec<T> as vec::TakeOnly<T>>::take_only"}
