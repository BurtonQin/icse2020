{"def_path":"[DisambiguatedDefPathData { data: Module(\"command\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_str\"), disambiguator: 0 }]","fn_type":"Safe","name":"<command::Command as std::str::FromStr>::from_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cow_appender\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::cow_appender::CowAppender::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cow_appender\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::cow_appender::CowAppender::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cow_appender\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::cow_appender::CowAppender::push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cow_appender\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_inner\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::cow_appender::CowAppender::into_inner"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex_flags::RegexFlag as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex_flags::RegexFlag as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex_flags::RegexFlag as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex_flags::RegexFlag as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex_flags::RegexFlag as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex_flags::RegexFlag as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex_flags::RegexFlags as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex_flags::RegexFlags as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex_flags::RegexFlags as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex_flags::RegexFlags as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex_flags::RegexFlags as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"apply\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::regex_flags::RegexFlags::apply"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_global\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::regex_flags::RegexFlags::is_global"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<regex_flags::RegexFlags as std::convert::From<I>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"regex_flags\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from_str\"), disambiguator: 0 }]","fn_type":"Safe","name":"<regex_flags::RegexFlags as std::str::FromStr>::from_str"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<splitting::ReplaceData<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<splitting::ReplaceData<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<splitting::ReplaceData<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"build_regex\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"sedregex::splitting::ReplaceData::build_regex"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"split_for_replace\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::splitting::split_for_replace"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting_iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"split_escape\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::splitting_iter::split_escape"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting_iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_previous_char\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::splitting_iter::get_previous_char"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting_iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_at\"), disambiguator: 0 }]","fn_type":"Safe","name":"sedregex::splitting_iter::find_at"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting_iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"<splitting_iter::SlashSplitIter<'a> as std::convert::From<&'a str>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"splitting_iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<splitting_iter::SlashSplitIter<'a> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ErrorKind as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ErrorKind as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ErrorKind as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"find_and_replace\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"sedregex::find_and_replace"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"regex_cow\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"sedregex::regex_cow"}
