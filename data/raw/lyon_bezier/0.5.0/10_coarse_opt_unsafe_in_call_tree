{"def_path":"[DisambiguatedDefPathData { data: Module(\"flatten_cubic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"flatten_cubic::CubicFlatteningIter::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"flatten_cubic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<flatten_cubic::CubicFlatteningIter as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"flatten_cubic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flatten_cubic_bezier\"), disambiguator: 0 }]","has_unsafe":false,"name":"flatten_cubic::flatten_cubic_bezier"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"flatten_cubic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flatten_cubic_no_inflection\"), disambiguator: 0 }]","has_unsafe":false,"name":"flatten_cubic::flatten_cubic_no_inflection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"flatten_cubic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"no_inflection_flattening_step\"), disambiguator: 0 }]","has_unsafe":false,"name":"flatten_cubic::no_inflection_flattening_step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"flatten_cubic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_cubic_bezier_inflection_points\"), disambiguator: 0 }]","has_unsafe":false,"name":"flatten_cubic::find_cubic_bezier_inflection_points"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"flatten_cubic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_cubic_bezier_inflection_points\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"in_range\"), disambiguator: 0 }]","has_unsafe":false,"name":"flatten_cubic::find_cubic_bezier_inflection_points::in_range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cubic_to_quadratic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cubic_to_quadratic\"), disambiguator: 0 }]","has_unsafe":false,"name":"cubic_to_quadratic::cubic_to_quadratic"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cubic_to_quadratic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"mid_point_approximation\"), disambiguator: 0 }]","has_unsafe":false,"name":"cubic_to_quadratic::mid_point_approximation"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cubic_to_quadratic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"single_curve_approximation\"), disambiguator: 0 }]","has_unsafe":false,"name":"cubic_to_quadratic::single_curve_approximation"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cubic_to_quadratic\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"line_intersection\"), disambiguator: 0 }]","has_unsafe":false,"name":"cubic_to_quadratic::line_intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"up_to_two\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<up_to_two::UpToTwo<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"up_to_two\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<up_to_two::UpToTwo<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"up_to_two\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<up_to_two::UpToTwo<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"up_to_two\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<up_to_two::UpToTwo<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"up_to_two\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<up_to_two::UpToTwo<T>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"up_to_two\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"<up_to_two::UpToTwo<T>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"up_to_two\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"first\"), disambiguator: 0 }]","has_unsafe":false,"name":"<up_to_two::UpToTwo<T>>::first"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"up_to_two\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"second\"), disambiguator: 0 }]","has_unsafe":false,"name":"<up_to_two::UpToTwo<T>>::second"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"up_to_two\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pop\"), disambiguator: 0 }]","has_unsafe":false,"name":"<up_to_two::UpToTwo<T>>::pop"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<QuadraticBezierSegment as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<QuadraticBezierSegment as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sample\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::sample"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sample_x\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::sample_x"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"sample_y\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::sample_y"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flip\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::flip"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_y_maximum\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::find_y_maximum"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_y_inflection\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::find_y_inflection"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::split"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"before_split\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::before_split"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"after_split\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::after_split"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_cubic\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::to_cubic"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flattening_step\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::flattening_step"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flattened_for_each\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::flattened_for_each"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flattening_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::flattening_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"compute_length\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticBezierSegment::compute_length"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"QuadraticFlatteningIter::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<QuadraticFlatteningIter as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<CubicBezierSegment as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<CubicBezierSegment as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"sample\"), disambiguator: 0 }]","has_unsafe":false,"name":"CubicBezierSegment::sample"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"split\"), disambiguator: 0 }]","has_unsafe":false,"name":"CubicBezierSegment::split"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"before_split\"), disambiguator: 0 }]","has_unsafe":false,"name":"CubicBezierSegment::before_split"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"after_split\"), disambiguator: 0 }]","has_unsafe":false,"name":"CubicBezierSegment::after_split"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"flattening_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"CubicBezierSegment::flattening_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"flattened_for_each\"), disambiguator: 0 }]","has_unsafe":false,"name":"CubicBezierSegment::flattened_for_each"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"compute_length\"), disambiguator: 0 }]","has_unsafe":false,"name":"CubicBezierSegment::compute_length"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"find_inflection_points\"), disambiguator: 0 }]","has_unsafe":false,"name":"CubicBezierSegment::find_inflection_points"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"vec2_length\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2_length"}
