{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<VarToken as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<VarToken as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<VarToken as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","fn_type":"Safe","name":"<VarToken as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<VarToken as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"Safe","name":"<VarToken as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<LinExpr as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Solution as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"on_assigned\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::constraint::Constraint::on_assigned"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"on_updated\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::constraint::Constraint::on_updated"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"alldifferent\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::constraint::alldifferent::AllDifferent::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"alldifferent\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"vars\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constraint::alldifferent::AllDifferent as constraint::Constraint>::vars"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"alldifferent\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"on_assigned\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<constraint::alldifferent::AllDifferent as constraint::Constraint>::on_assigned"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"alldifferent\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"on_updated\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<constraint::alldifferent::AllDifferent as constraint::Constraint>::on_updated"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"alldifferent\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"substitute\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constraint::alldifferent::AllDifferent as constraint::Constraint>::substitute"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"equality\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::constraint::equality::Equality::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"equality\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"vars\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constraint::equality::Equality as constraint::Constraint>::vars"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"equality\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"on_assigned\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<constraint::equality::Equality as constraint::Constraint>::on_assigned"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"equality\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"on_updated\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<constraint::equality::Equality as constraint::Constraint>::on_updated"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"equality\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"substitute\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constraint::equality::Equality as constraint::Constraint>::substitute"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unify\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::constraint::unify::Unify::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unify\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"vars\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constraint::unify::Unify as constraint::Constraint>::vars"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unify\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"on_updated\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<constraint::unify::Unify as constraint::Constraint>::on_updated"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"constraint\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unify\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"substitute\"), disambiguator: 0 }]","fn_type":"Safe","name":"<constraint::unify::Unify as constraint::Constraint>::substitute"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_coef\"), disambiguator: 0 }]","fn_type":"Safe","name":"<i32 as linexpr::IntoCoef>::into_coef"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"into_coef\"), disambiguator: 0 }]","fn_type":"Safe","name":"<num_rational::Ratio<i32> as linexpr::IntoCoef>::into_coef"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::convert::From<T> for LinExpr>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::convert::From<VarToken> for LinExpr>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Neg for VarToken>::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add<T> for VarToken>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add<VarToken> for i32>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add<VarToken> for num_rational::Ratio<i32>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<i32> for VarToken>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<VarToken> for i32>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<num_rational::Ratio<i32>> for VarToken>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<VarToken> for num_rational::Ratio<i32>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Mul<T> for VarToken>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Mul<VarToken> for i32>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Mul<VarToken> for num_rational::Ratio<i32>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add for VarToken>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub for VarToken>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Neg for LinExpr>::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add<T> for LinExpr>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add<LinExpr> for i32>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add<LinExpr> for num_rational::Ratio<i32>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<i32> for LinExpr>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<LinExpr> for i32>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<num_rational::Ratio<i32>> for LinExpr>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<LinExpr> for num_rational::Ratio<i32>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Mul<T> for LinExpr>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Mul<LinExpr> for i32>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Mul<LinExpr> for num_rational::Ratio<i32>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add<VarToken> for LinExpr>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add<LinExpr> for VarToken>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<VarToken> for LinExpr>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub<LinExpr> for VarToken>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Add for LinExpr>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"linexpr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::linexpr::<impl std::ops::Sub for LinExpr>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<puzzle::Candidates as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<puzzle::Candidates as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<puzzle::Candidates as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<puzzle::Candidates as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<puzzle::Candidates as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<puzzle::VarState as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<puzzle::VarState as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<puzzle::PuzzleSearch<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Candidates::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Candidates::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new_var\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::new_var"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new_var_with_candidates\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::new_var_with_candidates"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new_vars_with_candidates_1d\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::new_vars_with_candidates_1d"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new_vars_with_candidates_2d\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::new_vars_with_candidates_2d"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"set_value\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::set_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert_candidates\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::insert_candidates"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"remove_candidates\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::remove_candidates"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"intersect_candidates\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::intersect_candidates"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add_constraint\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::add_constraint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"all_different\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::all_different"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"equals\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::equals"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"unify\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::unify"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"solve_any\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::Puzzle::solve_any"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"solve_unique\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::Puzzle::solve_unique"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"solve_all\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::Puzzle::solve_all"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"step\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::Puzzle::step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"num_guesses\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::Puzzle::num_guesses"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::PuzzleConstraints::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"substitute\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::PuzzleConstraints::substitute"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"init_wake\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::PuzzleConstraints::init_wake"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::PuzzleSearch::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"is_assigned\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::PuzzleSearch::is_assigned"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_assigned\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::PuzzleSearch::get_assigned"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_unassigned\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::PuzzleSearch::get_unassigned"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_min_max\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::PuzzleSearch::get_min_max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"set_candidate\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::PuzzleSearch::set_candidate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove_candidate\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::PuzzleSearch::remove_candidate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"bound_candidate_range\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::PuzzleSearch::bound_candidate_range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"solve\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::PuzzleSearch::solve"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assign\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::PuzzleSearch::assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"constrain\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::PuzzleSearch::constrain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"unify\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"puzzle_solver::puzzle::PuzzleSearch::unify"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<puzzle::PuzzleSearch<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<puzzle::PuzzleSearch<'a> as std::ops::Index<VarToken>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"bool_to_result\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::bool_to_result"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"puzzle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_two_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"puzzle_solver::puzzle::get_two_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","fn_type":"Safe","name":"<Solution as std::ops::Index<VarToken>>::index"}
