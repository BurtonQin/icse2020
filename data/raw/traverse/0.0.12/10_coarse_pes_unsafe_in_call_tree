{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for Map<I, F>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for Filter<I, F>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for FilterMap<I, F>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for Enumerate<I>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for Skip<I>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for Take<I>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for SkipWhile<I, F>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for TakeWhile<I, F>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for Inspect<I, F>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for Chain<I, O>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for FlatMap<I, F>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ext\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::ext::<impl Traversal for Cloned<I>>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::Counter<A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"count\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::utils::count"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::Counter<A> as Traversal>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::Range<A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"range\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::utils::range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::Range<A> as Traversal>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::RangeInclusive<A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"range_inclusive\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::utils::range_inclusive"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::RangeInclusive<A> as Traversal>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::RangeStep<A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"range_step\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::utils::range_step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::RangeStep<A> as Traversal>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::RangeStepInclusive<A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"range_step_inclusive\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::utils::range_step_inclusive"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::RangeStepInclusive<A> as Traversal>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"repeat\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::utils::repeat"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::Repeat<A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::Repeat<A> as Traversal>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::Iterate<T, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iterate\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::utils::iterate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"utils\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<utils::Iterate<A, I> as Traversal>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"impls\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"slice\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::impls::slice::<impl Traversal for &'a [T]>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"impls\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"slice\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::impls::slice::<impl Traversal for &'a mut [T]>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"impls\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"vec\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_traversal\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::impls::vec::<impl IntoTraversal for std::vec::Vec<T>>::into_traversal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"impls\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"vec\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_traversal\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::impls::vec::<impl FromTraversal<T> for std::vec::Vec<T>>::from_traversal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"impls\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_traversal\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::impls::<impl FromTraversal<T> for std::collections::VecDeque<T>>::from_traversal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"impls\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from_traversal\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::impls::<impl FromTraversal<T> for std::collections::LinkedList<T>>::from_traversal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"impls\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from_traversal\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::impls::<impl FromTraversal<(K, V)> for std::collections::HashMap<K, V>>::from_traversal"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"impls\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from_traversal\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::impls::<impl FromTraversal<(K, V)> for std::collections::BTreeMap<K, V>>::from_traversal"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"run\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::Traversal::run"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::map"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"filter\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::filter"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"filter_map\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::filter_map"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"enumerate\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::enumerate"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"skip\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::skip"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"take\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::take"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"skip_while\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::skip_while"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"take_while\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::take_while"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"inspect\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::inspect"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flat_map\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::flat_map"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"chain\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::chain"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"count\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::Traversal::count"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cloned\"), disambiguator: 0 }]","fn_type":"Safe","name":"traverse::Traversal::cloned"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"Traversal\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"collect\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"traverse::Traversal::collect"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_traversal\"), disambiguator: 0 }]","fn_type":"Safe","name":"<T as IntoTraversal>::into_traversal"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Internal<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"foreach\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Internal<I> as Traversal>::foreach"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Map<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Filter<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<FilterMap<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Enumerate<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Skip<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Take<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<SkipWhile<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<TakeWhile<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Inspect<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Chain<I, O> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<FlatMap<I, F> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<Cloned<I> as std::clone::Clone>::clone"}
