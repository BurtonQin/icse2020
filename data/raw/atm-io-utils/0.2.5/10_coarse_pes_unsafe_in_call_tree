{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duplex::Duplex<R, W> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<duplex::Duplex<R, W> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<duplex::Duplex<R, W> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<duplex::Duplex<R, W> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duplex::Duplex<R, W> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duplex::Duplex<R, W>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_reader_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duplex::Duplex<R, W>>::get_reader_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_reader_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duplex::Duplex<R, W>>::get_reader_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_writer_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duplex::Duplex<R, W>>::get_writer_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_writer_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duplex::Duplex<R, W>>::get_writer_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_inner\"), disambiguator: 0 }]","fn_type":"Safe","name":"<duplex::Duplex<R, W>>::into_inner"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"poll_read\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<duplex::Duplex<R, W> as futures_io::AsyncRead>::poll_read"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll_write\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<duplex::Duplex<R, W> as futures_io::AsyncWrite>::poll_write"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll_flush\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<duplex::Duplex<R, W> as futures_io::AsyncWrite>::poll_flush"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"duplex\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll_close\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<duplex::Duplex<R, W> as futures_io::AsyncWrite>::poll_close"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialOp as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialOp as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialOp as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialOp as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialOp as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialRead<R, Ops> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialRead<R, Ops>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialRead<R, Ops>>::get_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialRead<R, Ops>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_inner\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialRead<R, Ops>>::into_inner"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"poll_read\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialRead<R, Ops> as futures_io::AsyncRead>::poll_read"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll_write\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialRead<W, Ops> as futures_io::AsyncWrite>::poll_write"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll_flush\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialRead<W, Ops> as futures_io::AsyncWrite>::poll_flush"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll_close\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialRead<W, Ops> as futures_io::AsyncWrite>::poll_close"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll_vectored_write\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialRead<W, Ops> as futures_io::AsyncWrite>::poll_vectored_write"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialWrite<W, Ops> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialWrite<W, Ops>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_ref\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialWrite<W, Ops>>::get_ref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_mut\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialWrite<W, Ops>>::get_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"into_inner\"), disambiguator: 0 }]","fn_type":"Safe","name":"<partial::PartialWrite<W, Ops>>::into_inner"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"poll_write\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialWrite<W, Ops> as futures_io::AsyncWrite>::poll_write"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"poll_flush\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialWrite<W, Ops> as futures_io::AsyncWrite>::poll_flush"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"poll_close\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialWrite<W, Ops> as futures_io::AsyncWrite>::poll_close"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"poll_read\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<partial::PartialWrite<W, Ops> as futures_io::AsyncRead>::poll_read"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"qs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"arbitrary\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"atm_io_utils::partial::qs::<impl quickcheck::Arbitrary for partial::PartialOp>::arbitrary"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"qs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"shrink\"), disambiguator: 0 }]","fn_type":"Safe","name":"atm_io_utils::partial::qs::<impl quickcheck::Arbitrary for partial::PartialOp>::shrink"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"limited_reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"<limited_reader::LimitedReader<R>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"limited_reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"poll_read\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<limited_reader::LimitedReader<R> as futures_io::AsyncRead>::poll_read"}
