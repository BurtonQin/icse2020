{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<block_tokenizer::BlockTokenizer as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"parse_decorator\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::parse_decorator"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_decorator\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::is_decorator"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_divider\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::is_divider"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_blank\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::is_blank"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_line_type\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::get_line_type"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"value\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::<impl tokens::Line>::value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"squid::block_tokenizer::BlockTokenizer::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"peek\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::BlockTokenizer::peek"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"consume\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::BlockTokenizer::consume"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"consume_raw\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::BlockTokenizer::consume_raw"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_tokenizer\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"consume_line\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_tokenizer::BlockTokenizer::consume_line"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<block_parser::BlockParser as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<block_parser::TextAccumulator as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"squid::block_parser::BlockParser::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"parse_text\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_parser::BlockParser::parse_text"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"parse_quote\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_parser::BlockParser::parse_quote"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"parse_heading\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_parser::BlockParser::parse_heading"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","fn_type":"Safe","name":"<block_parser::BlockParser as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_parser::TextAccumulator::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_parser::TextAccumulator::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"block_parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"consume\"), disambiguator: 0 }]","fn_type":"Safe","name":"squid::block_parser::TextAccumulator::consume"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokens\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokens::Line as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokens\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<tokens::Line as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokens\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<tokens::Line as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokens\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokens::Line as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokens\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokens::LineType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokens\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<tokens::LineType as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tokens\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<tokens::LineType as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::block::HeadingLevel as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::block::HeadingLevel as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::block::HeadingLevel as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::block::HeadingLevel as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::block::ListType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::block::ListType as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::block::ListType as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::block::ListType as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::block::Block as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","fn_type":"Safe","name":"<ast::block::Block as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::block::Block as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ast\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"block\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","fn_type":"NormalNotSafe","name":"<ast::block::Block as std::cmp::PartialEq>::ne"}
