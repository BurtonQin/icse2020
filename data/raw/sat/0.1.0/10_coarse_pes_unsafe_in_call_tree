{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dimacs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<solver::dimacs::Dimacs<CmdFactory>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dimacs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"write_instance\"), disambiguator: 0 }]","has_unsafe":true,"name":"<solver::dimacs::Dimacs<CmdFactory>>::write_instance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dimacs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"read_solution\"), disambiguator: 0 }]","has_unsafe":true,"name":"<solver::dimacs::Dimacs<CmdFactory>>::read_solution"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"solver\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"dimacs\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"solve\"), disambiguator: 0 }]","has_unsafe":true,"name":"<solver::dimacs::Dimacs<CmdFactory> as solver::Solver>::solve"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Literal as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"Instance::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fresh_var\"), disambiguator: 0 }]","has_unsafe":false,"name":"Instance::fresh_var"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_any\"), disambiguator: 0 }]","has_unsafe":true,"name":"Instance::assert_any"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"not\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Literal as std::ops::Not>::not"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"Assignment::get"}
