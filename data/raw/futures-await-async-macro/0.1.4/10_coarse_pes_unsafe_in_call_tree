{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"async_inner\"), disambiguator: 0 }]","has_unsafe":true,"name":"async_inner"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"async\"), disambiguator: 0 }]","has_unsafe":true,"name":"async"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"async_stream\"), disambiguator: 0 }]","has_unsafe":true,"name":"async_stream"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"async_block\"), disambiguator: 0 }]","has_unsafe":true,"name":"async_block"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"async_stream_block\"), disambiguator: 0 }]","has_unsafe":true,"name":"async_stream_block"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold_expr\"), disambiguator: 0 }]","has_unsafe":true,"name":"<ExpandAsyncFor as syn::fold::Fold>::fold_expr"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold_item\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ExpandAsyncFor as syn::fold::Fold>::fold_item"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"first_last\"), disambiguator: 0 }]","has_unsafe":true,"name":"first_last"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"respan\"), disambiguator: 0 }]","has_unsafe":true,"name":"respan"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"replace_bang\"), disambiguator: 0 }]","has_unsafe":true,"name":"replace_bang"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"replace_bangs\"), disambiguator: 0 }]","has_unsafe":true,"name":"replace_bangs"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"parse\"), disambiguator: 0 }]","has_unsafe":true,"name":"<AsyncStreamArg as syn::synom::Synom>::parse"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"parse\"), disambiguator: 0 }]","has_unsafe":true,"name":"<AsyncStreamArgs as syn::synom::Synom>::parse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"registrar\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"_registrar\"), disambiguator: 0 }]","has_unsafe":true,"name":"registrar::_registrar"}
