{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<TriadType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_u8\"), disambiguator: 0 }]","has_unsafe":true,"name":"TriadType::from_u8"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"tricode\"), disambiguator: 0 }]","has_unsafe":true,"name":"tricode"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<TriadicCensus as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"distance\"), disambiguator: 0 }]","has_unsafe":false,"name":"TriadicCensus::distance"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"TriadicCensus::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":false,"name":"TriadicCensus::add"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"set\"), disambiguator: 0 }]","has_unsafe":false,"name":"TriadicCensus::set"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"TriadicCensus::get"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"as_slice\"), disambiguator: 0 }]","has_unsafe":false,"name":"TriadicCensus::as_slice"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<TriadicCensus as std::convert::From<&'a G>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<SimpleDigraph<N, E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<SimpleDigraph<N, E>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"add_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SimpleDigraph<N, E>>::add_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"add_edge\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SimpleDigraph<N, E>>::add_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from_\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SimpleDigraph<N, E>>::from_"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<SimpleDigraph<N, E> as std::convert::From<petgraph::Graph<N, E>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"node_count\"), disambiguator: 0 }]","has_unsafe":false,"name":"<SimpleDigraph<N, E> as DirectedGraph>::node_count"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"has_edge\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SimpleDigraph<N, E> as DirectedGraph>::has_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"each_undirected_neighbor\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SimpleDigraph<N, E> as DirectedGraph>::each_undirected_neighbor"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"calc_index\"), disambiguator: 0 }]","has_unsafe":false,"name":"calc_index"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<OptSparseDigraph<N, E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OptSparseDigraph<N, E> as std::convert::From<SimpleDigraph<N, E>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"node_count\"), disambiguator: 0 }]","has_unsafe":false,"name":"<OptSparseDigraph<N, E> as DirectedGraph>::node_count"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"has_edge\"), disambiguator: 0 }]","has_unsafe":false,"name":"<OptSparseDigraph<N, E> as DirectedGraph>::has_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"each_undirected_neighbor\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OptSparseDigraph<N, E> as DirectedGraph>::each_undirected_neighbor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<OptDenseDigraph<N, E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"node_count\"), disambiguator: 0 }]","has_unsafe":false,"name":"<OptDenseDigraph<N, E> as DirectedGraph>::node_count"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"has_edge\"), disambiguator: 0 }]","has_unsafe":false,"name":"<OptDenseDigraph<N, E> as DirectedGraph>::has_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"each_undirected_neighbor\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OptDenseDigraph<N, E> as DirectedGraph>::each_undirected_neighbor"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<OptDenseDigraph<N, E>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"ref_graph\"), disambiguator: 0 }]","has_unsafe":false,"name":"<OptDenseDigraph<N, E>>::ref_graph"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"add_node_with_weight\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OptDenseDigraph<N, E>>::add_node_with_weight"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"add_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OptDenseDigraph<N, E>>::add_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"add_edge_with_weight\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OptDenseDigraph<N, E>>::add_edge_with_weight"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"add_edge\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OptDenseDigraph<N, E>>::add_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"from_\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OptDenseDigraph<N, E>>::from_"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OptDenseDigraph<N, E> as std::convert::From<petgraph::Graph<N, E>>>::from"}
