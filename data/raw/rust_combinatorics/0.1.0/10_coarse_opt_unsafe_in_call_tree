{"def_path":"[DisambiguatedDefPathData { data: Module(\"combinatorics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"binomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combinatorics::binomial::Choose<'t, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combinatorics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"binomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"n\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combinatorics::binomial::Choose<'t, T>>::n"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combinatorics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"binomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_indices\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combinatorics::binomial::Choose<'t, T>>::from_indices"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combinatorics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"binomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"increment_indices\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combinatorics::binomial::Choose<'t, T>>::increment_indices"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combinatorics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"binomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combinatorics::binomial::Choose<'t, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combinatorics\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"binomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"choose\"), disambiguator: 0 }]","has_unsafe":false,"name":"<[T] as combinatorics::binomial::Chooseable<'t, T>>::choose"}
