{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"degree\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u64 as polynom::Polynom>::degree"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynom\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"modulo\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u64 as polynom::Polynom>::modulo"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rolling_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"calculate_out_table\"), disambiguator: 0 }]","has_unsafe":false,"name":"rolling_hash::Rabin64::calculate_out_table"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rolling_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"calculate_mod_table\"), disambiguator: 0 }]","has_unsafe":false,"name":"rolling_hash::Rabin64::calculate_mod_table"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rolling_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"rolling_hash::Rabin64::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rolling_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new_with_polynom\"), disambiguator: 0 }]","has_unsafe":false,"name":"rolling_hash::Rabin64::new_with_polynom"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rolling_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"reset\"), disambiguator: 0 }]","has_unsafe":false,"name":"<rolling_hash::Rabin64 as rolling_hash::RollingHash64>::reset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rolling_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"prefill_window\"), disambiguator: 0 }]","has_unsafe":true,"name":"<rolling_hash::Rabin64 as rolling_hash::RollingHash64>::prefill_window"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rolling_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"reset_and_prefill_window\"), disambiguator: 0 }]","has_unsafe":true,"name":"<rolling_hash::Rabin64 as rolling_hash::RollingHash64>::reset_and_prefill_window"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rolling_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"slide\"), disambiguator: 0 }]","has_unsafe":false,"name":"<rolling_hash::Rabin64 as rolling_hash::RollingHash64>::slide"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rolling_hash\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_hash\"), disambiguator: 0 }]","has_unsafe":false,"name":"<rolling_hash::Rabin64 as rolling_hash::RollingHash64>::get_hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"separator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<separator::SeparatorIter<I, fn(u64) -> bool>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"separator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default_predicate\"), disambiguator: 0 }]","has_unsafe":false,"name":"<separator::SeparatorIter<I, fn(u64) -> bool>>::new::default_predicate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"separator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"custom_new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<separator::SeparatorIter<I, F>>::custom_new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"separator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<separator::SeparatorIter<I, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"separator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"separator::HashToLevel::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"separator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"custom_new\"), disambiguator: 0 }]","has_unsafe":false,"name":"separator::HashToLevel::custom_new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"separator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"to_level\"), disambiguator: 0 }]","has_unsafe":false,"name":"separator::HashToLevel::to_level"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"chunk\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<chunk::ChunkIter<Iter>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"chunk\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<chunk::ChunkIter<Iter> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::HashedChunk<H> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Node<H> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::NodeIter<I, F, H>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add_at_level\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::NodeIter<I, F, H>>::add_at_level"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"output_level\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::NodeIter<I, F, H>>::output_level"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"output_levels\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::NodeIter<I, F, H>>::output_levels"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::NodeIter<I, F, H> as std::iter::Iterator>::next"}
