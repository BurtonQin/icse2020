{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dispatch\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::Partition::dispatch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"mid\"), disambiguator: 0 }]","has_unsafe":false,"name":"<f64 as partition::Mid>::mid"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"mid\"), disambiguator: 0 }]","has_unsafe":false,"name":"<f32 as partition::Mid>::mid"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::interval::Interval<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::interval::Interval<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::interval::Interval<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"subdivide\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::interval::Interval<T> as partition::Subdivide>::subdivide"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::interval::Interval<T> as partition::Partition<T>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box2<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box2<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box2<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"subdivide\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box2<T> as partition::Subdivide>::subdivide"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box2<T> as partition::Partition<nalgebra::Vector2<T>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box3<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box3<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box3<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"subdivide\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box3<T> as partition::Subdivide>::subdivide"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"boxes\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::boxes::Box3<T> as partition::Partition<nalgebra::Vector3<T>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ncube\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::ncube::Ncube<P, S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ncube\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::ncube::Ncube<P, S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ncube\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::ncube::Ncube<P, S>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ncube\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"width\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::ncube::Ncube<P, S>>::width"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ncube\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::ncube::Ncube<P, S>>::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ncube\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"subdivide\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::ncube::Ncube<P, S> as partition::Subdivide>::subdivide"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ncube\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::ncube::Ncube<P, S> as partition::Partition<P>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"ncube\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"dispatch\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::ncube::Ncube<P, S> as partition::Partition<P>>::dispatch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::unitquad::UnitQuad as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::unitquad::UnitQuad as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::unitquad::UnitQuad as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::unitquad::UnitQuad as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::unitquad::UnitQuad as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::unitquad::UnitQuad as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::unitquad::UnitQuad::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"scale\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::unitquad::UnitQuad::scale"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"offset\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::unitquad::UnitQuad::offset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"coordinate\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::unitquad::UnitQuad::coordinate"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"center\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::unitquad::UnitQuad::center"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"width\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::unitquad::UnitQuad::width"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"subdivide\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::unitquad::UnitQuad as partition::Subdivide>::subdivide"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"unitquad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::unitquad::UnitQuad as partition::Partition<nalgebra::Vector2<T>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Direction as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Direction as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::Direction as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::Direction as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Direction as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Axis as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Axis as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::Axis as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::Axis as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Axis as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"axis_vector_triple\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::cubemap::axis_vector_triple"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Quad as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Quad as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::Quad as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Quad as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::Quad as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Quad as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"center_on_cube\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::cubemap::Quad::center_on_cube"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"center_on_sphere\"), disambiguator: 0 }]","has_unsafe":false,"name":"partition::cubemap::Quad::center_on_sphere"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"subdivide\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::Quad as partition::Subdivide>::subdivide"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::Quad as partition::Partition<nalgebra::Vector3<T>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::CubeMap as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::CubeMap as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::CubeMap as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::CubeMap as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::CubeMap as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::CubeMap as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"subdivide\"), disambiguator: 0 }]","has_unsafe":false,"name":"<partition::cubemap::CubeMap as partition::Subdivide>::subdivide"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"partition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"cubemap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"<partition::cubemap::CubeMap as partition::Partition<nalgebra::Vector3<T>>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pure_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pure_tree::PureTree<P, O>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pure_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pure_tree::PureTree<P, O>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pure_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"dispatch\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pure_tree::PureTree<P, O>>::dispatch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pure_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pure_tree::PureTree<P, O>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pure_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"state\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pure_tree::PureTree<P, O> as traits::Node>::state"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pure_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"partition\"), disambiguator: 0 }]","has_unsafe":false,"name":"<pure_tree::PureTree<P, O> as traits::Node>::partition"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"pure_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'a pure_tree::PureTree<P, O> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"data_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"<data_tree::Tree<P, O, D>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"data_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"recompute_data\"), disambiguator: 0 }]","has_unsafe":false,"name":"<data_tree::Tree<P, O, D>>::recompute_data"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"data_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"dispatch\"), disambiguator: 0 }]","has_unsafe":false,"name":"<data_tree::Tree<P, O, D>>::dispatch"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"data_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":false,"name":"<data_tree::Tree<P, O, D>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"data_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<data_tree::Tree<P, O, D>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"data_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"state\"), disambiguator: 0 }]","has_unsafe":false,"name":"<data_tree::Tree<P, O, D> as traits::Node>::state"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"data_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"partition\"), disambiguator: 0 }]","has_unsafe":false,"name":"<data_tree::Tree<P, O, D> as traits::Node>::partition"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"data_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"data\"), disambiguator: 0 }]","has_unsafe":false,"name":"<data_tree::Tree<P, O, D> as traits::AssociatedData>::data"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"data_tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'a data_tree::Tree<P, O, D> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"traits\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"query_objects\"), disambiguator: 0 }]","has_unsafe":false,"name":"<T as traits::ObjectQuery>::query_objects"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"traits\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"query_data\"), disambiguator: 0 }]","has_unsafe":false,"name":"<T as traits::DataQuery>::query_data"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"traits\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"position\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'a O as traits::Position>::position"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"traits\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<traits::Positioned<O, P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"traits\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"position\"), disambiguator: 0 }]","has_unsafe":false,"name":"<traits::Positioned<O, P> as traits::Position>::position"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<iter::Iter<'a, T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<iter::Iter<'a, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<iter::RecurseObjects<'a, T, R>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<iter::RecurseObjects<'a, T, R> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<iter::RecurseData<'a, T, R>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<iter::RecurseData<'a, T, R> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::ConstructionError as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::ConstructionError as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::ConstructionError as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::ConstructionError as std::fmt::Debug>::fmt"}
