{"def_path":"[DisambiguatedDefPathData { data: Module(\"action\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"run\"), disambiguator: 0 }]","has_unsafe":true,"name":"<F as action::Action>::run"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"condition\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"should_retry\"), disambiguator: 0 }]","has_unsafe":true,"name":"<F as condition::Condition<E>>::should_retry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fixed_interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fixed_interval::FixedInterval as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fixed_interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fixed_interval::FixedInterval as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fixed_interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::fixed_interval::FixedInterval::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fixed_interval\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fixed_interval::FixedInterval as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::exponential_backoff::ExponentialBackoff as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::exponential_backoff::ExponentialBackoff as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::exponential_backoff::ExponentialBackoff::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"exponential_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::exponential_backoff::ExponentialBackoff as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fibonacci_backoff::FibonacciBackoff as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fibonacci_backoff::FibonacciBackoff as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::fibonacci_backoff::FibonacciBackoff::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"fibonacci_backoff\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::fibonacci_backoff::FibonacciBackoff as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"jitter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"apply_jitter\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::jitter::apply_jitter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"jitter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"jitter\"), disambiguator: 0 }]","has_unsafe":true,"name":"strategy::jitter::jitter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::FactorType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::Strategy as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::Strategy as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"exponential\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::Strategy::exponential"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fibonacci\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::Strategy::fibonacci"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fixed\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::Strategy::fixed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::Strategy::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_max_delay\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::Strategy::with_max_delay"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_max_retries\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::Strategy::with_max_retries"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_jitter\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::Strategy::with_jitter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"strategy::Strategy::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"retry\"), disambiguator: 0 }]","has_unsafe":true,"name":"strategy::Strategy::retry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"retry_if\"), disambiguator: 0 }]","has_unsafe":true,"name":"strategy::Strategy::retry_if"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<strategy::FactorIter as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"strategy\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<strategy::StrategyIter as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryState<A>>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::Retry<A>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new_with_handle\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::Retry<A>>::new_with_handle"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<future::Retry<A> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::Retry<A> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryIf<A, C>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new_with_handle\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryIf<A, C>>::new_with_handle"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"attempt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryIf<A, C>>::attempt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"retry\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryIf<A, C>>::retry"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<future::RetryIf<A, C> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"future\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<future::RetryIf<A, C> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"retry\"), disambiguator: 0 }]","has_unsafe":true,"name":"retry"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"retry_if\"), disambiguator: 0 }]","has_unsafe":true,"name":"retry_if"}
