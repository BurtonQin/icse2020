{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"polar_radius\"), disambiguator: 0 }]","has_unsafe":true,"name":"ellipsoid::Ellipsoid::polar_radius"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flattening\"), disambiguator: 0 }]","has_unsafe":true,"name":"ellipsoid::Ellipsoid::flattening"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ecc\"), disambiguator: 0 }]","has_unsafe":true,"name":"ellipsoid::Ellipsoid::ecc"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"second_ecc\"), disambiguator: 0 }]","has_unsafe":true,"name":"ellipsoid::Ellipsoid::second_ecc"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"third_ecc\"), disambiguator: 0 }]","has_unsafe":true,"name":"ellipsoid::Ellipsoid::third_ecc"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"angular_ecc\"), disambiguator: 0 }]","has_unsafe":true,"name":"ellipsoid::Ellipsoid::angular_ecc"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::WGS84 as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<ellipsoid::WGS84 as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::WGS84 as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"name\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::WGS84 as ellipsoid::Ellipsoid>::name"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"radius\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::WGS84 as ellipsoid::Ellipsoid>::radius"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flattening_inv\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::WGS84 as ellipsoid::Ellipsoid>::flattening_inv"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::GRS80 as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<ellipsoid::GRS80 as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::GRS80 as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"name\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::GRS80 as ellipsoid::Ellipsoid>::name"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"radius\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::GRS80 as ellipsoid::Ellipsoid>::radius"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"ellipsoid\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"flattening_inv\"), disambiguator: 0 }]","has_unsafe":false,"name":"<ellipsoid::GRS80 as ellipsoid::Ellipsoid>::flattening_inv"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_radians\"), disambiguator: 0 }]","has_unsafe":true,"name":"<euclid::Length<f64, euclid::Deg> as DegreesExt<f64>>::to_radians"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"to_degrees\"), disambiguator: 0 }]","has_unsafe":true,"name":"<euclid::Length<f64, euclid::Rad> as RadiansExt<f64>>::to_degrees"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeodeticCoord<E>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from_degrees\"), disambiguator: 0 }]","has_unsafe":true,"name":"<GeodeticCoord<E>>::from_degrees"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeodeticCoord<E> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"default_epsilon\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeodeticCoord<E> as approx::ApproxEq>::default_epsilon"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"default_max_relative\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeodeticCoord<E> as approx::ApproxEq>::default_max_relative"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"default_max_ulps\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeodeticCoord<E> as approx::ApproxEq>::default_max_ulps"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"relative_eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<GeodeticCoord<E> as approx::ApproxEq>::relative_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"ulps_eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<GeodeticCoord<E> as approx::ApproxEq>::ulps_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<GeodeticCoord<E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeodeticCoord<E> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeocentricCoord as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeocentricCoord as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeocentricCoord as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeocentricCoord as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"GeocentricCoord::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"default_epsilon\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeocentricCoord as approx::ApproxEq>::default_epsilon"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"default_max_relative\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeocentricCoord as approx::ApproxEq>::default_max_relative"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"default_max_ulps\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeocentricCoord as approx::ApproxEq>::default_max_ulps"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"relative_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<GeocentricCoord as approx::ApproxEq>::relative_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"ulps_eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<GeocentricCoord as approx::ApproxEq>::ulps_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<GeodeticCoord<E> as std::convert::From<GeocentricCoord>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<GeocentricCoord as std::convert::From<GeodeticCoord<E>>>::from"}
