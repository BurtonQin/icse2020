{"def_path":"[DisambiguatedDefPathData { data: Module(\"aabb\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"aabb::Aabb3f::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"aabb\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"aabb::Aabb3f::from_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"aabb\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"contains_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"aabb::Aabb3f::contains_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Degrees as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Degrees as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Degrees as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Degrees as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Degrees as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Degrees as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Degrees as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Degrees as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Degrees as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Radians as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Radians as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Radians as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Radians as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Radians as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Radians as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Radians as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Radians as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","has_unsafe":false,"name":"<angle::Radians as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"value\"), disambiguator: 0 }]","has_unsafe":false,"name":"angle::Degrees::value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_radians\"), disambiguator: 0 }]","has_unsafe":false,"name":"angle::Degrees::to_radians"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"value\"), disambiguator: 0 }]","has_unsafe":false,"name":"angle::Radians::value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"angle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"to_degrees\"), disambiguator: 0 }]","has_unsafe":false,"name":"angle::Radians::to_degrees"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersect\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"triangle_closest_point_to_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"intersect::triangle_closest_point_to_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"intersect\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"intersect_sphere_triangle\"), disambiguator: 0 }]","has_unsafe":false,"name":"intersect::intersect_sphere_triangle"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"line\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<line::Line3f as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"line\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<line::Line3f as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"line\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<line::Line3f as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"line\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<line::Line3f as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"line\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"line::Line3f::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"line\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"closest_points_between_lines\"), disambiguator: 0 }]","has_unsafe":false,"name":"line::Line3f::closest_points_between_lines"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<quad::Quad2f as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<quad::Quad2f as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<quad::Quad2f as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<quad::Quad2f as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<quad::IBLerpResult as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<quad::IBLerpResult as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<quad::IBLerpResult as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<quad::IBLerpResult as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<quad::InvBilerpResult as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<quad::InvBilerpResult as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<quad::InvBilerpResult as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<quad::InvBilerpResult as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"quad::Quad2f::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iblerp\"), disambiguator: 0 }]","has_unsafe":false,"name":"quad::Quad2f::iblerp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"inv_bilerp_u\"), disambiguator: 0 }]","has_unsafe":false,"name":"quad::Quad2f::inv_bilerp_u"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lerp_bottom\"), disambiguator: 0 }]","has_unsafe":false,"name":"quad::Quad2f::lerp_bottom"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lerp_top\"), disambiguator: 0 }]","has_unsafe":false,"name":"quad::Quad2f::lerp_top"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lerp_left\"), disambiguator: 0 }]","has_unsafe":false,"name":"quad::Quad2f::lerp_left"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lerp_right\"), disambiguator: 0 }]","has_unsafe":false,"name":"quad::Quad2f::lerp_right"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"quad\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"blerp\"), disambiguator: 0 }]","has_unsafe":false,"name":"quad::Quad2f::blerp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::InclusiveRange<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<range::InclusiveRange<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::InclusiveRange<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::InclusiveRange<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pomax\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::pomax"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pomin\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::pomin"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::InclusiveRange<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_sorting\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::InclusiveRange<T>>::from_sorting"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::InclusiveRange<T>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"length\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::InclusiveRange<T>>::length"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"expand\"), disambiguator: 0 }]","has_unsafe":true,"name":"<range::InclusiveRange<T>>::expand"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"range_clamp\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::range_clamp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"range\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"range_combine\"), disambiguator: 0 }]","has_unsafe":true,"name":"range::range_combine"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<segment::Segment3f as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<segment::Segment3f as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<segment::Segment3f as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<segment::Segment3f as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_vec3f\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::to_vec3f"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"length\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::length"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reversed\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::reversed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"distance_to_parametric_delta\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::distance_to_parametric_delta"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"distance_from_parametric_delta\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::distance_from_parametric_delta"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"point_from_parametric\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::point_from_parametric"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"segment_from_parametric_range\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::segment_from_parametric_range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"project_segment_as_range\"), disambiguator: 0 }]","has_unsafe":true,"name":"segment::Segment3f::project_segment_as_range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"point_distance_squared\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::point_distance_squared"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"point_distance\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::point_distance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"closest_point_to_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"segment::Segment3f::closest_point_to_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"segment\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":false,"name":"<segment::Segment3f as std::ops::Add<vec3f::Vec3f>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sphere\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sphere::Sphere3f as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sphere\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sphere::Sphere3f as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sphere\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<sphere::Sphere3f as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sphere\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"sphere::Sphere3f::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sphere\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_radius\"), disambiguator: 0 }]","has_unsafe":false,"name":"sphere::Sphere3f::from_radius"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"sphere\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"radius_squared\"), disambiguator: 0 }]","has_unsafe":false,"name":"sphere::Sphere3f::radius_squared"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<f32 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<f64 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<i8 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<i16 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<i32 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<i64 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<isize as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u8 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u16 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u32 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<u64 as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"as_f32\"), disambiguator: 0 }]","has_unsafe":false,"name":"<usize as util::CastF32>::as_f32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Vec2f as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Vec2f as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Vec2f as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Vec2f as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cross\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::cross"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lerp\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::lerp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dot\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::dot"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"vec3f\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::vec3f"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"distance_squared\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::distance_squared"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"distance\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::distance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"magnitude_squared\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::magnitude_squared"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"magnitude\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::magnitude"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"normalized\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Vec2f::normalized"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Vec2f as std::ops::Add>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Vec2f as std::ops::Sub>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Vec2f as std::ops::Mul<f32>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Vec2f as std::ops::Div<f32>>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"detf_2x2\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::detf_2x2"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Line2f as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Line2f as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Line2f as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec2f::Line2f as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Line2f::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"reverse\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Line2f::reverse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"closest_parametric_point\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Line2f::closest_parametric_point"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"point_distance_squared\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Line2f::point_distance_squared"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"cart_from_para\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Line2f::cart_from_para"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"orient\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec2f::Line2f::orient"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec2f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"vec2f\"), disambiguator: 0 }]","has_unsafe":true,"name":"vec2f::vec2f"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec3f::Vec3f::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_scalar\"), disambiguator: 0 }]","has_unsafe":true,"name":"vec3f::Vec3f::from_scalar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dot\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec3f::Vec3f::dot"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cross\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec3f::Vec3f::cross"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"distance\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec3f::Vec3f::distance"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"lerp\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec3f::Vec3f::lerp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"magnitude_squared\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec3f::Vec3f::magnitude_squared"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"magnitude\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec3f::Vec3f::magnitude"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"normalized\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec3f::Vec3f::normalized"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"project_onto\"), disambiguator: 0 }]","has_unsafe":false,"name":"vec3f::Vec3f::project_onto"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"vec3f\"), disambiguator: 0 }]","has_unsafe":true,"name":"vec3f::vec3f"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::ops::Add>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::ops::Add<f32>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::ops::Div>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::ops::Mul>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::ops::Mul<f32>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::ops::Sub>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"vec3f\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":false,"name":"<vec3f::Vec3f as std::ops::Sub<f32>>::sub"}
