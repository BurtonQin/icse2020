{"def_path":"[DisambiguatedDefPathData { data: Module(\"dispatch\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<dispatch::PeerMessageQueue<S>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dispatch\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<dispatch::PushMessageError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dispatch\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<dispatch::PushMessageError as std::convert::From<jsonrpc::futures::sync::mpsc::SendError<std::string::String>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dispatch\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"dispatch::Dispatcher::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dispatch\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"push_message\"), disambiguator: 0 }]","has_unsafe":true,"name":"dispatch::Dispatcher::push_message"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dispatch\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"is_connected\"), disambiguator: 0 }]","has_unsafe":true,"name":"dispatch::Dispatcher::is_connected"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dispatch\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"peer_count\"), disambiguator: 0 }]","has_unsafe":true,"name":"dispatch::Dispatcher::peer_count"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"dispatch\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<dispatch::PeerMessageQueue<S> as jsonrpc::futures::Stream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"meta\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"extract\"), disambiguator: 0 }]","has_unsafe":false,"name":"<F as meta::MetaExtractor<M>>::extract"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"meta\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"extract\"), disambiguator: 0 }]","has_unsafe":false,"name":"<meta::NoopExtractor as meta::MetaExtractor<M>>::extract"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<server::ServerBuilder<M, S>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"event_loop_remote\"), disambiguator: 0 }]","has_unsafe":false,"name":"<server::ServerBuilder<M, S>>::event_loop_remote"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"session_meta_extractor\"), disambiguator: 0 }]","has_unsafe":false,"name":"<server::ServerBuilder<M, S>>::session_meta_extractor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"request_separators\"), disambiguator: 0 }]","has_unsafe":false,"name":"<server::ServerBuilder<M, S>>::request_separators"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"start\"), disambiguator: 0 }]","has_unsafe":true,"name":"<server::ServerBuilder<M, S>>::start"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dispatcher\"), disambiguator: 0 }]","has_unsafe":false,"name":"<server::ServerBuilder<M, S>>::dispatcher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"close\"), disambiguator: 0 }]","has_unsafe":false,"name":"server::Server::close"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"wait\"), disambiguator: 0 }]","has_unsafe":false,"name":"server::Server::wait"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"server\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"drop\"), disambiguator: 0 }]","has_unsafe":false,"name":"<server::Server as std::ops::Drop>::drop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"service\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<service::Service<M, S>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"service\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"call\"), disambiguator: 0 }]","has_unsafe":false,"name":"<service::Service<M, S> as tokio_service::Service>::call"}
