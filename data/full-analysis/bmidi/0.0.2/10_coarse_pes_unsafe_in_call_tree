{"def_path":"[DisambiguatedDefPathData { data: Module(\"types\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<types::KeyEventType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"types\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<types::KeyEventType as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"types\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<types::EventType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"types\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<types::EventType as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"types\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<types::Event as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"types\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<types::Event as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"track_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"parser::File::track_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"parser::File::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"parser\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"parse\"), disambiguator: 0 }]","has_unsafe":true,"name":"parser::File::parse"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"errors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<errors::MidiError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<reader::Status as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"MidiRead\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"read_byte\"), disambiguator: 0 }]","has_unsafe":true,"name":"reader::MidiRead::read_byte"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"MidiRead\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"read_short\"), disambiguator: 0 }]","has_unsafe":true,"name":"reader::MidiRead::read_short"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"MidiRead\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"read_int\"), disambiguator: 0 }]","has_unsafe":true,"name":"reader::MidiRead::read_int"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"MidiRead\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"read_var_len\"), disambiguator: 0 }]","has_unsafe":true,"name":"reader::MidiRead::read_var_len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"read\"), disambiguator: 0 }]","has_unsafe":true,"name":"<T as reader::MidiRead>::read"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"read_byte\"), disambiguator: 0 }]","has_unsafe":true,"name":"<T as reader::MidiRead>::read_byte"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<reader::MidiReader<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"read_byte\"), disambiguator: 0 }]","has_unsafe":true,"name":"<reader::MidiReader<I>>::read_byte"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"read_int\"), disambiguator: 0 }]","has_unsafe":true,"name":"<reader::MidiReader<I>>::read_int"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"read_short\"), disambiguator: 0 }]","has_unsafe":true,"name":"<reader::MidiReader<I>>::read_short"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"read_bytes\"), disambiguator: 0 }]","has_unsafe":true,"name":"<reader::MidiReader<I>>::read_bytes"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"read_string\"), disambiguator: 0 }]","has_unsafe":true,"name":"<reader::MidiReader<I>>::read_string"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"reader\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<reader::MidiReader<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"note\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<note::Note as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"note\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"note::Note::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"note\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_step\"), disambiguator: 0 }]","has_unsafe":false,"name":"note::Note::to_step"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"note\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"note::<impl std::convert::From<note::Note> for pitch_calc::Hz>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"note\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"note::<impl std::convert::From<note::Note> for pitch_calc::Step>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"note\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<note::Note as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"lt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::cmp::PartialOrd>::lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"le\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::cmp::PartialOrd>::le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"gt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::cmp::PartialOrd>::gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ge\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::cmp::PartialOrd>::ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::HeapItem as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"combined_iterator::CombinedIterator::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"combined_iterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<combined_iterator::CombinedIterator<'a> as std::iter::Iterator>::next"}
