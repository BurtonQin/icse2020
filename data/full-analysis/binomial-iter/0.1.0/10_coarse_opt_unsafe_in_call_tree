{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"gcd\"), disambiguator: 0 }]","has_unsafe":false,"name":"gcd"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"mul_div_gcd\"), disambiguator: 0 }]","has_unsafe":false,"name":"mul_div_gcd"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"binom\"), disambiguator: 0 }]","has_unsafe":false,"name":"binom"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialIter as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialIter as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialIter as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialIter as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"n\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::n"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"k\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::k"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"binom\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::binom"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"inc_n\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::inc_n"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dec_n\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::dec_n"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"inc_k\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::inc_k"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"dec_k\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::dec_k"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"iter_inc_n\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::iter_inc_n"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncNIter as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncNIter as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncNIter as std::ops::DerefMut>::deref_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"iter_dec_n\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::iter_dec_n"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<DecNIter as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":false,"name":"<DecNIter as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<DecNIter as std::ops::DerefMut>::deref_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"iter_inc_k\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::iter_inc_k"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncKIter as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncKIter as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncKIter as std::ops::DerefMut>::deref_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"iter_dec_k\"), disambiguator: 0 }]","has_unsafe":false,"name":"BinomialIter::iter_dec_k"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<DecKIter as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":false,"name":"<DecKIter as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<DecKIter as std::ops::DerefMut>::deref_mut"}
