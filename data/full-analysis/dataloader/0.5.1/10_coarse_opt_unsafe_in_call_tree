{"def_path":"[DisambiguatedDefPathData { data: Module(\"non_cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<non_cached::Loader<K, V, E> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"non_cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"load\"), disambiguator: 0 }]","has_unsafe":true,"name":"<non_cached::Loader<K, V, E>>::load"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"non_cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"load_many\"), disambiguator: 0 }]","has_unsafe":false,"name":"<non_cached::Loader<K, V, E>>::load_many"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"non_cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cached\"), disambiguator: 0 }]","has_unsafe":false,"name":"<non_cached::Loader<K, V, E>>::cached"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"non_cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_cache\"), disambiguator: 0 }]","has_unsafe":false,"name":"<non_cached::Loader<K, V, E>>::with_cache"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"non_cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<non_cached::Loader<K, V, E>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"non_cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<non_cached::LoadFuture<V, E> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"non_cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<non_cached::Batched<K, V, E> as futures::Stream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<cached::Loader<K, V, E, C> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"load\"), disambiguator: 0 }]","has_unsafe":true,"name":"<cached::Loader<K, V, E, C>>::load"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"load_many\"), disambiguator: 0 }]","has_unsafe":false,"name":"<cached::Loader<K, V, E, C>>::load_many"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":false,"name":"<cached::Loader<K, V, E, C>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","has_unsafe":false,"name":"<cached::Loader<K, V, E, C>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"prime\"), disambiguator: 0 }]","has_unsafe":false,"name":"<cached::Loader<K, V, E, C>>::prime"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<cached::LoadFuture<V, E> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<cached::LoadFuture<V, E> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"with_cache\"), disambiguator: 0 }]","has_unsafe":false,"name":"<cached::Loader<K, V, E, C>>::with_cache"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<cached::Loader<K, V, E, std::collections::BTreeMap<K, cached::LoadFuture<V, E>>>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Cache\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"contains_key\"), disambiguator: 0 }]","has_unsafe":false,"name":"cached::Cache::contains_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"contains_key\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::collections::BTreeMap<K, V> as cached::Cache<K, V>>::contains_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::collections::BTreeMap<K, V> as cached::Cache<K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::collections::BTreeMap<K, V> as cached::Cache<K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::collections::BTreeMap<K, V> as cached::Cache<K, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cached\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::collections::BTreeMap<K, V> as cached::Cache<K, V>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<LoadError<E> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<LoadError<E> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<LoadError<E> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<LoadError<E> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"BatchFn\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"max_batch_size\"), disambiguator: 0 }]","has_unsafe":false,"name":"BatchFn::max_batch_size"}
