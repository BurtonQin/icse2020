{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::Overwritten<L, R> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::Overwritten<L, R> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::Overwritten<L, R> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bimap::Overwritten<L, R> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<bimap::Overwritten<L, R> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R>>::with_capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_hasher\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::with_hasher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"with_capacity_and_hasher\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::with_capacity_and_hasher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"hasher\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::hasher"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"capacity\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::capacity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"reserve\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::reserve"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"shrink_to_fit\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::shrink_to_fit"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"drain\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::drain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"left_values\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::left_values"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"left_values_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::left_values_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"right_values\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::right_values"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"right_values_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::right_values_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_by_left\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::get_by_left"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_by_left_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::get_by_left_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_by_right\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::get_by_right"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_by_right_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::get_by_right_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"contains_left\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::contains_left"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"contains_right\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::contains_right"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"remove_by_left\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::remove_by_left"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"remove_by_right\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::remove_by_right"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert_no_overwrite\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::insert_no_overwrite"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"retain\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S>>::retain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"hash_value\"), disambiguator: 0 }]","has_unsafe":false,"name":"bimap::hash_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::Iter<'a, L, R> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::Iter<'a, L, R> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::IterMut<'a, L, R> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::IterMut<'a, L, R> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::Values<'a, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::Values<'a, T> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::ValuesMut<'a, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::ValuesMut<'a, T> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::IntoIter<L, R> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::Drain<'a, L, R> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'a bimap::BiMap<L, R, S> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'a mut bimap::BiMap<L, R, S> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"from_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S> as std::iter::FromIterator<(L, R)>>::from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"bimap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","has_unsafe":false,"name":"<bimap::BiMap<L, R, S> as std::iter::Extend<(L, R)>>::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T, NodeId> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T, NodeId> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T, NodeId> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<NodeData<NodeId> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<NodeData<NodeId> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<NodeData<NodeId> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":false,"name":"<NodeData<NodeId> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<NodeData<NodeId> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<NodeData<NodeId>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<NodeData<NodeId> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<NodeData<NodeId> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_Fail_FOR_Error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"cause\"), disambiguator: 0 }]","has_unsafe":false,"name":"_DERIVE_failure_Fail_FOR_Error::<impl failure::Fail for Error>::cause"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_Fail_FOR_Error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"backtrace\"), disambiguator: 0 }]","has_unsafe":false,"name":"_DERIVE_failure_Fail_FOR_Error::<impl failure::Fail for Error>::backtrace"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"_DERIVE_failure_core_fmt_Display_FOR_Error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"_DERIVE_failure_core_fmt_Display_FOR_Error::<impl std::fmt::Display for Error>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Error as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"add_node\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::add_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"contains_node\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::contains_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"delete_node\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::delete_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"add_dependency\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::add_dependency"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"contains_dependency\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::contains_dependency"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"delete_dependency\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::delete_dependency"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::size"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"iter_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::iter_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"descendants_unsorted\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::descendants_unsorted"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"descendants\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::descendants"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"topo_cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::topo_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"topo_order\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::topo_order"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_dep_keys\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::get_dep_keys"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"dfs_forward\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::dfs_forward"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"dfs_backward\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::dfs_backward"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"reorder_nodes\"), disambiguator: 0 }]","has_unsafe":false,"name":"<IncrementalTopo<T>>::reorder_nodes"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<DescendantsUnsorted<'a, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Descendants<'a, T> as std::iter::Iterator>::next"}
