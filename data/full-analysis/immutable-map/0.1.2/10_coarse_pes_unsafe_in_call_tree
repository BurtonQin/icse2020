{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rev_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::rev_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<set::TreeSet<V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"f\"), disambiguator: 0 }]","has_unsafe":true,"name":"<set::TreeSet<V>>::get::f"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"contains\"), disambiguator: 0 }]","has_unsafe":true,"name":"<set::TreeSet<V>>::contains"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"range\"), disambiguator: 0 }]","has_unsafe":true,"name":"<set::TreeSet<V>>::range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"intersection\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::intersection"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"union\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::union"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"difference\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"symmetric_difference\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::symmetric_difference"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_disjoint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::is_disjoint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_subset\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::is_subset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_superset\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::is_superset"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<set::TreeSet<V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"insert_if_absent\"), disambiguator: 0 }]","has_unsafe":true,"name":"<set::TreeSet<V>>::insert_if_absent"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"delete_min\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::delete_min"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"delete_max\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V>>::delete_max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"<set::TreeSet<V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'r set::TreeSet<V> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::TreeSet<V> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"from_iter\"), disambiguator: 0 }]","has_unsafe":true,"name":"<set::TreeSet<V> as std::iter::FromIterator<V>>::from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::Intersection<'r, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::Intersection<'r, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::Union<'r, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::Union<'r, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::Difference<'r, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::Difference<'r, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::SymmetricDifference<'r, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"set\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<set::SymmetricDifference<'r, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"rev_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V>>::rev_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"keys\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V>>::keys"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"values\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V>>::values"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"f\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V>>::get::f"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"contains_key\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V>>::contains_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"range\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V>>::range"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"insert_if_absent\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V>>::insert_if_absent"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"update\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V>>::update"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"insert_or_update\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V>>::insert_or_update"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"delete_min\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V>>::delete_min"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"delete_max\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V>>::delete_max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'r map::TreeMap<K, V> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","has_unsafe":false,"name":"<map::TreeMap<K, V> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"index\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V> as std::ops::Index<&'a Q>>::index"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"map\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"from_iter\"), disambiguator: 0 }]","has_unsafe":true,"name":"<map::TreeMap<K, V> as std::iter::FromIterator<(K, V)>>::from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::TreeNode<K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::TreeNode<K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::TreeNode<K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_exact\"), disambiguator: 0 }]","has_unsafe":true,"name":"tree::find_exact"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"delete_min\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::delete_min"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"delete_max\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::delete_max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"tree::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"insert_if_absent\"), disambiguator: 0 }]","has_unsafe":true,"name":"tree::insert_if_absent"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"update\"), disambiguator: 0 }]","has_unsafe":true,"name":"tree::update"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"insert_or_update\"), disambiguator: 0 }]","has_unsafe":true,"name":"tree::insert_or_update"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"tree::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"glue\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::glue"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_balanced\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::is_balanced"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_single\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::is_single"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::size"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"balance_left\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::balance_left"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"balance_left_move\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::balance_left_move"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"balance_right\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::balance_right"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"balance_right_move\"), disambiguator: 0 }]","has_unsafe":false,"name":"tree::balance_right_move"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Iter<'r, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Iter<'r, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"push_left\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Iter<'r, K, V>>::push_left"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Iter<'r, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Iter<'r, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Iter<'r, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::RevIter<'r, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::RevIter<'r, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"push_right\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::RevIter<'r, K, V>>::push_right"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::RevIter<'r, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::RevIter<'r, K, V> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::RevIter<'r, K, V> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Range<'r, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Keys<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Keys<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Keys<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Keys<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Keys<I> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Keys<I> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Values<I> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Values<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Values<I> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Values<I> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Values<I> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Values<I> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Range<'r, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"left_edge\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Range<'r, K, V>>::left_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"left_edge_gt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Range<'r, K, V>>::left_edge_gt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"left_edge_ge\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Range<'r, K, V>>::left_edge_ge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"right_edge\"), disambiguator: 0 }]","has_unsafe":false,"name":"<tree::Range<'r, K, V>>::right_edge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"right_edge_lt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Range<'r, K, V>>::right_edge_lt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"right_edge_le\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Range<'r, K, V>>::right_edge_le"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Range<'r, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"tree\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"next_back\"), disambiguator: 0 }]","has_unsafe":true,"name":"<tree::Range<'r, K, V> as std::iter::DoubleEndedIterator>::next_back"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Bound<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Bound<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Bound<T> as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Bound<T> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Bound<T> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Bound<T> as std::cmp::Eq>::assert_receiver_is_total_eq"}
