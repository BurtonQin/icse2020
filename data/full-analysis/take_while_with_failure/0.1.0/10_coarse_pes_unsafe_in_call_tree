{"def_path":"[DisambiguatedDefPathData { data: Trait(\"TakeWhileWithFailureIterator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"take_while_with_failure\"), disambiguator: 0 }]","has_unsafe":false,"name":"TakeWhileWithFailureIterator::take_while_with_failure"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<TakeWhileWithFailure<I, P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<TakeWhileWithFailure<I, P> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":true,"name":"<TakeWhileWithFailure<I, P> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"take_while_with_failure\"), disambiguator: 0 }]","has_unsafe":false,"name":"<I as TakeWhileWithFailureIterator>::take_while_with_failure"}
