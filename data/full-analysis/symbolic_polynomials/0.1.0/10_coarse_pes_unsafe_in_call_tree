{"def_path":"[DisambiguatedDefPathData { data: Module(\"functions\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"variable\"), disambiguator: 0 }]","has_unsafe":true,"name":"functions::variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"functions\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"max\"), disambiguator: 0 }]","has_unsafe":true,"name":"functions::max"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"functions\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"min\"), disambiguator: 0 }]","has_unsafe":true,"name":"functions::min"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"functions\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ceil\"), disambiguator: 0 }]","has_unsafe":true,"name":"functions::ceil"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"functions\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"floor\"), disambiguator: 0 }]","has_unsafe":true,"name":"functions::floor"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"functions\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reduce_monomial\"), disambiguator: 0 }]","has_unsafe":true,"name":"functions::reduce_monomial"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"functions\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"reduce\"), disambiguator: 0 }]","has_unsafe":true,"name":"functions::reduce"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"functions\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"deduce_values\"), disambiguator: 0 }]","has_unsafe":true,"name":"functions::deduce_values"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"functions\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"nth_root\"), disambiguator: 0 }]","has_unsafe":true,"name":"functions::nth_root"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<monomial::Monomial<I, C, P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<monomial::Monomial<I, C, P> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"up_to_coefficient\"), disambiguator: 0 }]","has_unsafe":false,"name":"<monomial::Monomial<I, C, P>>::up_to_coefficient"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_constant\"), disambiguator: 0 }]","has_unsafe":false,"name":"<monomial::Monomial<I, C, P>>::is_constant"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_code\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P>>::to_code"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<monomial::Monomial<I, C, P> as std::convert::From<C>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::cmp::PartialEq<C>>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::cmp::PartialEq<polynomial::Polynomial<I, C, P>>>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::cmp::PartialOrd<C>>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::cmp::PartialOrd<polynomial::Polynomial<I, C, P>>>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"mul_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::ops::MulAssign<C>>::mul_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a monomial::Monomial<I, C, P> as std::ops::Mul<C>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"mul_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::ops::MulAssign<&'a monomial::Monomial<I, C, P>>>::mul_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b monomial::Monomial<I, C, P> as std::ops::Mul<&'a monomial::Monomial<I, C, P>>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b monomial::Monomial<I, C, P> as std::ops::Mul<&'a polynomial::Polynomial<I, C, P>>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a monomial::Monomial<I, C, P> as std::ops::Div<C>>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"div_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::ops::DivAssign<C>>::div_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"checked_div\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P>>::checked_div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b monomial::Monomial<I, C, P> as std::ops::Div<&'a monomial::Monomial<I, C, P>>>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"div_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<monomial::Monomial<I, C, P> as std::ops::DivAssign<&'a monomial::Monomial<I, C, P>>>::div_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a monomial::Monomial<I, C, P> as std::ops::Neg>::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a monomial::Monomial<I, C, P> as std::ops::Add<C>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a monomial::Monomial<I, C, P> as std::ops::Add<&'b monomial::Monomial<I, C, P>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b monomial::Monomial<I, C, P> as std::ops::Add<&'a polynomial::Polynomial<I, C, P>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a monomial::Monomial<I, C, P> as std::ops::Sub<C>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a monomial::Monomial<I, C, P> as std::ops::Sub<&'b monomial::Monomial<I, C, P>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"monomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b monomial::Monomial<I, C, P> as std::ops::Sub<&'a polynomial::Polynomial<I, C, P>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 39 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<polynomial::Polynomial<I, C, P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 38 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<polynomial::Polynomial<I, C, P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 37 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<polynomial::Polynomial<I, C, P> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_constant\"), disambiguator: 0 }]","has_unsafe":false,"name":"<polynomial::Polynomial<I, C, P>>::is_constant"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_code\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P>>::to_code"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"div_rem\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P>>::div_rem"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"checked_div\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P>>::checked_div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<polynomial::Polynomial<I, C, P> as std::convert::From<C>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::convert::From<&'a monomial::Monomial<I, C, P>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<polynomial::Polynomial<I, C, P> as std::convert::From<monomial::Monomial<I, C, P>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::cmp::PartialEq<C>>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::cmp::PartialEq<monomial::Monomial<I, C, P>>>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<polynomial::Polynomial<I, C, P> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::cmp::PartialOrd<C>>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::cmp::PartialOrd<monomial::Monomial<I, C, P>>>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"mul_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::MulAssign<C>>::mul_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a polynomial::Polynomial<I, C, P> as std::ops::Mul<C>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"mul_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::MulAssign<&'a monomial::Monomial<I, C, P>>>::mul_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b polynomial::Polynomial<I, C, P> as std::ops::Mul<&'a monomial::Monomial<I, C, P>>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"mul_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::MulAssign<&'a polynomial::Polynomial<I, C, P>>>::mul_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b polynomial::Polynomial<I, C, P> as std::ops::Mul<&'a polynomial::Polynomial<I, C, P>>>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a polynomial::Polynomial<I, C, P> as std::ops::Div<C>>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"div_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::DivAssign<C>>::div_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b polynomial::Polynomial<I, C, P> as std::ops::Div<&'a monomial::Monomial<I, C, P>>>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"div_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::DivAssign<&'a monomial::Monomial<I, C, P>>>::div_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b polynomial::Polynomial<I, C, P> as std::ops::Div<&'a polynomial::Polynomial<I, C, P>>>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"div_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::DivAssign<&'a polynomial::Polynomial<I, C, P>>>::div_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'a polynomial::Polynomial<I, C, P> as std::ops::Neg>::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::AddAssign<C>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 26 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a polynomial::Polynomial<I, C, P> as std::ops::Add<C>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 27 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::AddAssign<&'a monomial::Monomial<I, C, P>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 28 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b polynomial::Polynomial<I, C, P> as std::ops::Add<&'a monomial::Monomial<I, C, P>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 29 }, DisambiguatedDefPathData { data: ValueNs(\"add_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::AddAssign<&'a polynomial::Polynomial<I, C, P>>>::add_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 30 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b polynomial::Polynomial<I, C, P> as std::ops::Add<&'a polynomial::Polynomial<I, C, P>>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 31 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::SubAssign<C>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 32 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a polynomial::Polynomial<I, C, P> as std::ops::Sub<C>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 33 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::SubAssign<&'a monomial::Monomial<I, C, P>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 34 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b polynomial::Polynomial<I, C, P> as std::ops::Sub<&'a monomial::Monomial<I, C, P>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 35 }, DisambiguatedDefPathData { data: ValueNs(\"sub_assign\"), disambiguator: 0 }]","has_unsafe":true,"name":"<polynomial::Polynomial<I, C, P> as std::ops::SubAssign<&'a polynomial::Polynomial<I, C, P>>>::sub_assign"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"polynomial\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 36 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'b polynomial::Polynomial<I, C, P> as std::ops::Sub<&'a polynomial::Polynomial<I, C, P>>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<composite::Composite<I, C, P> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<composite::Composite<I, C, P> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<composite::Composite<I, C, P> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<composite::Composite<I, C, P> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<composite::Composite<I, C, P> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval\"), disambiguator: 0 }]","has_unsafe":true,"name":"<composite::Composite<I, C, P>>::eval"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"to_code\"), disambiguator: 0 }]","has_unsafe":true,"name":"<composite::Composite<I, C, P>>::to_code"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<composite::Composite<I, C, P> as std::fmt::Display>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<composite::Composite<I, C, P> as std::cmp::PartialOrd>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"composite\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"<composite::Composite<I, C, P> as std::cmp::Ord>::cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"integer_impl::<impl std::cmp::PartialEq<monomial::Monomial<I, i64, P>> for i64>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"integer_impl::<impl std::cmp::PartialEq<polynomial::Polynomial<I, i64, P>> for i64>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"integer_impl::<impl std::cmp::PartialOrd<monomial::Monomial<I, i64, P>> for i64>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"partial_cmp\"), disambiguator: 0 }]","has_unsafe":true,"name":"integer_impl::<impl std::cmp::PartialOrd<polynomial::Polynomial<I, i64, P>> for i64>::partial_cmp"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":false,"name":"integer_impl::<impl std::ops::Div<&'a monomial::Monomial<I, i64, P>> for i64>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"div\"), disambiguator: 0 }]","has_unsafe":false,"name":"integer_impl::<impl std::ops::Div<&'a polynomial::Polynomial<I, i64, P>> for i64>::div"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":true,"name":"integer_impl::<impl std::ops::Mul<&'a monomial::Monomial<I, i64, P>> for i64>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"mul\"), disambiguator: 0 }]","has_unsafe":true,"name":"integer_impl::<impl std::ops::Mul<&'a polynomial::Polynomial<I, i64, P>> for i64>::mul"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"integer_impl::<impl std::ops::Add<&'a monomial::Monomial<I, i64, P>> for i64>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"integer_impl::<impl std::ops::Sub<&'a monomial::Monomial<I, i64, P>> for i64>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"integer_impl\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"integer_impl::<impl std::ops::Sub<&'a polynomial::Polynomial<I, i64, P>> for i64>::sub"}
