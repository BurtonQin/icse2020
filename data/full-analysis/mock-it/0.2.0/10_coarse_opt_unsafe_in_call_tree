{"def_path":"[DisambiguatedDefPathData { data: Module(\"matcher\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<matcher::Matcher<I> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"matcher\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<matcher::Matcher<I> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mock::Mock<I, O> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mock::Mock<I, O>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"given\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mock::Mock<I, O>>::given"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"called\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mock::Mock<I, O>>::called"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"mock\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"was_called_with\"), disambiguator: 0 }]","has_unsafe":false,"name":"<mock::Mock<I, O>>::was_called_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"output\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<output::Output<O> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"output\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<output::Output<O>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"output\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"will_return\"), disambiguator: 0 }]","has_unsafe":false,"name":"<output::Output<O>>::will_return"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"output\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"value_of\"), disambiguator: 0 }]","has_unsafe":false,"name":"output::value_of"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"rule\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<rule::Rule<I, O>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"validator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"verify\"), disambiguator: 0 }]","has_unsafe":false,"name":"validator::verify"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"validator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<validator::Validator<I>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"validator\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"times\"), disambiguator: 0 }]","has_unsafe":false,"name":"<validator::Validator<I>>::times"}
