{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::nibble::Nibble as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"hash\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::nibble::Nibble as std::hash::Hash>::hash"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::convert::From<usize>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::convert::Into<usize>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::convert::From<u8>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"into\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::Nibble as std::convert::Into<u8>>::into"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::NibbleType as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::NibbleType as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::nibble::NibbleType as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::nibble::NibbleType as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_key\"), disambiguator: 0 }]","has_unsafe":false,"name":"merkle::nibble::from_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_key\"), disambiguator: 0 }]","has_unsafe":false,"name":"merkle::nibble::into_key"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"decode\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::nibble::decode"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"encode\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::nibble::encode"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"common\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::nibble::common"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"nibble\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"common_all\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::nibble::common_all"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::node::MerkleNode<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleNode<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleNode<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::node::MerkleNode<'a> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"decode\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::node::MerkleNode::decode"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"inlinable\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::node::MerkleNode::inlinable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleNode<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"rlp_append\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleNode<'a> as rlp::Encodable>::rlp_append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::node::MerkleValue<'a> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<merkle::node::MerkleValue<'a> as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleValue<'a> as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleValue<'a> as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleValue<'a> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"decode\"), disambiguator: 0 }]","has_unsafe":true,"name":"merkle::node::MerkleValue::decode"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"merkle\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"rlp_append\"), disambiguator: 0 }]","has_unsafe":true,"name":"<merkle::node::MerkleValue<'a> as rlp::Encodable>::rlp_append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cache\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"cache::Cache::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"cache\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"cache::Cache::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"database::memory::MemoryDatabase::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"create_guard\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::memory::MemoryDatabase as database::Database<'a>>::create_guard"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::memory::MemoryDatabase as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::memory::MemoryDatabaseGuard<'a> as database::DatabaseGuard>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"memory\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"set\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::memory::MemoryDatabaseGuard<'a> as database::DatabaseGuard>::set"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create_trie\"), disambiguator: 0 }]","has_unsafe":true,"name":"database::Database::create_trie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create_empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"database::Database::create_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create_secure_trie\"), disambiguator: 0 }]","has_unsafe":true,"name":"database::Database::create_secure_trie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create_secure_empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"database::Database::create_secure_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create_fixed_trie\"), disambiguator: 0 }]","has_unsafe":true,"name":"database::Database::create_fixed_trie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create_fixed_empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"database::Database::create_fixed_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create_fixed_secure_trie\"), disambiguator: 0 }]","has_unsafe":true,"name":"database::Database::create_fixed_secure_trie"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Trait(\"Database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"create_fixed_secure_empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"database::Database::create_fixed_secure_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::collections::HashMap<bigint::H256, std::vec::Vec<u8>> as database::DatabaseGuard>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"set\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::collections::HashMap<bigint::H256, std::vec::Vec<u8>> as database::DatabaseGuard>::set"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::Change<'a, D>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<database::Change<'a, D>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"set\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::Change<'a, D>>::set"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"free\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::Change<'a, D>>::free"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"inserted\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::Change<'a, D>>::inserted"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"freed\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::Change<'a, D>>::freed"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<database::ChangeSet as std::convert::From<database::Change<'a, D>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"database\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"drain\"), disambiguator: 0 }]","has_unsafe":true,"name":"database::ChangeSet::drain"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<iter::FixedMerkleIterator<'a, D, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<iter::FixedMerkleIterator<'a, D, K, V> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<iter::MerkleIterator<'a, D>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"<iter::MerkleIterator<'a, D>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"prepare_value_as_child\"), disambiguator: 0 }]","has_unsafe":true,"name":"iter::prepare_value_as_child"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"iter\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":true,"name":"<iter::MerkleIterator<'a, D> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedTrie<D, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<FixedTrie<D, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<FixedTrie<D, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedTrie<D, K, V>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"existing\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedTrie<D, K, V>>::existing"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":false,"name":"<FixedTrie<D, K, V>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedTrie<D, K, V>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedTrie<D, K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedTrie<D, K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedTrie<D, K, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedTrie<D, K, V>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedSecureTrie<D, K, V> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<FixedSecureTrie<D, K, V> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<FixedSecureTrie<D, K, V>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedSecureTrie<D, K, V>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"existing\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedSecureTrie<D, K, V>>::existing"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":false,"name":"<FixedSecureTrie<D, K, V>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedSecureTrie<D, K, V>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedSecureTrie<D, K, V>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedSecureTrie<D, K, V>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FixedSecureTrie<D, K, V>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SecureTrie<D> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<SecureTrie<D> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<SecureTrie<D>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SecureTrie<D>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"existing\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SecureTrie<D>>::existing"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":false,"name":"<SecureTrie<D>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SecureTrie<D>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"secure_key\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SecureTrie<D>>::secure_key"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SecureTrie<D>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SecureTrie<D>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SecureTrie<D>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Trie<D> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::empty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"existing\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::existing"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"root\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Trie<D>>::root"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::get"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::insert"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::remove"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"copy_nodes\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::copy_nodes"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"build_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::build_value"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"build_submap\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::build_submap"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"build_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::build_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"build\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::build"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_by_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::get_by_value"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_by_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::get_by_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"get_raw\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::get_raw"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert_by_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::insert_by_value"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert_by_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::insert_by_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"insert_raw\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::insert_raw"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove_by_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::remove_by_value"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"collapse\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::collapse"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"collapse\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"find_subnode\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::collapse::find_subnode"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove_by_node\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::remove_by_node"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"remove_raw\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Trie<D>>::remove_raw"}
