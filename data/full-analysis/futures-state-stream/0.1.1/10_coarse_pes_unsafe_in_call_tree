{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"boxed\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::boxed"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_future\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::into_future"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_stream\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::into_stream"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::map"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map_err\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::map_err"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"map_state\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::map_state"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"filter\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::filter"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"filter_map\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::filter_map"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"then\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::then"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"and_then\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::and_then"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"and_then_state\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::and_then_state"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"or_else\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::or_else"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"collect\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::collect"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"fold\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::fold"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"skip_while\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::skip_while"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"for_each\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::for_each"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"catch_unwind\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::catch_unwind"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"buffered\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::buffered"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StateStream\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"buffered_unordered\"), disambiguator: 0 }]","has_unsafe":false,"name":"StateStream::buffered_unordered"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<std::boxed::Box<S> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<&'a mut S as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<std::panic::AssertUnwindSafe<S> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"FutureExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"flatten_state_stream\"), disambiguator: 0 }]","has_unsafe":false,"name":"FutureExt::flatten_state_stream"}
{"def_path":"[DisambiguatedDefPathData { data: Trait(\"StreamExt\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_state_stream\"), disambiguator: 0 }]","has_unsafe":false,"name":"StreamExt::into_state_stream"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"unfold\"), disambiguator: 0 }]","has_unsafe":false,"name":"unfold"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FromStream<S> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<IntoFuture<S> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<IntoStream<S> as futures::Stream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Map<S, F> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<MapErr<S, F> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<MapState<S, F> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Collect<S> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Unfold<T, F, Fut> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FlattenStateStream<F> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Filter<S, F> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<FilterMap<S, F> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 16 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Then<S, F, U> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 17 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<AndThen<S, F, U> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 18 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<AndThenState<S, F, U> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 19 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<OrElse<S, F, U> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 20 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Fold<S, T, F, Fut, G, Fut2> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 21 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<SkipWhile<S, P, R> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 22 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<ForEach<S, F> as futures::Future>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 23 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":false,"name":"<CatchUnwind<S> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 24 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<Buffered<S> as StateStream>::poll"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 25 }, DisambiguatedDefPathData { data: ValueNs(\"poll\"), disambiguator: 0 }]","has_unsafe":true,"name":"<BufferedUnordered<S> as StateStream>::poll"}
