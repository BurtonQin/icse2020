{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Node<A> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Node<A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Property as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Property as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Property as std::convert::From<graph::Variable>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Property as std::convert::From<operators::UnaryOperatorAny>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Property as std::convert::From<operators::BinaryOperatorAny>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Node<A>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_variable\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Node<A>>::is_variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Variable as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Variable as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"graph::Variable::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A> as std::convert::From<petgraph::Graph<graph::Node<A>, ()>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 13 }, DisambiguatedDefPathData { data: ValueNs(\"deref\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A> as std::ops::Deref>::deref"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"deref_mut\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A> as std::ops::DerefMut>::deref_mut"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"variable\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A>>::variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"scalar_variable\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A>>::scalar_variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"vector_variable\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A>>::vector_variable"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"set_value\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A>>::set_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":true,"name":"<graph::Graph<A>>::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","has_unsafe":true,"name":"<graph::Graph<A>>::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"sub\"), disambiguator: 0 }]","has_unsafe":true,"name":"<graph::Graph<A>>::sub"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get_arg1\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A>>::get_arg1"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get_arg2\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A>>::get_arg2"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get_value\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A>>::get_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"get_deriv\"), disambiguator: 0 }]","has_unsafe":false,"name":"<graph::Graph<A>>::get_deriv"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eval_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"<graph::Graph<A>>::eval_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"deriv_recur\"), disambiguator: 0 }]","has_unsafe":true,"name":"<graph::Graph<A>>::deriv_recur"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"graph\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eval_deriv\"), disambiguator: 0 }]","has_unsafe":true,"name":"<graph::Graph<A>>::eval_deriv"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"neg\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::neg::Neg as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"neg\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::neg::Neg as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"neg\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"<operators::neg::Neg as operators::UnaryOperator<A>>::eval_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"neg\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval_deriv\"), disambiguator: 0 }]","has_unsafe":true,"name":"<operators::neg::Neg as operators::UnaryOperator<A>>::eval_deriv"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"add\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::add::Add as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"add\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::add::Add as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"add\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"<operators::add::Add as operators::BinaryOperator<A>>::eval_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"add\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"eval_deriv\"), disambiguator: 0 }]","has_unsafe":true,"name":"<operators::add::Add as operators::BinaryOperator<A>>::eval_deriv"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::Value<A> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<operators::Value<A> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::Value<A> as std::convert::From<A>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::Value<A> as std::convert::From<ndarray::ArrayBase<ndarray::OwnedRepr<A>, ndarray::Dim<[usize; _]>>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::Value<A> as std::convert::From<ndarray::ArrayBase<ndarray::OwnedRepr<A>, ndarray::Dim<[usize; _]>>>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"as_scalar\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::Value<A>>::as_scalar"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"identity\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::Value<A>>::identity"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::UnaryOperatorAny as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::UnaryOperatorAny as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::UnaryOperatorAny as std::convert::From<operators::neg::Neg>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"neg\"), disambiguator: 0 }]","has_unsafe":false,"name":"operators::neg"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"<operators::UnaryOperatorAny as operators::UnaryOperator<A>>::eval_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"eval_deriv\"), disambiguator: 0 }]","has_unsafe":true,"name":"<operators::UnaryOperatorAny as operators::UnaryOperator<A>>::eval_deriv"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 15 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::BinaryOperatorAny as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 14 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::BinaryOperatorAny as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 12 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<operators::BinaryOperatorAny as std::convert::From<operators::add::Add>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"add\"), disambiguator: 0 }]","has_unsafe":false,"name":"operators::add"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eval_value\"), disambiguator: 0 }]","has_unsafe":true,"name":"<operators::BinaryOperatorAny as operators::BinaryOperator<A>>::eval_value"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"operators\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"eval_deriv\"), disambiguator: 0 }]","has_unsafe":true,"name":"<operators::BinaryOperatorAny as operators::BinaryOperator<A>>::eval_deriv"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::Error as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::Error as std::convert::From<error::UnaryOpTypeError>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::Error as std::convert::From<error::BinOpTypeError>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::Error as std::convert::From<error::CastError>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::Error as std::convert::From<error::NodeTypeError>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::UnaryOpTypeError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::BinOpTypeError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::CastError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::NodeTypeError as std::fmt::Debug>::fmt"}
