{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"color_convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<decode::color_convert::ColorSpace as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"color_convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<decode::color_convert::ColorSpace as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"color_convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<decode::color_convert::ColorSpaceValue as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"color_convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<decode::color_convert::ColorSpaceValue as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"color_convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<decode::color_convert::ColorSpaceValue as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"color_convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"ne\"), disambiguator: 0 }]","has_unsafe":true,"name":"<decode::color_convert::ColorSpaceValue as std::cmp::PartialEq>::ne"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"color_convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<decode::color_convert::ColorSpaceValue as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"color_convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"determined\"), disambiguator: 0 }]","has_unsafe":false,"name":"decode::color_convert::ColorSpaceValue::determined"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"color_convert\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"convert_to_rgba\"), disambiguator: 0 }]","has_unsafe":false,"name":"decode::color_convert::ColorSpace::convert_to_rgba"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"support\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"decode::support::LogHandlerData::new"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Module(\"support\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"new_input\"), disambiguator: 0 }]","has_unsafe":false,"name":"decode::support::NdUserdata::new_input"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<decode::DecodeConfig as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<decode::Codec as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"assert_receiver_is_total_eq\"), disambiguator: 0 }]","has_unsafe":false,"name":"<decode::Codec as std::cmp::Eq>::assert_receiver_is_total_eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"eq\"), disambiguator: 0 }]","has_unsafe":true,"name":"<decode::Codec as std::cmp::PartialEq>::eq"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<decode::Codec as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"to_i32\"), disambiguator: 0 }]","has_unsafe":false,"name":"decode::Codec::to_i32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"from_i32\"), disambiguator: 0 }]","has_unsafe":false,"name":"decode::<impl decode::color_convert::ColorSpaceValue>::from_i32"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"ceil_div_pow2\"), disambiguator: 0 }]","has_unsafe":false,"name":"decode::ceil_div_pow2"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_memory\"), disambiguator: 0 }]","has_unsafe":true,"name":"decode::from_memory"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"decode\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from_file\"), disambiguator: 0 }]","has_unsafe":true,"name":"decode::from_file"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::DecodeError as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"from\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::DecodeError as std::convert::From<std::ffi::NulError>>::from"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"description\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::DecodeError as std::error::Error>::description"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"error\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<error::DecodeError as std::fmt::Display>::fmt"}
