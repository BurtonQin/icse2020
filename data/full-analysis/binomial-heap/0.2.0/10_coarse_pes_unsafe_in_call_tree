{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":true,"name":"<node::Node<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","has_unsafe":true,"name":"node::append"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","has_unsafe":true,"name":"node::push"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"peek\"), disambiguator: 0 }]","has_unsafe":false,"name":"node::peek"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pop\"), disambiguator: 0 }]","has_unsafe":false,"name":"node::pop"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"node::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"node::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<node::Iter<'a, T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<node::Iter<'a, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<node::Iter<'a, T> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<node::Iter<'a, T> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<node::IntoIter<T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<node::IntoIter<T> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<node::IntoIter<T> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"merge\"), disambiguator: 0 }]","has_unsafe":false,"name":"node::merge"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"link\"), disambiguator: 0 }]","has_unsafe":true,"name":"node::link"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"coalesce\"), disambiguator: 0 }]","has_unsafe":true,"name":"node::coalesce"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"node\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"remove_max\"), disambiguator: 0 }]","has_unsafe":false,"name":"node::remove_max"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 11 }, DisambiguatedDefPathData { data: ValueNs(\"clone\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T> as std::clone::Clone>::clone"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"new\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T>>::new"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"is_empty\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T>>::is_empty"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T>>::len"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T>>::iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"peek\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T>>::peek"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push\"), disambiguator: 0 }]","has_unsafe":true,"name":"<BinomialHeap<T>>::push"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"append\"), disambiguator: 0 }]","has_unsafe":true,"name":"<BinomialHeap<T>>::append"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"push_pop\"), disambiguator: 0 }]","has_unsafe":true,"name":"<BinomialHeap<T>>::push_pop"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"replace\"), disambiguator: 0 }]","has_unsafe":true,"name":"<BinomialHeap<T>>::replace"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"pop\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T>>::pop"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"clear\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T>>::clear"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"drain\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T>>::drain"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"fmt\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T> as std::fmt::Debug>::fmt"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"default\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T> as std::default::Default>::default"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 3 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","has_unsafe":true,"name":"<BinomialHeap<T> as std::iter::Extend<T>>::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 4 }, DisambiguatedDefPathData { data: ValueNs(\"extend\"), disambiguator: 0 }]","has_unsafe":true,"name":"<BinomialHeap<T> as std::iter::Extend<&'a T>>::extend"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 5 }, DisambiguatedDefPathData { data: ValueNs(\"from_iter\"), disambiguator: 0 }]","has_unsafe":true,"name":"<BinomialHeap<T> as std::iter::FromIterator<T>>::from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 6 }, DisambiguatedDefPathData { data: ValueNs(\"from_iter\"), disambiguator: 0 }]","has_unsafe":true,"name":"<BinomialHeap<T> as std::iter::FromIterator<&'a T>>::from_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 7 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<BinomialHeap<T> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 8 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"<&'a BinomialHeap<T> as std::iter::IntoIterator>::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Drain<'a, T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 9 }, DisambiguatedDefPathData { data: ValueNs(\"size_hint\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Drain<'a, T> as std::iter::Iterator>::size_hint"}
{"def_path":"[DisambiguatedDefPathData { data: Impl, disambiguator: 10 }, DisambiguatedDefPathData { data: ValueNs(\"len\"), disambiguator: 0 }]","has_unsafe":false,"name":"<Drain<'a, T> as std::iter::ExactSizeIterator>::len"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }]","has_unsafe":false,"name":"assert_covariance"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"heap\"), disambiguator: 0 }]","has_unsafe":false,"name":"assert_covariance::heap"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"into_iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"assert_covariance::into_iter"}
{"def_path":"[DisambiguatedDefPathData { data: ValueNs(\"assert_covariance\"), disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"iter\"), disambiguator: 0 }]","has_unsafe":false,"name":"assert_covariance::iter"}
