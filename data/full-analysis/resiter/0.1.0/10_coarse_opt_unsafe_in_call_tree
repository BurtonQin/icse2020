{"def_path":"[DisambiguatedDefPathData { data: Module(\"errors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"errors\"), disambiguator: 0 }]","has_unsafe":false,"name":"<I as errors::GetErrors<T>>::errors"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"errors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<errors::Errors<T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"errors\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"process\"), disambiguator: 0 }]","has_unsafe":false,"name":"<errors::Errors<T>>::process"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"oks\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"oks\"), disambiguator: 0 }]","has_unsafe":false,"name":"<I as oks::GetOks<T>>::oks"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"oks\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<oks::Oks<T> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"oks\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 2 }, DisambiguatedDefPathData { data: ValueNs(\"process\"), disambiguator: 0 }]","has_unsafe":false,"name":"<oks::Oks<T>>::process"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"onerr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"on_err\"), disambiguator: 0 }]","has_unsafe":false,"name":"<I as onerr::OnErrDo<I, O, E, F>>::on_err"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"onerr\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<onerr::OnErr<I, O, E, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"onok\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"on_ok\"), disambiguator: 0 }]","has_unsafe":false,"name":"<I as onok::OnOkDo<I, O, E, F>>::on_ok"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"onok\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<onok::OnOk<I, O, E, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unwrap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"next\"), disambiguator: 0 }]","has_unsafe":false,"name":"<unwrap::UnwrapWith<I, O, E, F> as std::iter::Iterator>::next"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"unwrap\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"unwrap_with\"), disambiguator: 0 }]","has_unsafe":false,"name":"<I as unwrap::UnwrapWithExt<I, O, E, F>>::unwrap_with"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 0 }, DisambiguatedDefPathData { data: ValueNs(\"get_err\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::result::Result<U, T> as util::GetErr<T>>::get_err"}
{"def_path":"[DisambiguatedDefPathData { data: Module(\"util\"), disambiguator: 0 }, DisambiguatedDefPathData { data: Impl, disambiguator: 1 }, DisambiguatedDefPathData { data: ValueNs(\"get_ok\"), disambiguator: 0 }]","has_unsafe":false,"name":"<std::result::Result<T, E> as util::GetOk<T>>::get_ok"}
