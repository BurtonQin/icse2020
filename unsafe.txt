Debug and PartialEq implementations of the compiler for enum have unsafe blocks:
Notes from documentation:
pub unsafe extern "rust-intrinsic" fn discriminant_value<T>(v: &T) -> u64
Returns the value of the discriminant for the variant in 'v', cast to a u64; if T has no discriminant, returns 0.

Example:
enum Type { Safe, Unsafe, }
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::std::cmp::PartialEq for Type {
    #[inline]
    fn eq(&self, other: &Type) -> bool {
        {
            let __self_vi =
                unsafe { ::std::intrinsics::discriminant_value(&*self) } as
                    isize;
            let __arg_1_vi =
                unsafe { ::std::intrinsics::discriminant_value(&*other) } as
                    isize;
            if true && __self_vi == __arg_1_vi {
                match (&*self, &*other) { _ => true, }
            } else { false }
        }
    }
}
#[automatically_derived]
#[allow(unused_qualifications)]
impl ::std::fmt::Debug for Type {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match (&*self,) {
            (&Type::Safe,) => {
                let mut debug_trait_builder = f.debug_tuple("Safe");
                debug_trait_builder.finish()
            }
            (&Type::Unsafe,) => {
                let mut debug_trait_builder = f.debug_tuple("Unsafe");
                debug_trait_builder.finish()
            }
        }
    }
}



1. hostname 1 unsafe block
  - call to C function gethostname
  - one file, basically one function
2. multipart 1 unsafe block
  - calls log::set_logger_raw 
  - log has a lot of unsafe; not clear why
3. ammonia 1 from macro 
  {"sources":[["2010",[{"loc":"file: Macros(\"__lazy_static_internal\") line 14","kind":{"UnsafeFnCall":"Rust"}}]]]}
4. gfx - old sources
        let slice = unsafe {
            slice::from_raw_parts(data as *const T as *const u8, mem::size_of::<T>())
        };
        self.command_buffer.update_buffer(
            self.handles.ref_buffer(buf.raw()).clone(), slice, 0);
5. rustfmt 
fn isatty() -> bool {
        extern crate libc;

        unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }
    }

6. log
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
}
changes the type from usize to enum LevelFilter (static MAX_LOG_LEVEL_FILTER: AtomicUsize = ATOMIC_USIZE_INIT;)

pub fn set_boxed_logger(logger: Box<Log>) -> Result<(), SetLoggerError> {
    set_logger_inner(|| unsafe { &*Box::into_raw(logger) })
}
returns a Rust reference to the interior object in Box

fn set_logger_inner<F>(make_logger: F) -> Result<(), SetLoggerError>
where
    F: FnOnce() -> &'static Log,
{
    unsafe {
        match STATE.compare_and_swap(UNINITIALIZED, INITIALIZING, Ordering::SeqCst) {
            UNINITIALIZED => {
                LOGGER = make_logger();
                STATE.store(INITIALIZED, Ordering::SeqCst);
                Ok(())
            }
            INITIALIZING => {
                while STATE.load(Ordering::SeqCst) == INITIALIZING {}
                Err(SetLoggerError(()))
            }
            _ => Err(SetLoggerError(())),
        }
    }
}

pub fn logger() -> &'static Log {
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
        }
    }
}

7. cargo 
- a bunch of libc calls without checks
- for C structs: let mut fds: [libc::pollfd; 2] = unsafe { mem::zeroed() }; 
- pub fn setup() -> Option<Setup> {
    unsafe { imp::setup() }
} -- nothing checked
- change the lifetime 
    - let tree = unsafe { mem::transmute::<git2::Tree, git2::Tree<'static>>(tree) };
    - let tx = unsafe { mem::transmute::<Sender<Message<'a>>, Sender<Message<'static>>>(tx) };
- cast from usize to Downloads
            unsafe {
                f(Some(&*(ptr as *const Downloads)))
            }


